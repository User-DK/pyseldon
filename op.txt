ninja: Entering directory `/home/parrot_user/Desktop/pyseldon/build'
[1/2] Compiling C++ object seldoncore.cpython-312-x86_64-linux-gnu.so.p/python_bindings_bindings.cpp.o
FAILED: seldoncore.cpython-312-x86_64-linux-gnu.so.p/python_bindings_bindings.cpp.o 
c++ -Iseldoncore.cpython-312-x86_64-linux-gnu.so.p -I. -I.. -Isubprojects -I../subprojects -I../subprojects/seldon/include -I/home/parrot_user/micromamba/envs/pyseldonenv/include -I/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12 -fvisibility=hidden -fvisibility-inlines-hidden -fdiagnostics-color=always -D_GLIBCXX_ASSERTIONS=1 -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wextra -Wpedantic -Wcast-qual -Wconversion -Wfloat-equal -Wformat=2 -Winline -Wmissing-declarations -Wredundant-decls -Wshadow -Wundef -Wuninitialized -Wwrite-strings -Wdisabled-optimization -Wpacked -Wpadded -Wmultichar -Wswitch-default -Wswitch-enum -Wunused-macros -Wmissing-include-dirs -Wunsafe-loop-optimizations -Wstack-protector -Wstrict-overflow=5 -Warray-bounds=2 -Wlogical-op -Wstrict-aliasing=3 -Wvla -Wdouble-promotion -Wsuggest-attribute=const -Wsuggest-attribute=noreturn -Wsuggest-attribute=pure -Wtrampolines -Wvector-operation-performance -Wsuggest-attribute=format -Wdate-time -Wformat-signedness -Wnormalized=nfc -Wduplicated-cond -Wnull-dereference -Wshift-negative-value -Wshift-overflow=2 -Wunused-const-variable=2 -Walloca -Walloc-zero -Wformat-overflow=2 -Wformat-truncation=2 -Wstringop-overflow=3 -Wduplicated-branches -Wcast-align=strict -Wsuggest-attribute=cold -Wsuggest-attribute=malloc -Wattribute-alias=2 -Wanalyzer-too-complex -Warith-conversion -Wbidi-chars=ucn -Wopenacc-parallelism -Wtrivial-auto-var-init -Wctor-dtor-privacy -Weffc++ -Wnon-virtual-dtor -Wold-style-cast -Woverloaded-virtual -Wsign-promo -Wstrict-null-sentinel -Wnoexcept -Wzero-as-null-pointer-constant -Wabi-tag -Wuseless-cast -Wconditionally-supported -Wsuggest-final-methods -Wsuggest-final-types -Wsuggest-override -Wmultiple-inheritance -Wplacement-new=2 -Wvirtual-inheritance -Waligned-new=all -Wnoexcept-type -Wregister -Wcatch-value=3 -Wextra-semi -Wdeprecated-copy-dtor -Wredundant-move -Wcomma-subscript -Wmismatched-tags -Wredundant-tags -Wvolatile -Wdeprecated-enum-enum-conversion -Wdeprecated-enum-float-conversion -Winvalid-imported-macros -std=c++20 -O0 -g -fPIC -fPIC -MD -MQ seldoncore.cpython-312-x86_64-linux-gnu.so.p/python_bindings_bindings.cpp.o -MF seldoncore.cpython-312-x86_64-linux-gnu.so.p/python_bindings_bindings.cpp.o.d -o seldoncore.cpython-312-x86_64-linux-gnu.so.p/python_bindings_bindings.cpp.o -c ../python_bindings/bindings.cpp
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:49,
                 from ../subprojects/seldon/include/config_parser.hpp:2,
                 from ../python_bindings/bindings.cpp:1:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:924:53: warning: ‘fmt::v10::detail::iterator_buffer<OutputIt, T, Traits>’ defined with multiple direct bases [-Wmultiple-inheritance]
  924 | class iterator_buffer final : public Traits, public buffer<T> {
      |                                                     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:958:14: warning: ‘fmt::v10::detail::iterator_buffer<T*, T, fmt::v10::detail::fixed_buffer_traits>’ defined with multiple direct bases [-Wmultiple-inheritance]
  958 |       public buffer<T> {
      |              ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2036:59: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 2036 |   FMT_CONSTEXPR void operator=(basic_string_view<Char> s) {
      |                                                           ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In function ‘constexpr fmt::v10::align_t fmt::v10::detail::parse_align(char)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2195:10: warning: switch missing default case [-Wswitch-default]
 2195 |   switch (c) {
      |          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘class fmt::v10::basic_format_arg<fmt::v10::basic_format_context<fmt::v10::appender, char> >’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1047:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1627:35: warning: padding struct size to alignment boundary [-Wpadded]
 1627 | template <typename Context> class basic_format_arg {
      |                                   ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘struct fmt::v10::detail::thousands_sep_result<char>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1264:17:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1254:33: warning: ‘fmt::v10::detail::thousands_sep_result<char>’ does not have the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in the type of ‘fmt::v10::detail::thousands_sep_result<char>::grouping’) has [-Wabi-tag]
 1254 | template <typename Char> struct thousands_sep_result {
      |                                 ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1255:15: note: ‘fmt::v10::detail::thousands_sep_result<char>::grouping’ declared here
 1255 |   std::string grouping;
      |               ^~~~~~~~
In file included from /usr/include/c++/12/string:53,
                 from /usr/include/c++/12/bits/locale_classes.h:40,
                 from /usr/include/c++/12/bits/ios_base.h:41,
                 from /usr/include/c++/12/ios:42,
                 from /usr/include/c++/12/ostream:38,
                 from /usr/include/c++/12/bits/unique_ptr.h:41,
                 from /usr/include/c++/12/memory:76,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:41:
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1254:33: warning: padding struct size to alignment boundary [-Wpadded]
 1254 | template <typename Char> struct thousands_sep_result {
      |                                 ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘struct fmt::v10::detail::thousands_sep_result<wchar_t>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1267:46:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1254:33: warning: ‘fmt::v10::detail::thousands_sep_result<wchar_t>’ does not have the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in the type of ‘fmt::v10::detail::thousands_sep_result<wchar_t>::grouping’) has [-Wabi-tag]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1255:15: note: ‘fmt::v10::detail::thousands_sep_result<wchar_t>::grouping’ declared here
 1255 |   std::string grouping;
      |               ^~~~~~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1254:33: warning: padding struct size to alignment boundary [-Wpadded]
 1254 | template <typename Char> struct thousands_sep_result {
      |                                 ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘struct fmt::v10::detail::basic_fp<long long unsigned int>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1701:52:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1617:30: warning: padding struct size to alignment boundary [-Wpadded]
 1617 | template <typename F> struct basic_fp {
      |                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘struct fmt::v10::detail::find_escape_result<char>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1810:8:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1786:33: warning: padding struct size to alignment boundary [-Wpadded]
 1786 | template <typename Char> struct find_escape_result {
      |                                 ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘class fmt::v10::basic_memory_buffer<char>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2133:53:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:883:7: warning: padding struct size to alignment boundary [-Wpadded]
  883 | class basic_memory_buffer final : public detail::buffer<T> {
      |       ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2287:66: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 2287 |     template <typename T> FMT_CONSTEXPR void operator=(const T&) {}
      |                                                                  ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2424:8: warning: padding struct size to alignment boundary [-Wpadded]
 2424 | struct float_specs {
      |        ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2781:7: warning: padding struct size to alignment boundary [-Wpadded]
 2781 | class bigint {
      |       ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In constructor ‘constexpr fmt::v10::detail::bigint::bigint()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2871:19: warning: ‘fmt::v10::detail::bigint::bigits_’ should be initialized in the member initialization list [-Weffc++]
 2871 |   FMT_CONSTEXPR20 bigint() : exp_(0) {}
      |                   ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In constructor ‘fmt::v10::detail::bigint::bigint(uint64_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2872:12: warning: ‘fmt::v10::detail::bigint::bigits_’ should be initialized in the member initialization list [-Weffc++]
 2872 |   explicit bigint(uint64_t n) { assign(n); }
      |            ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2872:12: warning: ‘fmt::v10::detail::bigint::exp_’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2885:65: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 2885 |   template <typename Int> FMT_CONSTEXPR20 void operator=(Int n) {
      |                                                                 ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘struct fmt::v10::detail::basic_fp<__int128 unsigned>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3049:72:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1617:30: warning: padding struct size to alignment boundary [-Wpadded]
 1617 | template <typename F> struct basic_fp {
      |                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘struct fmt::v10::detail::dragonbox::decimal_fp<double>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3319:48:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1557:30: warning: padding struct size to alignment boundary [-Wpadded]
 1557 | template <typename T> struct decimal_fp {
      |                              ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3976:9: warning: padding struct to align ‘fmt::v10::format_int::str_’ [-Wpadded]
 3976 |   char* str_;
      |         ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::format_specs<>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2129:8:   required from ‘struct fmt::v10::detail::dynamic_format_specs<>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:4112:34:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2084:24: warning: padding struct to align ‘fmt::v10::format_specs<>::fill’ [-Wpadded]
 2084 |   detail::fill_t<Char> fill;
      |                        ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::arg_ref<char>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2130:17:   required from ‘struct fmt::v10::detail::dynamic_format_specs<>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:4112:34:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2122:5: warning: padding struct to align ‘fmt::v10::detail::arg_ref<char>::val’ [-Wpadded]
 2122 |   } val;
      |     ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘class fmt::v10::basic_format_parse_context<char>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:4182:15:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:674:32: warning: padding struct size to alignment boundary [-Wpadded]
  674 | template <typename Char> class basic_format_parse_context {
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../subprojects/seldon/include/config_parser.hpp:4:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ranges.h:45:29: warning: all member functions in class ‘fmt::v10::detail::is_std_string_like<T>’ are private [-Wctor-dtor-privacy]
   45 | template <typename T> class is_std_string_like {
      |                             ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ranges.h:61:29: warning: all member functions in class ‘fmt::v10::detail::is_map<T>’ are private [-Wctor-dtor-privacy]
   61 | template <typename T> class is_map {
      |                             ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ranges.h:74:29: warning: all member functions in class ‘fmt::v10::detail::is_set<T>’ are private [-Wctor-dtor-privacy]
   74 | template <typename T> class is_set {
      |                             ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ranges.h:166:29: warning: all member functions in class ‘fmt::v10::detail::is_tuple_like_<T>’ are private [-Wctor-dtor-privacy]
  166 | template <typename T> class is_tuple_like_ {
      |                             ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ranges.h:208:41: warning: all member functions in class ‘fmt::v10::detail::is_tuple_formattable_<T, C, true>’ are private [-Wctor-dtor-privacy]
  208 | template <typename T, typename C> class is_tuple_formattable_<T, C, true> {
      |                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ranges.h:657:29: warning: all member functions in class ‘fmt::v10::detail::is_container_adaptor_like<T>’ are private [-Wctor-dtor-privacy]
  657 | template <typename T> class is_container_adaptor_like {
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/config_parser.hpp:39:12: warning: padding struct to align ‘Seldon::Config::OutputSettings::start_output’ [-Wpadded]
   39 |     size_t start_output         = 1; // Start printing opinion and/or network files from this iteration number
      |            ^~~~~~~~~~~~
../subprojects/seldon/include/config_parser.hpp:58:12: warning: padding struct to align ‘Seldon::Config::DeffuantSettings::dim’ [-Wpadded]
   58 |     size_t dim
      |            ^~~
../subprojects/seldon/include/config_parser.hpp:67:12: warning: padding struct to align ‘Seldon::Config::ActivityDrivenSettings::eps’ [-Wpadded]
   67 |     double eps                        = 0.01;
      |            ^~~
../subprojects/seldon/include/config_parser.hpp:75:12: warning: padding struct to align ‘Seldon::Config::ActivityDrivenSettings::n_bots’ [-Wpadded]
   75 |     size_t n_bots                     = 0; //@TODO why is this here?
      |            ^~~~~~
../subprojects/seldon/include/config_parser.hpp:81:12: warning: padding struct to align ‘Seldon::Config::ActivityDrivenSettings::reluctance_mean’ [-Wpadded]
   81 |     double reluctance_mean            = 1.0;
      |            ^~~~~~~~~~~~~~~
../subprojects/seldon/include/config_parser.hpp:92:8: warning: ‘Seldon::Config::InitialNetworkSettings’ does not have the "cxx11" ABI tag that ‘std::optional<std::__cxx11::basic_string<char> >’ (used in the type of ‘Seldon::Config::InitialNetworkSettings::file’) has [-Wabi-tag]
   92 | struct InitialNetworkSettings
      |        ^~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/config_parser.hpp:94:32: note: ‘Seldon::Config::InitialNetworkSettings::file’ declared here
   94 |     std::optional<std::string> file;
      |                                ^~~~
In file included from ../subprojects/seldon/include/config_parser.hpp:6:
/usr/include/c++/12/optional:705:11: note: ‘std::optional<std::__cxx11::basic_string<char> >’ declared here
  705 |     class optional
      |           ^~~~~~~~
../subprojects/seldon/include/config_parser.hpp:99:8: warning: ‘Seldon::Config::SimulationOptions’ does not have the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in the type of ‘Seldon::Config::SimulationOptions::model_string’) has [-Wabi-tag]
   99 | struct SimulationOptions
      |        ^~~~~~~~~~~~~~~~~
../subprojects/seldon/include/config_parser.hpp:104:17: note: ‘Seldon::Config::SimulationOptions::model_string’ declared here
  104 |     std::string model_string;
      |                 ^~~~~~~~~~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
../subprojects/seldon/include/config_parser.hpp:104:17: warning: padding struct to align ‘Seldon::Config::SimulationOptions::model_string’ [-Wpadded]
  104 |     std::string model_string;
      |                 ^~~~~~~~~~~~
../subprojects/seldon/include/config_parser.hpp:106:20: warning: padding struct to align ‘Seldon::Config::SimulationOptions::output_settings’ [-Wpadded]
  106 |     OutputSettings output_settings;
      |                    ^~~~~~~~~~~~~~~
In file included from ../python_bindings/bindings.cpp:2:
../subprojects/seldon/include/model.hpp:17:87: warning: extra ‘;’ after in-class function definition [-Wextra-semi]
   17 |     Model( std::optional<size_t> max_iterations ) : max_iterations( max_iterations ){};
      |                                                                                       ^
      |                                                                                       -
../subprojects/seldon/include/model.hpp:27:6: warning: extra ‘;’ after in-class function definition [-Wextra-semi]
   27 |     };
      |      ^
      |      -
../subprojects/seldon/include/model.hpp:44:6: warning: extra ‘;’ after in-class function definition [-Wextra-semi]
   44 |     };
      |      ^
      |      -
../subprojects/seldon/include/model.hpp: In constructor ‘Seldon::Model<AgentT_>::Model(std::optional<long unsigned int>)’:
../subprojects/seldon/include/model.hpp:17:34: warning: declaration of ‘max_iterations’ shadows a member of ‘Seldon::Model<AgentT_>’ [-Wshadow]
   17 |     Model( std::optional<size_t> max_iterations ) : max_iterations( max_iterations ){};
      |            ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
../subprojects/seldon/include/model.hpp:49:27: note: shadowed declaration is here
   49 |     std::optional<size_t> max_iterations = std::nullopt;
      |                           ^~~~~~~~~~~~~~
In file included from ../subprojects/seldon/include/agents/activity_agent.hpp:3,
                 from ../subprojects/seldon/include/models/ActivityDrivenModel.hpp:3,
                 from ../subprojects/seldon/include/model_factory.hpp:4,
                 from ../python_bindings/bindings.cpp:3:
../subprojects/seldon/include/agent.hpp: In constructor ‘Seldon::Agent<T>::Agent(data_t)’:
../subprojects/seldon/include/agent.hpp:16:19: warning: declaration of ‘data’ shadows a member of ‘Seldon::Agent<T>’ [-Wshadow]
   16 |     Agent( data_t data ) : data( data ) {}
      |            ~~~~~~~^~~~
../subprojects/seldon/include/agent.hpp:14:12: note: shadowed declaration is here
   14 |     data_t data;
      |            ^~~~
In file included from ../subprojects/seldon/include/agent_io.hpp:3,
                 from ../subprojects/seldon/include/agents/activity_agent.hpp:4:
../subprojects/seldon/include/network.hpp: In constructor ‘Seldon::Network<AgentType, WeightType>::Network(std::vector<_RealType>)’:
../subprojects/seldon/include/network.hpp:54:34: warning: declaration of ‘agents’ shadows a member of ‘Seldon::Network<AgentType, WeightType>’ [-Wshadow]
   54 |     Network( std::vector<AgentT> agents )
      |              ~~~~~~~~~~~~~~~~~~~~^~~~~~
../subprojects/seldon/include/network.hpp:43:25: note: shadowed declaration is here
   43 |     std::vector<AgentT> agents{}; // List of agents of type AgentType
      |                         ^~~~~~
../subprojects/seldon/include/network.hpp: In constructor ‘Seldon::Network<AgentType, WeightType>::Network(std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<WeightType> >&&, EdgeDirection)’:
../subprojects/seldon/include/network.hpp:62:98: warning: declaration of ‘weight_list’ shadows a member of ‘Seldon::Network<AgentType, WeightType>’ [-Wshadow]
   62 |         std::vector<std::vector<size_t>> && neighbour_list, std::vector<std::vector<WeightT>> && weight_list,
      |                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
../subprojects/seldon/include/network.hpp:310:39: note: shadowed declaration is here
  310 |     std::vector<std::vector<WeightT>> weight_list{};   // List for the interaction weights of each connection
      |                                       ^~~~~~~~~~~
../subprojects/seldon/include/network.hpp:62:45: warning: declaration of ‘neighbour_list’ shadows a member of ‘Seldon::Network<AgentType, WeightType>’ [-Wshadow]
   62 |         std::vector<std::vector<size_t>> && neighbour_list, std::vector<std::vector<WeightT>> && weight_list,
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
../subprojects/seldon/include/network.hpp:309:38: note: shadowed declaration is here
  309 |     std::vector<std::vector<size_t>> neighbour_list{}; // Neighbour list for the connections
      |                                      ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘class fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:47:   required from ‘consteval fmt::v10::basic_format_string<Char, Args>::basic_format_string(const S&) [with S = char [41]; typename std::enable_if<std::is_convertible<const S&, fmt::v10::basic_string_view<Char> >::value, int>::type <anonymous> = 0; Char = char; Args = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}]’
../subprojects/seldon/include/util/misc.hpp:17:46:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2649:22: warning: padding struct to align ‘fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::context_’ [-Wpadded]
 2649 |   parse_context_type context_;
      |                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, streamed_view<std::filesystem::__cxx11::path> >&>(const char*, const char*, format_string_checker<char, streamed_view<std::filesystem::__cxx11::path> >&)::id_adapter’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2497:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_replacement_field(const Char*, const Char*, Handler&&) [with Char = char; Handler = format_string_checker<char, streamed_view<std::filesystem::__cxx11::path> >&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2568:36:   required from here
../subprojects/seldon/include/util/misc.hpp:17:46:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >("Canot read from {}. File does not exist!")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, streamed_view<std::filesystem::__cxx11::path> > >(((fmt::v10::basic_format_string<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >*)this)->fmt::v10::basic_format_string<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::str_, fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2488:10: warning: padding struct size to alignment boundary [-Wpadded]
 2488 |   struct id_adapter {
      |          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘constexpr decltype (ctx.begin()) fmt::v10::detail::parse_format_specs(ParseContext&) [with T = streamed_view<std::filesystem::__cxx11::path>; ParseContext = compile_parse_context<char>; decltype (ctx.begin()) = const char*]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2684:51:   required from here
../subprojects/seldon/include/util/misc.hpp:17:46:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >("Canot read from {}. File does not exist!")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, streamed_view<std::filesystem::__cxx11::path> > >(((fmt::v10::basic_format_string<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >*)this)->fmt::v10::basic_format_string<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::str_, fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2568:36:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, streamed_view<std::filesystem::__cxx11::path> >&>(p, end, (* & handler))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2502:33:   in ‘constexpr’ expansion of ‘(& handler)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::on_replacement_field((& handler)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::on_arg_id(), begin)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2677:20:   in ‘constexpr’ expansion of ‘((fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >*)this)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::on_format_specs(id, begin, begin)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2734:8: warning: ‘fmt::v10::formatter<fmt::v10::basic_string_view<char>, char, void>::specs_’ should be initialized in the member initialization list [-Weffc++]
 2734 | struct formatter<T, Char,
      |        ^~~~~~~~~~~~~~~~~~
 2735 |                  enable_if_t<detail::type_constant<T, Char>::value !=
      |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2736 |                              detail::type::custom_type>> {
      |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2129:8: warning: ‘fmt::v10::detail::dynamic_format_specs<>::width_ref’ should be initialized in the member initialization list [-Weffc++]
 2129 | struct dynamic_format_specs : format_specs<Char> {
      |        ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2129:8: warning: ‘fmt::v10::detail::dynamic_format_specs<>::precision_ref’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2734:8: note: synthesized method ‘constexpr fmt::v10::detail::dynamic_format_specs<>::dynamic_format_specs()’ first required here
 2734 | struct formatter<T, Char,
      |        ^~~~~~~~~~~~~~~~~~
 2735 |                  enable_if_t<detail::type_constant<T, Char>::value !=
      |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2736 |                              detail::type::custom_type>> {
      |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../subprojects/seldon/include/config_parser.hpp:3:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:143:8: note: synthesized method ‘constexpr fmt::v10::formatter<fmt::v10::basic_string_view<char>, char, void>::formatter()’ first required here
  143 | struct basic_ostream_formatter : formatter<basic_string_view<Char>, Char> {
      |        ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:159:8: note: synthesized method ‘constexpr fmt::v10::basic_ostream_formatter<char>::basic_ostream_formatter()’ first required here
  159 | struct formatter<detail::streamed_view<T>, Char>
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2591:12: note: synthesized method ‘constexpr fmt::v10::formatter<fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>, char, void>::formatter()’ first required here
 2591 |     return formatter<mapped_type, char_type>().parse(ctx);
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘constexpr fmt::v10::format_specs<Char>::format_specs() [with Char = char]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2129:8:   required from here
../subprojects/seldon/include/util/misc.hpp:17:46:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >("Canot read from {}. File does not exist!")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, streamed_view<std::filesystem::__cxx11::path> > >(((fmt::v10::basic_format_string<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >*)this)->fmt::v10::basic_format_string<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::str_, fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2568:36:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, streamed_view<std::filesystem::__cxx11::path> >&>(p, end, (* & handler))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2502:33:   in ‘constexpr’ expansion of ‘(& handler)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::on_replacement_field((& handler)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::on_arg_id(), begin)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2677:20:   in ‘constexpr’ expansion of ‘((fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >*)this)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::on_format_specs(id, begin, begin)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2684:51:   in ‘constexpr’ expansion of ‘((fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >*)this)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::parse_funcs_[id](((fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >*)this)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::context_)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2591:53:   in ‘constexpr’ expansion of ‘fmt::v10::formatter<fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>, char, void>()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:159:8:   in ‘constexpr’ expansion of ‘((fmt::v10::formatter<fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>, char, void>*)this)->fmt::v10::formatter<fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>, char, void>::<anonymous>.fmt::v10::basic_ostream_formatter<char>::basic_ostream_formatter()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:143:8:   in ‘constexpr’ expansion of ‘((fmt::v10::basic_ostream_formatter<char>*)this)->fmt::v10::basic_ostream_formatter<char>::<anonymous>.fmt::v10::formatter<fmt::v10::basic_string_view<char>, char, void>::formatter()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2734:8:   in ‘constexpr’ expansion of ‘((fmt::v10::formatter<fmt::v10::basic_string_view<char>, char, void>*)this)->fmt::v10::formatter<fmt::v10::basic_string_view<char>, char, void>::specs_.fmt::v10::detail::dynamic_format_specs<>::dynamic_format_specs()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2086:13: warning: ‘fmt::v10::format_specs<>::fill’ should be initialized in the member initialization list [-Weffc++]
 2086 |   constexpr format_specs()
      |             ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_format_specs<char>(const char*, const char*, dynamic_format_specs<>&, fmt::v10::basic_format_parse_context<char>&, type)::<unnamed>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2345:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_format_specs(const Char*, const Char*, dynamic_format_specs<Char>&, fmt::v10::basic_format_parse_context<Char>&, type) [with Char = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2745:35:   required from here
../subprojects/seldon/include/util/misc.hpp:17:46:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >("Canot read from {}. File does not exist!")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, streamed_view<std::filesystem::__cxx11::path> > >(((fmt::v10::basic_format_string<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >*)this)->fmt::v10::basic_format_string<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::str_, fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2568:36:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, streamed_view<std::filesystem::__cxx11::path> >&>(p, end, (* & handler))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2502:33:   in ‘constexpr’ expansion of ‘(& handler)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::on_replacement_field((& handler)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::on_arg_id(), begin)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2677:20:   in ‘constexpr’ expansion of ‘((fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >*)this)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::on_format_specs(id, begin, begin)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2684:51:   in ‘constexpr’ expansion of ‘((fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >*)this)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::parse_funcs_[id](((fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >*)this)->fmt::v10::detail::format_string_checker<char, fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path> >::context_)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2591:53:   in ‘constexpr’ expansion of ‘fmt::v10::formatter<fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>, char, void>().fmt::v10::formatter<fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>, char, void>::<anonymous>.fmt::v10::basic_ostream_formatter<char>::<anonymous>.fmt::v10::formatter<fmt::v10::basic_string_view<char>, char, void>::parse<fmt::v10::detail::compile_parse_context<char> >((* & ctx))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2332:10: warning: padding struct size to alignment boundary [-Wpadded]
 2332 |   struct {
      |          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘constexpr const Char* fmt::v10::detail::parse_format_specs(const Char*, const Char*, dynamic_format_specs<Char>&, fmt::v10::basic_format_parse_context<Char>&, type) [with Char = char]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2745:35:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2361:7: warning: switch missing default case [-Wswitch-default]
 2361 |       switch (c) {
      |       ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘class fmt::v10::detail::format_string_checker<char, double, double, double>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:47:   required from ‘consteval fmt::v10::basic_format_string<Char, Args>::basic_format_string(const S&) [with S = char [11]; typename std::enable_if<std::is_convertible<const S&, fmt::v10::basic_string_view<Char> >::value, int>::type <anonymous> = 0; Char = char; Args = {const double&, const double&, const double&}]’
../subprojects/seldon/include/agents/activity_agent.hpp:21:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2649:22: warning: padding struct to align ‘fmt::v10::detail::format_string_checker<char, double, double, double>::context_’ [-Wpadded]
 2649 |   parse_context_type context_;
      |                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, double, double, double>&>(const char*, const char*, format_string_checker<char, double, double, double>&)::id_adapter’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2497:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_replacement_field(const Char*, const Char*, Handler&&) [with Char = char; Handler = format_string_checker<char, double, double, double>&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   required from here
../subprojects/seldon/include/agents/activity_agent.hpp:21:23:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, const double&, const double&, const double&>("{}, {}, {}")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, double, double, double> >(((fmt::v10::basic_format_string<char, const double&, const double&, const double&>*)this)->fmt::v10::basic_format_string<char, const double&, const double&, const double&>::str_, fmt::v10::detail::format_string_checker<char, double, double, double>(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2488:10: warning: padding struct size to alignment boundary [-Wpadded]
 2488 |   struct id_adapter {
      |          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘constexpr decltype (ctx.begin()) fmt::v10::detail::parse_format_specs(ParseContext&) [with T = double; ParseContext = compile_parse_context<char>; decltype (ctx.begin()) = const char*]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2684:51:   required from here
../subprojects/seldon/include/agents/activity_agent.hpp:21:23:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, const double&, const double&, const double&>("{}, {}, {}")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, double, double, double> >(((fmt::v10::basic_format_string<char, const double&, const double&, const double&>*)this)->fmt::v10::basic_format_string<char, const double&, const double&, const double&>::str_, fmt::v10::detail::format_string_checker<char, double, double, double>(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, double, double, double>&>((p + -1), end, (* & handler))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2502:33:   in ‘constexpr’ expansion of ‘(& handler)->fmt::v10::detail::format_string_checker<char, double, double, double>::on_replacement_field((& handler)->fmt::v10::detail::format_string_checker<char, double, double, double>::on_arg_id(), begin)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2677:20:   in ‘constexpr’ expansion of ‘((fmt::v10::detail::format_string_checker<char, double, double, double>*)this)->fmt::v10::detail::format_string_checker<char, double, double, double>::on_format_specs(id, begin, begin)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2734:8: warning: ‘fmt::v10::formatter<double, char, void>::specs_’ should be initialized in the member initialization list [-Weffc++]
 2734 | struct formatter<T, Char,
      |        ^~~~~~~~~~~~~~~~~~
 2735 |                  enable_if_t<detail::type_constant<T, Char>::value !=
      |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2736 |                              detail::type::custom_type>> {
      |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2591:12: note: synthesized method ‘constexpr fmt::v10::formatter<double, char, void>::formatter()’ first required here
 2591 |     return formatter<mapped_type, char_type>().parse(ctx);
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘class fmt::v10::detail::format_string_checker<char, double>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:47:   required from ‘consteval fmt::v10::basic_format_string<Char, Args>::basic_format_string(const S&) [with S = char [3]; typename std::enable_if<std::is_convertible<const S&, fmt::v10::basic_string_view<Char> >::value, int>::type <anonymous> = 0; Char = char; Args = {const double&}]’
../subprojects/seldon/include/agents/activity_agent.hpp:27:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2649:22: warning: padding struct to align ‘fmt::v10::detail::format_string_checker<char, double>::context_’ [-Wpadded]
 2649 |   parse_context_type context_;
      |                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, double>&>(const char*, const char*, format_string_checker<char, double>&)::id_adapter’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2497:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_replacement_field(const Char*, const Char*, Handler&&) [with Char = char; Handler = format_string_checker<char, double>&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   required from here
../subprojects/seldon/include/agents/activity_agent.hpp:27:23:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, const double&>("{}")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, double> >(((fmt::v10::basic_format_string<char, const double&>*)this)->fmt::v10::basic_format_string<char, const double&>::str_, fmt::v10::detail::format_string_checker<char, double>(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2488:10: warning: padding struct size to alignment boundary [-Wpadded]
 2488 |   struct id_adapter {
      |          ^~~~~~~~~~
../subprojects/seldon/include/agent.hpp: In constructor ‘constexpr Seldon::Agent<T>::Agent() [with T = Seldon::ActivityAgentData]’:
../subprojects/seldon/include/agent.hpp:15:5: warning: ‘Seldon::Agent<Seldon::ActivityAgentData>::data’ should be initialized in the member initialization list [-Weffc++]
   15 |     Agent() = default;
      |     ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, double, double, double, double>&>(const char*, const char*, format_string_checker<char, double, double, double, double>&)::id_adapter’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2497:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_replacement_field(const Char*, const Char*, Handler&&) [with Char = char; Handler = format_string_checker<char, double, double, double, double>&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   required from here
../subprojects/seldon/include/agents/inertial_agent.hpp:23:23:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, const double&, const double&, const double&, const double&>("{}, {}, {}, {}")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, double, double, double, double> >(((fmt::v10::basic_format_string<char, const double&, const double&, const double&, const double&>*)this)->fmt::v10::basic_format_string<char, const double&, const double&, const double&, const double&>::str_, fmt::v10::detail::format_string_checker<char, double, double, double, double>(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2488:10: warning: padding struct size to alignment boundary [-Wpadded]
 2488 |   struct id_adapter {
      |          ^~~~~~~~~~
../subprojects/seldon/include/agent.hpp: In constructor ‘constexpr Seldon::Agent<T>::Agent() [with T = Seldon::InertialAgentData]’:
../subprojects/seldon/include/agent.hpp:15:5: warning: ‘Seldon::Agent<Seldon::InertialAgentData>::data’ should be initialized in the member initialization list [-Weffc++]
   15 |     Agent() = default;
      |     ^~~~~
In file included from ../subprojects/seldon/include/network_generation.hpp:5,
                 from ../subprojects/seldon/include/models/ActivityDrivenModel.hpp:8:
../subprojects/seldon/include/util/math.hpp: In function ‘void Seldon::draw_unique_k_from_n(std::optional<long unsigned int>, std::size_t, std::size_t, std::vector<long unsigned int>&, std::mt19937&)’:
../subprojects/seldon/include/util/math.hpp:46:10: warning: extra ‘;’ after in-class function definition [-Wextra-semi]
   46 |         };
      |          ^
      |          -
../subprojects/seldon/include/util/math.hpp:50:10: warning: extra ‘;’ after in-class function definition [-Wextra-semi]
   50 |         };
      |          ^
      |          -
../subprojects/seldon/include/util/math.hpp: In constructor ‘Seldon::draw_unique_k_from_n(std::optional<long unsigned int>, std::size_t, std::size_t, std::vector<long unsigned int>&, std::mt19937&)::SequenceGenerator::SequenceGenerator(size_t, std::optional<long unsigned int>)’:
../subprojects/seldon/include/util/math.hpp:33:67: warning: declaration of ‘ignore_idx’ shadows a member of ‘Seldon::draw_unique_k_from_n(std::optional<long unsigned int>, std::size_t, std::size_t, std::vector<long unsigned int>&, std::mt19937&)::SequenceGenerator’ [-Wshadow]
   33 |         SequenceGenerator( const size_t i_, std::optional<size_t> ignore_idx ) : i( i_ ), ignore_idx( ignore_idx )
      |                                             ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../subprojects/seldon/include/util/math.hpp:41:31: note: shadowed declaration is here
   41 |         std::optional<size_t> ignore_idx;
      |                               ^~~~~~~~~~
../subprojects/seldon/include/util/math.hpp: In constructor ‘Seldon::draw_unique_k_from_n(std::optional<long unsigned int>, std::size_t, std::size_t, std::vector<long unsigned int>&, std::mt19937&)::SequenceGenerator::SequenceGenerator(size_t, std::optional<long unsigned int>)’:
../subprojects/seldon/include/util/math.hpp:33:67: warning: declaration of ‘ignore_idx’ shadows a member of ‘Seldon::draw_unique_k_from_n(std::optional<long unsigned int>, std::size_t, std::size_t, std::vector<long unsigned int>&, std::mt19937&)::SequenceGenerator’ [-Wshadow]
   33 |         SequenceGenerator( const size_t i_, std::optional<size_t> ignore_idx ) : i( i_ ), ignore_idx( ignore_idx )
      |                                             ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../subprojects/seldon/include/util/math.hpp:41:31: note: shadowed declaration is here
   41 |         std::optional<size_t> ignore_idx;
      |                               ^~~~~~~~~~
../subprojects/seldon/include/util/math.hpp: In constructor ‘Seldon::draw_unique_k_from_n(std::optional<long unsigned int>, std::size_t, std::size_t, std::vector<long unsigned int>&, std::mt19937&)::SequenceGenerator::SequenceGenerator(size_t, std::optional<long unsigned int>)’:
../subprojects/seldon/include/util/math.hpp:33:67: warning: declaration of ‘ignore_idx’ shadows a member of ‘Seldon::draw_unique_k_from_n(std::optional<long unsigned int>, std::size_t, std::size_t, std::vector<long unsigned int>&, std::mt19937&)::SequenceGenerator’ [-Wshadow]
   33 |         SequenceGenerator( const size_t i_, std::optional<size_t> ignore_idx ) : i( i_ ), ignore_idx( ignore_idx )
      |                                             ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../subprojects/seldon/include/util/math.hpp:41:31: note: shadowed declaration is here
   41 |         std::optional<size_t> ignore_idx;
      |                               ^~~~~~~~~~
../subprojects/seldon/include/util/math.hpp: In function ‘void Seldon::draw_unique_k_from_n(std::optional<long unsigned int>, std::size_t, std::size_t, std::vector<long unsigned int>&, std::mt19937&)’:
../subprojects/seldon/include/util/math.hpp:27:15: warning: typedef ‘using iterator_category = struct std::forward_iterator_tag’ locally defined but not used [-Wunused-local-typedefs]
   27 |         using iterator_category = std::forward_iterator_tag;
      |               ^~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/math.hpp:28:15: warning: typedef ‘using difference_type = std::ptrdiff_t’ locally defined but not used [-Wunused-local-typedefs]
   28 |         using difference_type   = std::ptrdiff_t;
      |               ^~~~~~~~~~~~~~~
../subprojects/seldon/include/util/math.hpp:29:15: warning: typedef ‘using value_type = size_t’ locally defined but not used [-Wunused-local-typedefs]
   29 |         using value_type        = size_t;
      |               ^~~~~~~~~~
../subprojects/seldon/include/util/math.hpp:30:15: warning: typedef ‘using pointer = size_t*’ locally defined but not used [-Wunused-local-typedefs]
   30 |         using pointer           = size_t *; // or also value_type*
      |               ^~~~~~~
../subprojects/seldon/include/util/math.hpp:31:15: warning: typedef ‘using reference = size_t&’ locally defined but not used [-Wunused-local-typedefs]
   31 |         using reference         = size_t &;
      |               ^~~~~~~~~
../subprojects/seldon/include/util/math.hpp: In constructor ‘Seldon::power_law_distribution<ScalarT>::power_law_distribution(ScalarT, ScalarT)’:
../subprojects/seldon/include/util/math.hpp:130:50: warning: declaration of ‘gamma’ shadows a member of ‘Seldon::power_law_distribution<ScalarT>’ [-Wshadow]
  130 |     power_law_distribution( ScalarT eps, ScalarT gamma ) : eps( eps ), gamma( gamma ) {}
      |                                          ~~~~~~~~^~~~~
../subprojects/seldon/include/util/math.hpp:125:13: note: shadowed declaration is here
  125 |     ScalarT gamma;
      |             ^~~~~
../subprojects/seldon/include/util/math.hpp:130:37: warning: declaration of ‘eps’ shadows a member of ‘Seldon::power_law_distribution<ScalarT>’ [-Wshadow]
  130 |     power_law_distribution( ScalarT eps, ScalarT gamma ) : eps( eps ), gamma( gamma ) {}
      |                             ~~~~~~~~^~~
../subprojects/seldon/include/util/math.hpp:124:13: note: shadowed declaration is here
  124 |     ScalarT eps;
      |             ^~~
../subprojects/seldon/include/util/math.hpp: In constructor ‘Seldon::truncated_normal_distribution<ScalarT>::truncated_normal_distribution(ScalarT, ScalarT, ScalarT)’:
../subprojects/seldon/include/util/math.hpp:187:73: warning: declaration of ‘eps’ shadows a member of ‘Seldon::truncated_normal_distribution<ScalarT>’ [-Wshadow]
  187 |     truncated_normal_distribution( ScalarT mean, ScalarT sigma, ScalarT eps )
      |                                                                 ~~~~~~~~^~~
../subprojects/seldon/include/util/math.hpp:168:13: note: shadowed declaration is here
  168 |     ScalarT eps{};
      |             ^~~
../subprojects/seldon/include/util/math.hpp:187:58: warning: declaration of ‘sigma’ shadows a member of ‘Seldon::truncated_normal_distribution<ScalarT>’ [-Wshadow]
  187 |     truncated_normal_distribution( ScalarT mean, ScalarT sigma, ScalarT eps )
      |                                                  ~~~~~~~~^~~~~
../subprojects/seldon/include/util/math.hpp:167:13: note: shadowed declaration is here
  167 |     ScalarT sigma{};
      |             ^~~~~
../subprojects/seldon/include/util/math.hpp:187:44: warning: declaration of ‘mean’ shadows a member of ‘Seldon::truncated_normal_distribution<ScalarT>’ [-Wshadow]
  187 |     truncated_normal_distribution( ScalarT mean, ScalarT sigma, ScalarT eps )
      |                                    ~~~~~~~~^~~~
../subprojects/seldon/include/util/math.hpp:166:13: note: shadowed declaration is here
  166 |     ScalarT mean{};
      |             ^~~~
../subprojects/seldon/include/util/math.hpp: In constructor ‘Seldon::bivariate_normal_distribution<ScalarT>::bivariate_normal_distribution(ScalarT)’:
../subprojects/seldon/include/util/math.hpp:226:44: warning: declaration of ‘covariance’ shadows a member of ‘Seldon::bivariate_normal_distribution<ScalarT>’ [-Wshadow]
  226 |     bivariate_normal_distribution( ScalarT covariance ) : covariance( covariance ) {}
      |                                    ~~~~~~~~^~~~~~~~~~
../subprojects/seldon/include/util/math.hpp:222:13: note: shadowed declaration is here
  222 |     ScalarT covariance;
      |             ^~~~~~~~~~
../subprojects/seldon/include/util/math.hpp: In constructor ‘Seldon::bivariate_gaussian_copula<ScalarT, dist1T, dist2T>::bivariate_gaussian_copula(ScalarT, dist1T, dist2T)’:
../subprojects/seldon/include/util/math.hpp:259:73: warning: declaration of ‘dist2’ shadows a member of ‘Seldon::bivariate_gaussian_copula<ScalarT, dist1T, dist2T>’ [-Wshadow]
  259 |     bivariate_gaussian_copula( ScalarT covariance, dist1T dist1, dist2T dist2 )
      |                                                                  ~~~~~~~^~~~~
../subprojects/seldon/include/util/math.hpp:256:12: note: shadowed declaration is here
  256 |     dist2T dist2;
      |            ^~~~~
../subprojects/seldon/include/util/math.hpp:259:59: warning: declaration of ‘dist1’ shadows a member of ‘Seldon::bivariate_gaussian_copula<ScalarT, dist1T, dist2T>’ [-Wshadow]
  259 |     bivariate_gaussian_copula( ScalarT covariance, dist1T dist1, dist2T dist2 )
      |                                                    ~~~~~~~^~~~~
../subprojects/seldon/include/util/math.hpp:255:12: note: shadowed declaration is here
  255 |     dist1T dist1;
      |            ^~~~~
../subprojects/seldon/include/util/math.hpp:259:40: warning: declaration of ‘covariance’ shadows a member of ‘Seldon::bivariate_gaussian_copula<ScalarT, dist1T, dist2T>’ [-Wshadow]
  259 |     bivariate_gaussian_copula( ScalarT covariance, dist1T dist1, dist2T dist2 )
      |                                ~~~~~~~~^~~~~~~~~~
../subprojects/seldon/include/util/math.hpp:245:13: note: shadowed declaration is here
  245 |     ScalarT covariance;
      |             ^~~~~~~~~~
../subprojects/seldon/include/network_generation.hpp: In function ‘Seldon::Network<AgentT> Seldon::NetworkGeneration::generate_square_lattice(size_t, typename Seldon::Network<AgentT>::WeightT)’:
../subprojects/seldon/include/network_generation.hpp:246:11: warning: typedef ‘using WeightT = typename NetworkT::WeightT’ locally defined but not used [-Wunused-local-typedefs]
  246 |     using WeightT  = typename NetworkT::WeightT;
      |           ^~~~~~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp: At global scope:
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:64:33: warning: extra ‘;’ after in-class function definition [-Wextra-semi]
   64 |     void iteration() override {};
      |                                 ^
      |                                 -
../subprojects/seldon/include/models/ActivityDrivenModel.hpp: In constructor ‘Seldon::ActivityDrivenModelAbstract<AgentT_>::ActivityDrivenModelAbstract(const Seldon::Config::ActivityDrivenSettings&, NetworkT&, std::mt19937&)’:
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:28:93: warning: declaration of ‘gen’ shadows a member of ‘Seldon::ActivityDrivenModelAbstract<AgentT_>’ [-Wshadow]
   28 |         const Config::ActivityDrivenSettings & settings, NetworkT & network, std::mt19937 & gen )
      |                                                                              ~~~~~~~~~~~~~~~^~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:72:20: note: shadowed declaration is here
   72 |     std::mt19937 & gen; // reference to simulation Mersenne-Twister engine
      |                    ^~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:28:69: warning: declaration of ‘network’ shadows a member of ‘Seldon::ActivityDrivenModelAbstract<AgentT_>’ [-Wshadow]
   28 |         const Config::ActivityDrivenSettings & settings, NetworkT & network, std::mt19937 & gen )
      |                                                          ~~~~~~~~~~~^~~~~~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:67:16: note: shadowed declaration is here
   67 |     NetworkT & network;
      |                ^~~~~~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp: In member function ‘double Seldon::ActivityDrivenModelAbstract<AgentT_>::homophily_weight(size_t, size_t)’:
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:153:16: warning: declaration of ‘homophily’ shadows a member of ‘Seldon::ActivityDrivenModelAbstract<AgentT_>’ [-Wshadow]
  153 |         double homophily = this->homophily;
      |                ^~~~~~~~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:83:12: note: shadowed declaration is here
   83 |     double homophily{}; // aka beta. if zero, agents pick their interaction partners at random
      |            ^~~~~~~~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp: In member function ‘void Seldon::ActivityDrivenModelAbstract<AgentT_>::update_network_probabilistic()’:
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:218:18: warning: declaration of ‘contacted_agents’ shadows a previous local [-Wshadow]
  218 |             auto contacted_agents = network.get_neighbours( idx_agent );
      |                  ^~~~~~~~~~~~~~~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:175:29: note: shadowed declaration is here
  175 |         std::vector<size_t> contacted_agents{};
      |                             ^~~~~~~~~~~~~~~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp: In lambda function:
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:247:60: warning: declaration of ‘m’ shadows a member of ‘Seldon::ActivityDrivenModelAbstract<AgentT_>’ [-Wshadow]
  247 |         auto probability_helper = []( double omega, size_t m )
      |                                                     ~~~~~~~^
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:79:9: note: shadowed declaration is here
   79 |     int m{};            // Number of agents contacted, when the agent is active
      |         ^
../subprojects/seldon/include/agent.hpp: In constructor ‘constexpr Seldon::Agent<T>::Agent() [with T = Seldon::SimpleAgentData]’:
../subprojects/seldon/include/agent.hpp:15:5: warning: ‘Seldon::Agent<Seldon::SimpleAgentData>::data’ should be initialized in the member initialization list [-Weffc++]
   15 |     Agent() = default;
      |     ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘class fmt::v10::detail::format_string_checker<char, int>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:47:   required from ‘consteval fmt::v10::basic_format_string<Char, Args>::basic_format_string(const S&) [with S = char [3]; typename std::enable_if<std::is_convertible<const S&, fmt::v10::basic_string_view<Char> >::value, int>::type <anonymous> = 0; Char = char; Args = {const int&}]’
../subprojects/seldon/include/agents/discrete_vector_agent.hpp:26:27:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2649:22: warning: padding struct to align ‘fmt::v10::detail::format_string_checker<char, int>::context_’ [-Wpadded]
 2649 |   parse_context_type context_;
      |                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, int>&>(const char*, const char*, format_string_checker<char, int>&)::id_adapter’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2497:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_replacement_field(const Char*, const Char*, Handler&&) [with Char = char; Handler = format_string_checker<char, int>&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   required from here
../subprojects/seldon/include/agents/discrete_vector_agent.hpp:26:27:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, const int&>("{}")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, int> >(((fmt::v10::basic_format_string<char, const int&>*)this)->fmt::v10::basic_format_string<char, const int&>::str_, fmt::v10::detail::format_string_checker<char, int>(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2488:10: warning: padding struct size to alignment boundary [-Wpadded]
 2488 |   struct id_adapter {
      |          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘constexpr decltype (ctx.begin()) fmt::v10::detail::parse_format_specs(ParseContext&) [with T = int; ParseContext = compile_parse_context<char>; decltype (ctx.begin()) = const char*]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2684:51:   required from here
../subprojects/seldon/include/agents/discrete_vector_agent.hpp:26:27:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, const int&>("{}")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, int> >(((fmt::v10::basic_format_string<char, const int&>*)this)->fmt::v10::basic_format_string<char, const int&>::str_, fmt::v10::detail::format_string_checker<char, int>(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, int>&>((p + -1), end, (* & handler))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2502:33:   in ‘constexpr’ expansion of ‘(& handler)->fmt::v10::detail::format_string_checker<char, int>::on_replacement_field((& handler)->fmt::v10::detail::format_string_checker<char, int>::on_arg_id(), begin)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2677:20:   in ‘constexpr’ expansion of ‘((fmt::v10::detail::format_string_checker<char, int>*)this)->fmt::v10::detail::format_string_checker<char, int>::on_format_specs(id, begin, begin)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2734:8: warning: ‘fmt::v10::formatter<int, char, void>::specs_’ should be initialized in the member initialization list [-Weffc++]
 2734 | struct formatter<T, Char,
      |        ^~~~~~~~~~~~~~~~~~
 2735 |                  enable_if_t<detail::type_constant<T, Char>::value !=
      |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2736 |                              detail::type::custom_type>> {
      |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2591:12: note: synthesized method ‘constexpr fmt::v10::formatter<int, char, void>::formatter()’ first required here
 2591 |     return formatter<mapped_type, char_type>().parse(ctx);
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/agent.hpp: In constructor ‘constexpr Seldon::Agent<T>::Agent() [with T = Seldon::DiscreteVectorAgentData]’:
../subprojects/seldon/include/agent.hpp:15:5: warning: ‘Seldon::Agent<Seldon::DiscreteVectorAgentData>::data’ should be initialized in the member initialization list [-Weffc++]
   15 |     Agent() = default;
      |     ^~~~~
In file included from ../subprojects/seldon/include/model_factory.hpp:6:
../subprojects/seldon/include/models/DeffuantModel.hpp: In constructor ‘Seldon::DeffuantModelAbstract<AgentT_>::DeffuantModelAbstract(const Seldon::Config::DeffuantSettings&, NetworkT&, std::mt19937&)’:
../subprojects/seldon/include/models/DeffuantModel.hpp:26:106: warning: declaration of ‘gen’ shadows a member of ‘Seldon::DeffuantModelAbstract<AgentT_>’ [-Wshadow]
   26 |     DeffuantModelAbstract( const Config::DeffuantSettings & settings, NetworkT & network, std::mt19937 & gen )
      |                                                                                           ~~~~~~~~~~~~~~~^~~
../subprojects/seldon/include/models/DeffuantModel.hpp:108:20: note: shadowed declaration is here
  108 |     std::mt19937 & gen; // reference to simulation Mersenne-Twister engine
      |                    ^~~
../subprojects/seldon/include/models/DeffuantModel.hpp:26:82: warning: declaration of ‘network’ shadows a member of ‘Seldon::DeffuantModelAbstract<AgentT_>’ [-Wshadow]
   26 |     DeffuantModelAbstract( const Config::DeffuantSettings & settings, NetworkT & network, std::mt19937 & gen )
      |                                                                       ~~~~~~~~~~~^~~~~~~
../subprojects/seldon/include/models/DeffuantModel.hpp:107:16: note: shadowed declaration is here
  107 |     NetworkT & network;
      |                ^~~~~~~
../subprojects/seldon/include/network.hpp: In instantiation of ‘class Seldon::Network<Seldon::Agent<Seldon::InertialAgentData>, double>’:
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:25:11:   required from ‘class Seldon::ActivityDrivenModelAbstract<Seldon::Agent<Seldon::InertialAgentData> >’
../subprojects/seldon/include/models/InertialModel.hpp:20:30:   required from here
../subprojects/seldon/include/network.hpp:31:7: warning: padding struct size to alignment boundary [-Wpadded]
   31 | class Network
      |       ^~~~~~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp: In instantiation of ‘class Seldon::ActivityDrivenModelAbstract<Seldon::Agent<Seldon::InertialAgentData> >’:
../subprojects/seldon/include/models/InertialModel.hpp:20:30:   required from here
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:80:12: warning: padding struct to align ‘Seldon::ActivityDrivenModelAbstract<Seldon::Agent<Seldon::InertialAgentData> >::eps’ [-Wpadded]
   80 |     double eps{};       // Minimum activity epsilon; a_i belongs to [epsilon,1]
      |            ^~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:93:12: warning: padding struct to align ‘Seldon::ActivityDrivenModelAbstract<Seldon::Agent<Seldon::InertialAgentData> >::reluctance_mean’ [-Wpadded]
   93 |     double reluctance_mean{};
      |            ^~~~~~~~~~~~~~~
../subprojects/seldon/include/network.hpp: In instantiation of ‘class Seldon::Network<Seldon::Agent<Seldon::ActivityAgentData>, double>’:
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:25:11:   required from ‘class Seldon::ActivityDrivenModelAbstract<Seldon::Agent<Seldon::ActivityAgentData> >’
../subprojects/seldon/include/model_factory.hpp:53:61:   required from here
../subprojects/seldon/include/network.hpp:31:7: warning: padding struct size to alignment boundary [-Wpadded]
   31 | class Network
      |       ^~~~~~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp: In instantiation of ‘class Seldon::ActivityDrivenModelAbstract<Seldon::Agent<Seldon::ActivityAgentData> >’:
../subprojects/seldon/include/model_factory.hpp:53:61:   required from here
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:80:12: warning: padding struct to align ‘Seldon::ActivityDrivenModelAbstract<Seldon::Agent<Seldon::ActivityAgentData> >::eps’ [-Wpadded]
   80 |     double eps{};       // Minimum activity epsilon; a_i belongs to [epsilon,1]
      |            ^~~
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:93:12: warning: padding struct to align ‘Seldon::ActivityDrivenModelAbstract<Seldon::Agent<Seldon::ActivityAgentData> >::reluctance_mean’ [-Wpadded]
   93 |     double reluctance_mean{};
      |            ^~~~~~~~~~~~~~~
../subprojects/seldon/include/models/DeffuantModel.hpp: In instantiation of ‘class Seldon::DeffuantModelAbstract<Seldon::Agent<Seldon::SimpleAgentData> >’:
../subprojects/seldon/include/model_factory.hpp:86:55:   required from here
../subprojects/seldon/include/models/DeffuantModel.hpp:107:16: warning: padding struct to align ‘Seldon::DeffuantModelAbstract<Seldon::Agent<Seldon::SimpleAgentData> >::network’ [-Wpadded]
  107 |     NetworkT & network;
      |                ^~~~~~~
../subprojects/seldon/include/models/DeffuantModel.hpp: In instantiation of ‘class Seldon::DeffuantModelAbstract<Seldon::Agent<Seldon::DiscreteVectorAgentData> >’:
../subprojects/seldon/include/model_factory.hpp:104:61:   required from here
../subprojects/seldon/include/models/DeffuantModel.hpp:107:16: warning: padding struct to align ‘Seldon::DeffuantModelAbstract<Seldon::Agent<Seldon::DiscreteVectorAgentData> >::network’ [-Wpadded]
In file included from ../subprojects/seldon/include/simulation.hpp:7,
                 from ../python_bindings/bindings.cpp:9:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h: In constructor ‘fmt::v10::localtime(time_t)::dispatcher::dispatcher(time_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:494:5: warning: ‘fmt::v10::localtime(time_t)::dispatcher::tm_’ should be initialized in the member initialization list [-Weffc++]
  494 |     dispatcher(std::time_t t) : time_(t) {}
      |     ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h: In constructor ‘fmt::v10::gmtime(time_t)::dispatcher::dispatcher(time_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:543:5: warning: ‘fmt::v10::gmtime(time_t)::dispatcher::tm_’ should be initialized in the member initialization list [-Weffc++]
  543 |     dispatcher(std::time_t t) : time_(t) {}
      |     ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:1738:7: warning: padding struct size to alignment boundary [-Wpadded]
 1738 | class get_locale {
      |       ^~~~~~~~~~
../subprojects/seldon/include/simulation.hpp:23:7: warning: ‘Seldon::SimulationInterface’ does not have the "cxx11" ABI tag that ‘const std::filesystem::__cxx11::path’ (used in the type of ‘virtual void Seldon::SimulationInterface::run(const std::filesystem::__cxx11::path&)’) has [-Wabi-tag]
   23 | class SimulationInterface
      |       ^~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/simulation.hpp:26:18: note: ‘virtual void Seldon::SimulationInterface::run(const std::filesystem::__cxx11::path&)’ declared here
   26 |     virtual void run( const fs::path & output_dir_path ) = 0;
      |                  ^~~
In file included from /usr/include/c++/12/filesystem:45,
                 from ../subprojects/seldon/include/util/misc.hpp:4,
                 from ../subprojects/seldon/include/agent_io.hpp:4:
/usr/include/c++/12/bits/fs_path.h:292:9: note: ‘const std::filesystem::__cxx11::path’ declared here
  292 |   class path
      |         ^~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:38,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:274,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:13,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:12,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:13,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:12,
                 from ../python_bindings/bindings.cpp:26:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h: In function ‘int Py_IS_TYPE(PyObject*, PyTypeObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:250:12: note: in expansion of macro ‘Py_TYPE’
  250 |     return Py_TYPE(ob) == type;
      |            ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h: In function ‘void Py_SET_REFCNT(PyObject*, Py_ssize_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:247:43: note: in expansion of macro ‘_PyObject_CAST’
  247 | #define _Py_IsImmortal(op) _Py_IsImmortal(_PyObject_CAST(op))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:262:9: note: in expansion of macro ‘_Py_IsImmortal’
  262 |     if (_Py_IsImmortal(ob)) {
      |         ^~~~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:44:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:344:11: warning: padding struct to align ‘<unnamed struct>::pfunc’ [-Wpadded]
  344 |     void *pfunc; /* function pointer */
      |           ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:352:18: warning: padding struct to align ‘<unnamed struct>::slots’ [-Wpadded]
  352 |     PyType_Slot *slots; /* terminated by slot==0. */
      |                  ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h: In function ‘int PyObject_TypeCheck(PyObject*, PyTypeObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:381:12: note: in expansion of macro ‘Py_IS_TYPE’
  381 |     return Py_IS_TYPE(ob, type) || PyType_IsSubtype(Py_TYPE(ob), type);
      |            ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:381:53: note: in expansion of macro ‘Py_TYPE’
  381 |     return Py_IS_TYPE(ob, type) || PyType_IsSubtype(Py_TYPE(ob), type);
      |                                                     ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h: In function ‘void Py_DECREF(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:247:43: note: in expansion of macro ‘_PyObject_CAST’
  247 | #define _Py_IsImmortal(op) _Py_IsImmortal(_PyObject_CAST(op))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:700:9: note: in expansion of macro ‘_Py_IsImmortal’
  700 |     if (_Py_IsImmortal(op)) {
      |         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h: In function ‘void Py_XINCREF(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:661:35: note: in expansion of macro ‘_PyObject_CAST’
  661 | #  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:788:9: note: in expansion of macro ‘Py_INCREF’
  788 |         Py_INCREF(op);
      |         ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h: In function ‘void Py_XDECREF(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:798:9: note: in expansion of macro ‘Py_DECREF’
  798 |         Py_DECREF(op);
      |         ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h: In function ‘PyObject* _Py_NewRef(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:661:35: note: in expansion of macro ‘_PyObject_CAST’
  661 | #  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:814:5: note: in expansion of macro ‘Py_INCREF’
  814 |     Py_INCREF(obj);
      |     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h: In function ‘PyObject* _Py_XNewRef(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:792:37: note: in expansion of macro ‘_PyObject_CAST’
  792 | #  define Py_XINCREF(op) Py_XINCREF(_PyObject_CAST(op))
      |                                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:820:5: note: in expansion of macro ‘Py_XINCREF’
  820 |     Py_XINCREF(obj);
      |     ^~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:953:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/object.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/object.h:226:16: warning: padding struct to align ‘_typeobject::tp_finalize’ [-Wpadded]
  226 |     destructor tp_finalize;
      |                ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/object.h:146:8: warning: padding struct size to alignment boundary [-Wpadded]
  146 | struct _typeobject {
      |        ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/object.h:236:8: warning: padding struct size to alignment boundary [-Wpadded]
  236 | struct _specialization_cache {
      |        ^~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h: In function ‘int PyType_Check(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:974:32: note: in expansion of macro ‘Py_TYPE’
  974 |     return PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS);
      |                                ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h: In function ‘int PyType_CheckExact(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:984:12: note: in expansion of macro ‘Py_IS_TYPE’
  984 |     return Py_IS_TYPE(op, &PyType_Type);
      |            ^~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:39:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/objimpl.h: In function ‘size_t _PyObject_VAR_SIZE(PyTypeObject*, Py_ssize_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pymacro.h:104:35: warning: useless cast to type ‘size_t’ {aka ‘long unsigned int’} [-Wuseless-cast]
  104 | #define _Py_SIZE_ROUND_UP(n, a) (((size_t)(n) + \
      |                                   ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/objimpl.h:26:12: note: in expansion of macro ‘_Py_SIZE_ROUND_UP’
   26 |     return _Py_SIZE_ROUND_UP(size, SIZEOF_VOID_P);
      |            ^~~~~~~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:35:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytearrayobject.h: In function ‘char* PyByteArray_AS_STRING(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytearrayobject.h:24:33: note: in expansion of macro ‘PyObject_TypeCheck’
   24 | #define PyByteArray_Check(self) PyObject_TypeCheck((self), &PyByteArray_Type)
      |                                 ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytearrayobject.h:18:13: note: in expansion of macro ‘PyByteArray_Check’
   18 |     (assert(PyByteArray_Check(op)), _Py_CAST(PyByteArrayObject*, op))
      |             ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytearrayobject.h:22:31: note: in expansion of macro ‘_PyByteArray_CAST’
   22 |     PyByteArrayObject *self = _PyByteArray_CAST(op);
      |                               ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytearrayobject.h: In function ‘Py_ssize_t PyByteArray_GET_SIZE(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytearrayobject.h:24:33: note: in expansion of macro ‘PyObject_TypeCheck’
   24 | #define PyByteArray_Check(self) PyObject_TypeCheck((self), &PyByteArray_Type)
      |                                 ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytearrayobject.h:18:13: note: in expansion of macro ‘PyByteArray_Check’
   18 |     (assert(PyByteArray_Check(op)), _Py_CAST(PyByteArrayObject*, op))
      |             ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytearrayobject.h:31:31: note: in expansion of macro ‘_PyByteArray_CAST’
   31 |     PyByteArrayObject *self = _PyByteArray_CAST(op);
      |                               ^~~~~~~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytesobject.h:62,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:50:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytesobject.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytesobject.h:5:16: warning: padding struct size to alignment boundary [-Wpadded]
    5 | typedef struct {
      |                ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytesobject.h: In function ‘char* PyBytes_AS_STRING(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytesobject.h:31:18: note: in expansion of macro ‘PyType_FastSubclass’
   31 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_BYTES_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytesobject.h:31:38: note: in expansion of macro ‘Py_TYPE’
   31 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_BYTES_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytesobject.h:33:13: note: in expansion of macro ‘PyBytes_Check’
   33 |     (assert(PyBytes_Check(op)), _Py_CAST(PyBytesObject*, op))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytesobject.h:37:12: note: in expansion of macro ‘_PyBytes_CAST’
   37 |     return _PyBytes_CAST(op)->ob_sval;
      |            ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytesobject.h: In function ‘Py_ssize_t PyBytes_GET_SIZE(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytesobject.h:31:18: note: in expansion of macro ‘PyType_FastSubclass’
   31 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_BYTES_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytesobject.h:31:38: note: in expansion of macro ‘Py_TYPE’
   31 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_BYTES_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytesobject.h:33:13: note: in expansion of macro ‘PyBytes_Check’
   33 |     (assert(PyBytes_Check(op)), _Py_CAST(PyBytesObject*, op))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytesobject.h:42:27: note: in expansion of macro ‘_PyBytes_CAST’
   42 |     PyBytesObject *self = _PyBytes_CAST(op);
      |                           ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytesobject.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytesobject.h:55:16: warning: padding struct size to alignment boundary [-Wpadded]
   55 | typedef struct {
      |                ^
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:1013,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:51:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:52:16: warning: padding struct size to alignment boundary [-Wpadded]
   52 | typedef struct {
      |                ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h: In function ‘unsigned int PyUnicode_CHECK_INTERNED(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:5: note: in expansion of macro ‘PyType_FastSubclass’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:178:13: note: in expansion of macro ‘PyUnicode_Check’
  178 |     (assert(PyUnicode_Check(op)), \
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:200:12: note: in expansion of macro ‘_PyASCIIObject_CAST’
  200 |     return _PyASCIIObject_CAST(op)->state.interned;
      |            ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h: In function ‘unsigned int PyUnicode_IS_ASCII(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:5: note: in expansion of macro ‘PyType_FastSubclass’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:178:13: note: in expansion of macro ‘PyUnicode_Check’
  178 |     (assert(PyUnicode_Check(op)), \
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:214:12: note: in expansion of macro ‘_PyASCIIObject_CAST’
  214 |     return _PyASCIIObject_CAST(op)->state.ascii;
      |            ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h: In function ‘unsigned int PyUnicode_IS_COMPACT(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:5: note: in expansion of macro ‘PyType_FastSubclass’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:178:13: note: in expansion of macro ‘PyUnicode_Check’
  178 |     (assert(PyUnicode_Check(op)), \
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:221:12: note: in expansion of macro ‘_PyASCIIObject_CAST’
  221 |     return _PyASCIIObject_CAST(op)->state.compact;
      |            ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h: In function ‘int PyUnicode_IS_COMPACT_ASCII(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:5: note: in expansion of macro ‘PyType_FastSubclass’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:178:13: note: in expansion of macro ‘PyUnicode_Check’
  178 |     (assert(PyUnicode_Check(op)), \
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:228:13: note: in expansion of macro ‘_PyASCIIObject_CAST’
  228 |     return (_PyASCIIObject_CAST(op)->state.ascii && PyUnicode_IS_COMPACT(op));
      |             ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:223:55: note: in expansion of macro ‘_PyObject_CAST’
  223 | #define PyUnicode_IS_COMPACT(op) PyUnicode_IS_COMPACT(_PyObject_CAST(op))
      |                                                       ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:228:53: note: in expansion of macro ‘PyUnicode_IS_COMPACT’
  228 |     return (_PyASCIIObject_CAST(op)->state.ascii && PyUnicode_IS_COMPACT(op));
      |                                                     ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h: In function ‘void* _PyUnicode_COMPACT_DATA(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:216:51: note: in expansion of macro ‘_PyObject_CAST’
  216 | #define PyUnicode_IS_ASCII(op) PyUnicode_IS_ASCII(_PyObject_CAST(op))
      |                                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:249:9: note: in expansion of macro ‘PyUnicode_IS_ASCII’
  249 |     if (PyUnicode_IS_ASCII(op)) {
      |         ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:19:57: note: in definition of macro ‘_Py_STATIC_CAST’
   19 | #  define _Py_STATIC_CAST(type, expr) static_cast<type>(expr)
      |                                                         ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:5: note: in expansion of macro ‘PyType_FastSubclass’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:178:13: note: in expansion of macro ‘PyUnicode_Check’
  178 |     (assert(PyUnicode_Check(op)), \
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:250:40: note: in expansion of macro ‘_PyASCIIObject_CAST’
  250 |         return _Py_STATIC_CAST(void*, (_PyASCIIObject_CAST(op) + 1));
      |                                        ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:19:57: note: in definition of macro ‘_Py_STATIC_CAST’
   19 | #  define _Py_STATIC_CAST(type, expr) static_cast<type>(expr)
      |                                                         ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:5: note: in expansion of macro ‘PyType_FastSubclass’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:181:13: note: in expansion of macro ‘PyUnicode_Check’
  181 |     (assert(PyUnicode_Check(op)), \
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:252:36: note: in expansion of macro ‘_PyCompactUnicodeObject_CAST’
  252 |     return _Py_STATIC_CAST(void*, (_PyCompactUnicodeObject_CAST(op) + 1));
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h: In function ‘void* _PyUnicode_NONCOMPACT_DATA(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:223:55: note: in expansion of macro ‘_PyObject_CAST’
  223 | #define PyUnicode_IS_COMPACT(op) PyUnicode_IS_COMPACT(_PyObject_CAST(op))
      |                                                       ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:257:13: note: in expansion of macro ‘PyUnicode_IS_COMPACT’
  257 |     assert(!PyUnicode_IS_COMPACT(op));
      |             ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:5: note: in expansion of macro ‘PyType_FastSubclass’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:184:13: note: in expansion of macro ‘PyUnicode_Check’
  184 |     (assert(PyUnicode_Check(op)), \
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:258:12: note: in expansion of macro ‘_PyUnicodeObject_CAST’
  258 |     data = _PyUnicodeObject_CAST(op)->data.any;
      |            ^~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h: In function ‘void* PyUnicode_DATA(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:223:55: note: in expansion of macro ‘_PyObject_CAST’
  223 | #define PyUnicode_IS_COMPACT(op) PyUnicode_IS_COMPACT(_PyObject_CAST(op))
      |                                                       ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:264:9: note: in expansion of macro ‘PyUnicode_IS_COMPACT’
  264 |     if (PyUnicode_IS_COMPACT(op)) {
      |         ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h: In function ‘Py_ssize_t PyUnicode_GET_LENGTH(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:5: note: in expansion of macro ‘PyType_FastSubclass’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:178:13: note: in expansion of macro ‘PyUnicode_Check’
  178 |     (assert(PyUnicode_Check(op)), \
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:282:12: note: in expansion of macro ‘_PyASCIIObject_CAST’
  282 |     return _PyASCIIObject_CAST(op)->length;
      |            ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h: In function ‘Py_UCS4 PyUnicode_READ_CHAR(PyObject*, Py_ssize_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:284:55: note: in expansion of macro ‘_PyObject_CAST’
  284 | #define PyUnicode_GET_LENGTH(op) PyUnicode_GET_LENGTH(_PyObject_CAST(op))
      |                                                       ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:343:21: note: in expansion of macro ‘PyUnicode_GET_LENGTH’
  343 |     assert(index <= PyUnicode_GET_LENGTH(unicode));
      |                     ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pymacro.h:156:37: note: in definition of macro ‘_Py_RVALUE’
  156 | #define _Py_RVALUE(EXPR) ((void)0, (EXPR))
      |                                     ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:5: note: in expansion of macro ‘PyType_FastSubclass’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:178:13: note: in expansion of macro ‘PyUnicode_Check’
  178 |     (assert(PyUnicode_Check(op)), \
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:245:39: note: in expansion of macro ‘_PyASCIIObject_CAST’
  245 | #define PyUnicode_KIND(op) _Py_RVALUE(_PyASCIIObject_CAST(op)->state.kind)
      |                                       ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:345:12: note: in expansion of macro ‘PyUnicode_KIND’
  345 |     kind = PyUnicode_KIND(unicode);
      |            ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:19:57: note: in definition of macro ‘_Py_STATIC_CAST’
   19 | #  define _Py_STATIC_CAST(type, expr) static_cast<type>(expr)
      |                                                         ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:269:43: note: in expansion of macro ‘_PyObject_CAST’
  269 | #define PyUnicode_DATA(op) PyUnicode_DATA(_PyObject_CAST(op))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:276:60: note: in expansion of macro ‘PyUnicode_DATA’
  276 | #define PyUnicode_1BYTE_DATA(op) _Py_STATIC_CAST(Py_UCS1*, PyUnicode_DATA(op))
      |                                                            ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:347:16: note: in expansion of macro ‘PyUnicode_1BYTE_DATA’
  347 |         return PyUnicode_1BYTE_DATA(unicode)[index];
      |                ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:19:57: note: in definition of macro ‘_Py_STATIC_CAST’
   19 | #  define _Py_STATIC_CAST(type, expr) static_cast<type>(expr)
      |                                                         ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:269:43: note: in expansion of macro ‘_PyObject_CAST’
  269 | #define PyUnicode_DATA(op) PyUnicode_DATA(_PyObject_CAST(op))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:277:60: note: in expansion of macro ‘PyUnicode_DATA’
  277 | #define PyUnicode_2BYTE_DATA(op) _Py_STATIC_CAST(Py_UCS2*, PyUnicode_DATA(op))
      |                                                            ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:350:16: note: in expansion of macro ‘PyUnicode_2BYTE_DATA’
  350 |         return PyUnicode_2BYTE_DATA(unicode)[index];
      |                ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:19:57: note: in definition of macro ‘_Py_STATIC_CAST’
   19 | #  define _Py_STATIC_CAST(type, expr) static_cast<type>(expr)
      |                                                         ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:269:43: note: in expansion of macro ‘_PyObject_CAST’
  269 | #define PyUnicode_DATA(op) PyUnicode_DATA(_PyObject_CAST(op))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:278:60: note: in expansion of macro ‘PyUnicode_DATA’
  278 | #define PyUnicode_4BYTE_DATA(op) _Py_STATIC_CAST(Py_UCS4*, PyUnicode_DATA(op))
      |                                                            ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:353:12: note: in expansion of macro ‘PyUnicode_4BYTE_DATA’
  353 |     return PyUnicode_4BYTE_DATA(unicode)[index];
      |            ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h: In function ‘Py_UCS4 PyUnicode_MAX_CHAR_VALUE(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:216:51: note: in expansion of macro ‘_PyObject_CAST’
  216 | #define PyUnicode_IS_ASCII(op) PyUnicode_IS_ASCII(_PyObject_CAST(op))
      |                                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:365:9: note: in expansion of macro ‘PyUnicode_IS_ASCII’
  365 |     if (PyUnicode_IS_ASCII(op)) {
      |         ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pymacro.h:156:37: note: in definition of macro ‘_Py_RVALUE’
  156 | #define _Py_RVALUE(EXPR) ((void)0, (EXPR))
      |                                     ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:5: note: in expansion of macro ‘PyType_FastSubclass’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:178:13: note: in expansion of macro ‘PyUnicode_Check’
  178 |     (assert(PyUnicode_Check(op)), \
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:245:39: note: in expansion of macro ‘_PyASCIIObject_CAST’
  245 | #define PyUnicode_KIND(op) _Py_RVALUE(_PyASCIIObject_CAST(op)->state.kind)
      |                                       ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:369:12: note: in expansion of macro ‘PyUnicode_KIND’
  369 |     kind = PyUnicode_KIND(op);
      |            ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/unicodeobject.h:489:16: warning: padding struct size to alignment boundary [-Wpadded]
  489 | typedef struct {
      |                ^
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:52:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/initconfig.h:16:17: warning: padding struct to align ‘<unnamed struct>::func’ [-Wpadded]
   16 |     const char *func;
      |                 ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/initconfig.h:10:16: warning: padding struct size to alignment boundary [-Wpadded]
   10 | typedef struct {
      |                ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/initconfig.h:151:14: warning: padding struct to align ‘PyConfig::dump_refs_file’ [-Wpadded]
  151 |     wchar_t *dump_refs_file;
      |              ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/initconfig.h:153:14: warning: padding struct to align ‘PyConfig::filesystem_encoding’ [-Wpadded]
  153 |     wchar_t *filesystem_encoding;
      |              ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/initconfig.h:157:22: warning: padding struct to align ‘PyConfig::orig_argv’ [-Wpadded]
  157 |     PyWideStringList orig_argv;
      |                      ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/initconfig.h:174:14: warning: padding struct to align ‘PyConfig::stdio_encoding’ [-Wpadded]
  174 |     wchar_t *stdio_encoding;
      |              ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/initconfig.h:193:22: warning: padding struct to align ‘PyConfig::module_search_paths’ [-Wpadded]
  193 |     PyWideStringList module_search_paths;
      |                      ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/initconfig.h:204:14: warning: padding struct to align ‘PyConfig::run_command’ [-Wpadded]
  204 |     wchar_t *run_command;
      |              ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/initconfig.h:135:16: warning: padding struct size to alignment boundary [-Wpadded]
  135 | typedef struct PyConfig {
      |                ^~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pystate.h:125,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:53:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pystate.h:112:15: warning: padding struct to align ‘_py_trashcan::delete_later’ [-Wpadded]
  112 |     PyObject *delete_later;
      |               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pystate.h:161:16: warning: padding struct to align ‘_ts::cframe’ [-Wpadded]
  161 |     _PyCFrame *cframe;
      |                ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pystate.h:180:15: warning: padding struct to align ‘_ts::async_exc’ [-Wpadded]
  180 |     PyObject *async_exc; /* Asynchronous exception to raise */
      |               ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pystate.h:219:15: warning: padding struct to align ‘_ts::async_gen_firstiter’ [-Wpadded]
  219 |     PyObject *async_gen_firstiter;
      |               ^~~~~~~~~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyerrors.h:330,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:54:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pyerrors.h:13:16: warning: padding struct size to alignment boundary [-Wpadded]
   13 | typedef struct {
      |                ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pyerrors.h:19:15: warning: padding struct to align ‘<unnamed struct>::msg’ [-Wpadded]
   19 |     PyObject *msg;
      |               ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pyerrors.h:25:15: warning: padding struct to align ‘<unnamed struct>::msg’ [-Wpadded]
   25 |     PyObject *msg;
      |               ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pyerrors.h:37:15: warning: padding struct to align ‘<unnamed struct>::msg’ [-Wpadded]
   37 |     PyObject *msg;
      |               ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pyerrors.h:45:15: warning: padding struct to align ‘<unnamed struct>::encoding’ [-Wpadded]
   45 |     PyObject *encoding;
      |               ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pyerrors.h:54:15: warning: padding struct to align ‘<unnamed struct>::code’ [-Wpadded]
   54 |     PyObject *code;
      |               ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pyerrors.h:59:15: warning: padding struct to align ‘<unnamed struct>::myerrno’ [-Wpadded]
   59 |     PyObject *myerrno;
      |               ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pyerrors.h:71:15: warning: padding struct to align ‘<unnamed struct>::value’ [-Wpadded]
   71 |     PyObject *value;
      |               ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pyerrors.h:76:15: warning: padding struct to align ‘<unnamed struct>::name’ [-Wpadded]
   76 |     PyObject *name;
      |               ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/pyerrors.h:81:15: warning: padding struct to align ‘<unnamed struct>::obj’ [-Wpadded]
   81 |     PyObject *obj;
      |               ^~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:56:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/longintrepr.h:82:16: warning: padding struct size to alignment boundary [-Wpadded]
   82 | typedef struct _PyLongValue {
      |                ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/floatobject.h: In function ‘double PyFloat_AS_DOUBLE(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/floatobject.h:16:27: note: in expansion of macro ‘PyObject_TypeCheck’
   16 | #define PyFloat_Check(op) PyObject_TypeCheck(op, &PyFloat_Type)
      |                           ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/floatobject.h:11:13: note: in expansion of macro ‘PyFloat_Check’
   11 |     (assert(PyFloat_Check(op)), _Py_CAST(PyFloatObject*, op))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/floatobject.h:16:12: note: in expansion of macro ‘_PyFloat_CAST’
   16 |     return _PyFloat_CAST(op)->ob_fval;
      |            ^~~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/memoryobject.h:27,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:61:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/memoryobject.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/memoryobject.h:16:16: warning: padding struct to align ‘<unnamed struct>::exports’ [-Wpadded]
   16 |     Py_ssize_t exports; /* number of direct memoryview exports */
      |                ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/memoryobject.h:34:16: warning: padding struct to align ‘<unnamed struct>::exports’ [-Wpadded]
   34 |     Py_ssize_t exports;           /* number of buffer re-exports */
      |                ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h: In function ‘Py_ssize_t PyTuple_GET_SIZE(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:18: note: in expansion of macro ‘PyType_FastSubclass’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:13: note: in expansion of macro ‘PyTuple_Check’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:23:28: note: in expansion of macro ‘_PyTuple_CAST’
   23 |     PyTupleObject *tuple = _PyTuple_CAST(op);
      |                            ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h: In function ‘void PyTuple_SET_ITEM(PyObject*, Py_ssize_t, PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:18: note: in expansion of macro ‘PyType_FastSubclass’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:13: note: in expansion of macro ‘PyTuple_Check’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:33:28: note: in expansion of macro ‘_PyTuple_CAST’
   33 |     PyTupleObject *tuple = _PyTuple_CAST(op);
      |                            ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h: In function ‘Py_ssize_t PyList_GET_SIZE(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:5: note: in expansion of macro ‘PyType_FastSubclass’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:25: note: in expansion of macro ‘Py_TYPE’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:29:13: note: in expansion of macro ‘PyList_Check’
   29 |     (assert(PyList_Check(op)), _Py_CAST(PyListObject*, (op)))
      |             ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:34:26: note: in expansion of macro ‘_PyList_CAST’
   34 |     PyListObject *list = _PyList_CAST(op);
      |                          ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h: In function ‘void PyList_SET_ITEM(PyObject*, Py_ssize_t, PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:5: note: in expansion of macro ‘PyType_FastSubclass’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:25: note: in expansion of macro ‘Py_TYPE’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:29:13: note: in expansion of macro ‘PyList_Check’
   29 |     (assert(PyList_Check(op)), _Py_CAST(PyListObject*, (op)))
      |             ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:43:26: note: in expansion of macro ‘_PyList_CAST’
   43 |     PyListObject *list = _PyList_CAST(op);
      |                          ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/dictobject.h: In function ‘Py_ssize_t PyDict_GET_SIZE(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/dictobject.h:18:18: note: in expansion of macro ‘PyType_FastSubclass’
   18 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/dictobject.h:18:38: note: in expansion of macro ‘Py_TYPE’
   18 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/dictobject.h:55:12: note: in expansion of macro ‘PyDict_Check’
   55 |     assert(PyDict_Check(op));
      |            ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/setobject.h: In function ‘Py_ssize_t PySet_GET_SIZE(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:31:6: note: in expansion of macro ‘Py_IS_TYPE’
   31 |     (Py_IS_TYPE((ob), &PySet_Type) || Py_IS_TYPE((ob), &PyFrozenSet_Type) || \
      |      ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/setobject.h:62:13: note: in expansion of macro ‘PyAnySet_Check’
   62 |     (assert(PyAnySet_Check(so)), _Py_CAST(PySetObject*, so))
      |             ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/setobject.h:65:12: note: in expansion of macro ‘_PySet_CAST’
   65 |     return _PySet_CAST(so)->used;
      |            ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:31:39: note: in expansion of macro ‘Py_IS_TYPE’
   31 |     (Py_IS_TYPE((ob), &PySet_Type) || Py_IS_TYPE((ob), &PyFrozenSet_Type) || \
      |                                       ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/setobject.h:62:13: note: in expansion of macro ‘PyAnySet_Check’
   62 |     (assert(PyAnySet_Check(so)), _Py_CAST(PySetObject*, so))
      |             ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/setobject.h:65:12: note: in expansion of macro ‘_PySet_CAST’
   65 |     return _PySet_CAST(so)->used;
      |            ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:32:24: note: in expansion of macro ‘Py_TYPE’
   32 |       PyType_IsSubtype(Py_TYPE(ob), &PySet_Type) || \
      |                        ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/setobject.h:62:13: note: in expansion of macro ‘PyAnySet_Check’
   62 |     (assert(PyAnySet_Check(so)), _Py_CAST(PySetObject*, so))
      |             ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/setobject.h:65:12: note: in expansion of macro ‘_PySet_CAST’
   65 |     return _PySet_CAST(so)->used;
      |            ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:33:24: note: in expansion of macro ‘Py_TYPE’
   33 |       PyType_IsSubtype(Py_TYPE(ob), &PyFrozenSet_Type))
      |                        ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/setobject.h:62:13: note: in expansion of macro ‘PyAnySet_Check’
   62 |     (assert(PyAnySet_Check(so)), _Py_CAST(PySetObject*, so))
      |             ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/setobject.h:65:12: note: in expansion of macro ‘_PySet_CAST’
   65 |     return _PySet_CAST(so)->used;
      |            ^~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:68:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/methodobject.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/methodobject.h:59:18: warning: padding struct to align ‘PyMethodDef::ml_doc’ [-Wpadded]
   59 |     const char  *ml_doc;    /* The __doc__ attribute, or NULL */
      |                  ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h: In function ‘PyObject* (* PyCFunction_GET_FUNCTION(PyObject*))(PyObject*, PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/methodobject.h:17:31: note: in expansion of macro ‘PyObject_TypeCheck’
   17 | #define PyCFunction_Check(op) PyObject_TypeCheck((op), &PyCFunction_Type)
      |                               ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h:17:13: note: in expansion of macro ‘PyCFunction_Check’
   17 |     (assert(PyCFunction_Check(func)), \
      |             ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h:41:12: note: in expansion of macro ‘_PyCFunctionObject_CAST’
   41 |     return _PyCFunctionObject_CAST(func)->m_ml->ml_meth;
      |            ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h: In function ‘PyObject* PyCFunction_GET_SELF(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/methodobject.h:17:31: note: in expansion of macro ‘PyObject_TypeCheck’
   17 | #define PyCFunction_Check(op) PyObject_TypeCheck((op), &PyCFunction_Type)
      |                               ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h:17:13: note: in expansion of macro ‘PyCFunction_Check’
   17 |     (assert(PyCFunction_Check(func)), \
      |             ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h:46:31: note: in expansion of macro ‘_PyCFunctionObject_CAST’
   46 |     PyCFunctionObject *func = _PyCFunctionObject_CAST(func_obj);
      |                               ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h: In function ‘int PyCFunction_GET_FLAGS(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/methodobject.h:17:31: note: in expansion of macro ‘PyObject_TypeCheck’
   17 | #define PyCFunction_Check(op) PyObject_TypeCheck((op), &PyCFunction_Type)
      |                               ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h:17:13: note: in expansion of macro ‘PyCFunction_Check’
   17 |     (assert(PyCFunction_Check(func)), \
      |             ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h:55:12: note: in expansion of macro ‘_PyCFunctionObject_CAST’
   55 |     return _PyCFunctionObject_CAST(func)->m_ml->ml_flags;
      |            ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h: In function ‘PyTypeObject* PyCFunction_GET_CLASS(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/methodobject.h:17:31: note: in expansion of macro ‘PyObject_TypeCheck’
   17 | #define PyCFunction_Check(op) PyObject_TypeCheck((op), &PyCFunction_Type)
      |                               ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h:17:13: note: in expansion of macro ‘PyCFunction_Check’
   17 |     (assert(PyCFunction_Check(func)), \
      |             ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h:60:31: note: in expansion of macro ‘_PyCFunctionObject_CAST’
   60 |     PyCFunctionObject *func = _PyCFunctionObject_CAST(func_obj);
      |                               ^~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:69:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/moduleobject.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/moduleobject.h:76:11: warning: padding struct to align ‘PyModuleDef_Slot::value’ [-Wpadded]
   76 |     void *value;
      |           ^~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:70:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:36:16: warning: padding struct size to alignment boundary [-Wpadded]
   36 | typedef struct {
      |                ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h: In function ‘PyObject* PyFunction_GET_CODE(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:67:30: note: in expansion of macro ‘Py_IS_TYPE’
   67 | #define PyFunction_Check(op) Py_IS_TYPE((op), &PyFunction_Type)
      |                              ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:91:13: note: in expansion of macro ‘PyFunction_Check’
   91 |     (assert(PyFunction_Check(func)), _Py_CAST(PyFunctionObject*, func))
      |             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:96:12: note: in expansion of macro ‘_PyFunction_CAST’
   96 |     return _PyFunction_CAST(func)->func_code;
      |            ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h: In function ‘PyObject* PyFunction_GET_GLOBALS(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:67:30: note: in expansion of macro ‘Py_IS_TYPE’
   67 | #define PyFunction_Check(op) Py_IS_TYPE((op), &PyFunction_Type)
      |                              ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:91:13: note: in expansion of macro ‘PyFunction_Check’
   91 |     (assert(PyFunction_Check(func)), _Py_CAST(PyFunctionObject*, func))
      |             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:101:12: note: in expansion of macro ‘_PyFunction_CAST’
  101 |     return _PyFunction_CAST(func)->func_globals;
      |            ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h: In function ‘PyObject* PyFunction_GET_MODULE(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:67:30: note: in expansion of macro ‘Py_IS_TYPE’
   67 | #define PyFunction_Check(op) Py_IS_TYPE((op), &PyFunction_Type)
      |                              ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:91:13: note: in expansion of macro ‘PyFunction_Check’
   91 |     (assert(PyFunction_Check(func)), _Py_CAST(PyFunctionObject*, func))
      |             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:106:12: note: in expansion of macro ‘_PyFunction_CAST’
  106 |     return _PyFunction_CAST(func)->func_module;
      |            ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h: In function ‘PyObject* PyFunction_GET_DEFAULTS(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:67:30: note: in expansion of macro ‘Py_IS_TYPE’
   67 | #define PyFunction_Check(op) Py_IS_TYPE((op), &PyFunction_Type)
      |                              ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:91:13: note: in expansion of macro ‘PyFunction_Check’
   91 |     (assert(PyFunction_Check(func)), _Py_CAST(PyFunctionObject*, func))
      |             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:111:12: note: in expansion of macro ‘_PyFunction_CAST’
  111 |     return _PyFunction_CAST(func)->func_defaults;
      |            ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h: In function ‘PyObject* PyFunction_GET_KW_DEFAULTS(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:67:30: note: in expansion of macro ‘Py_IS_TYPE’
   67 | #define PyFunction_Check(op) Py_IS_TYPE((op), &PyFunction_Type)
      |                              ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:91:13: note: in expansion of macro ‘PyFunction_Check’
   91 |     (assert(PyFunction_Check(func)), _Py_CAST(PyFunctionObject*, func))
      |             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:116:12: note: in expansion of macro ‘_PyFunction_CAST’
  116 |     return _PyFunction_CAST(func)->func_kwdefaults;
      |            ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h: In function ‘PyObject* PyFunction_GET_CLOSURE(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:67:30: note: in expansion of macro ‘Py_IS_TYPE’
   67 | #define PyFunction_Check(op) Py_IS_TYPE((op), &PyFunction_Type)
      |                              ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:91:13: note: in expansion of macro ‘PyFunction_Check’
   91 |     (assert(PyFunction_Check(func)), _Py_CAST(PyFunctionObject*, func))
      |             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:121:12: note: in expansion of macro ‘_PyFunction_CAST’
  121 |     return _PyFunction_CAST(func)->func_closure;
      |            ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h: In function ‘PyObject* PyFunction_GET_ANNOTATIONS(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:67:30: note: in expansion of macro ‘Py_IS_TYPE’
   67 | #define PyFunction_Check(op) Py_IS_TYPE((op), &PyFunction_Type)
      |                              ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:91:13: note: in expansion of macro ‘PyFunction_Check’
   91 |     (assert(PyFunction_Check(func)), _Py_CAST(PyFunctionObject*, func))
      |             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/funcobject.h:126:12: note: in expansion of macro ‘_PyFunction_CAST’
  126 |     return _PyFunction_CAST(func)->func_annotations;
      |            ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h: In function ‘PyObject* PyMethod_GET_FUNCTION(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:22:28: note: in expansion of macro ‘Py_IS_TYPE’
   22 | #define PyMethod_Check(op) Py_IS_TYPE((op), &PyMethod_Type)
      |                            ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:30:13: note: in expansion of macro ‘PyMethod_Check’
   30 |     (assert(PyMethod_Check(meth)), _Py_CAST(PyMethodObject*, meth))
      |             ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:35:12: note: in expansion of macro ‘_PyMethod_CAST’
   35 |     return _PyMethod_CAST(meth)->im_func;
      |            ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h: In function ‘PyObject* PyMethod_GET_SELF(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:22:28: note: in expansion of macro ‘Py_IS_TYPE’
   22 | #define PyMethod_Check(op) Py_IS_TYPE((op), &PyMethod_Type)
      |                            ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:30:13: note: in expansion of macro ‘PyMethod_Check’
   30 |     (assert(PyMethod_Check(meth)), _Py_CAST(PyMethodObject*, meth))
      |             ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:40:12: note: in expansion of macro ‘_PyMethod_CAST’
   40 |     return _PyMethod_CAST(meth)->im_self;
      |            ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h: In function ‘PyObject* PyInstanceMethod_GET_FUNCTION(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:51:36: note: in expansion of macro ‘Py_IS_TYPE’
   51 | #define PyInstanceMethod_Check(op) Py_IS_TYPE((op), &PyInstanceMethod_Type)
      |                                    ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:57:13: note: in expansion of macro ‘PyInstanceMethod_Check’
   57 |     (assert(PyInstanceMethod_Check(meth)), \
      |             ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:63:12: note: in expansion of macro ‘_PyInstanceMethod_CAST’
   63 |     return _PyInstanceMethod_CAST(meth)->func;
      |            ^~~~~~~~~~~~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:74:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/code.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/code.h:95:14: warning: padding struct to align ‘<unnamed struct>::tools’ [-Wpadded]
   95 |     uint8_t *tools;
      |              ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/code.h:170:11: warning: padding struct to align ‘PyCodeObject::co_extra’ [-Wpadded]
  170 |     void *co_extra;                                                            \
      |           ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/code.h:175:21: note: in expansion of macro ‘_PyCode_DEF’
  175 | struct PyCodeObject _PyCode_DEF(1);
      |                     ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/code.h:175:8: warning: padding struct size to alignment boundary [-Wpadded]
  175 | struct PyCodeObject _PyCode_DEF(1);
      |        ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/code.h:318:20: warning: padding struct to align ‘_opaque::lo_next’ [-Wpadded]
  318 |     const uint8_t *lo_next;
      |                    ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/code.h:326:20: warning: padding struct to align ‘_line_offsets::opaque’ [-Wpadded]
  326 |     struct _opaque opaque;
      |                    ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/cellobject.h: In function ‘PyObject* PyCell_GET(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/cellobject.h:18:26: note: in expansion of macro ‘Py_IS_TYPE’
   18 | #define PyCell_Check(op) Py_IS_TYPE((op), &PyCell_Type)
      |                          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/cellobject.h:26:12: note: in expansion of macro ‘PyCell_Check’
   26 |     assert(PyCell_Check(op));
      |            ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/cellobject.h: In function ‘void PyCell_SET(PyObject*, PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/cellobject.h:18:26: note: in expansion of macro ‘Py_IS_TYPE’
   18 | #define PyCell_Check(op) Py_IS_TYPE((op), &PyCell_Type)
      |                          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/cellobject.h:34:12: note: in expansion of macro ‘PyCell_Check’
   34 |     assert(PyCell_Check(op));
      |            ^~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:80:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/genobject.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/genobject.h:33:23: warning: padding struct to align ‘<unnamed struct>::gi_iframe’ [-Wpadded]
   33 |     _PyGenObject_HEAD(gi)
      |                       ^~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/genobject.h:29:15: note: in definition of macro ‘_PyGenObject_HEAD’
   29 |     PyObject *prefix##_iframe[1];                                           \
      |               ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/genobject.h:53:23: warning: padding struct to align ‘<unnamed struct>::cr_iframe’ [-Wpadded]
   53 |     _PyGenObject_HEAD(cr)
      |                       ^~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/genobject.h:29:15: note: in definition of macro ‘_PyGenObject_HEAD’
   29 |     PyObject *prefix##_iframe[1];                                           \
      |               ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/genobject.h:67:23: warning: padding struct to align ‘<unnamed struct>::ag_iframe’ [-Wpadded]
   67 |     _PyGenObject_HEAD(ag)
      |                       ^~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/genobject.h:29:15: note: in definition of macro ‘_PyGenObject_HEAD’
   29 |     PyObject *prefix##_iframe[1];                                           \
      |               ^~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:81:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/descrobject.h:44:16: warning: padding struct to align ‘PyMemberDef::offset’ [-Wpadded]
   44 |     Py_ssize_t offset;
      |                ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/descrobject.h:46:17: warning: padding struct to align ‘PyMemberDef::doc’ [-Wpadded]
   46 |     const char *doc;
      |                 ^~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/descrobject.h:93:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/descrobject.h:14:11: warning: padding struct to align ‘wrapperbase::function’ [-Wpadded]
   14 |     void *function;
      |           ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/descrobject.h:18:15: warning: padding struct to align ‘wrapperbase::name_strobj’ [-Wpadded]
   18 |     PyObject *name_strobj;
      |               ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/weakrefobject.h: In function ‘PyObject* PyWeakref_GET_OBJECT(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:15:32: note: in expansion of macro ‘PyObject_TypeCheck’
   15 | #define PyWeakref_CheckRef(op) PyObject_TypeCheck((op), &_PyWeakref_RefType)
      |                                ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:23:10: note: in expansion of macro ‘PyWeakref_CheckRef’
   23 |         (PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))
      |          ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/weakrefobject.h:42:12: note: in expansion of macro ‘PyWeakref_Check’
   42 |     assert(PyWeakref_Check(ref_obj));
      |            ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:19:10: note: in expansion of macro ‘Py_IS_TYPE’
   19 |         (Py_IS_TYPE((op), &_PyWeakref_ProxyType) \
      |          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:23:36: note: in expansion of macro ‘PyWeakref_CheckProxy’
   23 |         (PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))
      |                                    ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/weakrefobject.h:42:12: note: in expansion of macro ‘PyWeakref_Check’
   42 |     assert(PyWeakref_Check(ref_obj));
      |            ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:20:13: note: in expansion of macro ‘Py_IS_TYPE’
   20 |          || Py_IS_TYPE((op), &_PyWeakref_CallableProxyType))
      |             ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:23:36: note: in expansion of macro ‘PyWeakref_CheckProxy’
   23 |         (PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))
      |                                    ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/weakrefobject.h:42:12: note: in expansion of macro ‘PyWeakref_Check’
   42 |     assert(PyWeakref_Check(ref_obj));
      |            ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:214:35: note: in expansion of macro ‘_PyObject_CAST’
  214 | #  define Py_REFCNT(ob) Py_REFCNT(_PyObject_CAST(ob))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/weakrefobject.h:51:9: note: in expansion of macro ‘Py_REFCNT’
   51 |     if (Py_REFCNT(obj) > 0) {
      |         ^~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:85:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/structseq.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/structseq.h:15:16: warning: padding struct size to alignment boundary [-Wpadded]
   15 | typedef struct PyStructSequence_Desc {
      |                ^~~~~~~~~~~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/modsupport.h:161,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:91:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/modsupport.h:55:17: warning: padding struct to align ‘_PyArg_Parser::format’ [-Wpadded]
   55 |     const char *format;
      |                 ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/modsupport.h:62:15: warning: padding struct to align ‘_PyArg_Parser::kwtuple’ [-Wpadded]
   62 |     PyObject *kwtuple;  /* tuple of keyword parameter names */
      |               ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:581:8: warning: padding struct size to alignment boundary [-Wpadded]
  581 | struct instance {
      |        ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:925:73: warning: use of old-style cast to ‘pybind11::detail::intrinsic_t<T>*’ [-Wold-style-cast]
  925 |     = decltype(is_template_base_of_impl<Base>::check((intrinsic_t<T> *) nullptr));
      |                                                                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:925:73: warning: use of old-style cast to ‘pybind11::detail::intrinsic_t<T>*’ [-Wold-style-cast]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h: In constructor ‘pybind11::error_scope::error_scope()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:1090:5: warning: ‘pybind11::error_scope::type’ should be initialized in the member initialization list [-Weffc++]
 1090 |     error_scope() { PyErr_Fetch(&type, &value, &trace); }
      |     ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:1090:5: warning: ‘pybind11::error_scope::value’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:1090:5: warning: ‘pybind11::error_scope::trace’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h: In constructor ‘pybind11::detail::any_container<T>::any_container(std::vector<_RealType>&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:1179:36: warning: declaration of ‘v’ shadows a member of ‘pybind11::detail::any_container<T>’ [-Wshadow]
 1179 |     any_container(std::vector<T> &&v) : v(std::move(v)) {}
      |                   ~~~~~~~~~~~~~~~~~^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:1154:20: note: shadowed declaration is here
 1154 |     std::vector<T> v;
      |                    ^
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:14,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:14:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:13,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:12,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:15:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:46:8: warning: ‘pybind11::buffer_info’ does not have the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in the type of ‘pybind11::buffer_info::format’) has [-Wabi-tag]
   46 | struct buffer_info {
      |        ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:50:17: note: ‘pybind11::buffer_info::format’ declared here
   50 |     std::string format;           // For homogeneous buffers, this should be set to
      |                 ^~~~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:181:16: warning: padding struct to align ‘pybind11::buffer_info::m_view’ [-Wpadded]
  181 |     Py_buffer *m_view = nullptr;
      |                ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:46:8: warning: padding struct size to alignment boundary [-Wpadded]
   46 | struct buffer_info {
      |        ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(void*, pybind11::ssize_t, const std::string&, pybind11::ssize_t, pybind11::detail::any_container<long int>, pybind11::detail::any_container<long int>, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:66:22: warning: declaration of ‘readonly’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   66 |                 bool readonly = false)
      |                 ~~~~~^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:56:10: note: shadowed declaration is here
   56 |     bool readonly = false;        // flag to indicate if the underlying storage may be written to
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:63:25: warning: declaration of ‘ndim’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   63 |                 ssize_t ndim,
      |                 ~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:52:13: note: shadowed declaration is here
   52 |     ssize_t ndim = 0;             // Number of dimensions
      |             ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:62:36: warning: declaration of ‘format’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   62 |                 const std::string &format,
      |                 ~~~~~~~~~~~~~~~~~~~^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:50:17: note: shadowed declaration is here
   50 |     std::string format;           // For homogeneous buffers, this should be set to
      |                 ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:61:25: warning: declaration of ‘itemsize’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   61 |                 ssize_t itemsize,
      |                 ~~~~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:48:13: note: shadowed declaration is here
   48 |     ssize_t itemsize = 0;         // Size of individual items in bytes
      |             ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:60:23: warning: declaration of ‘ptr’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   60 |     buffer_info(void *ptr,
      |                 ~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:47:11: note: shadowed declaration is here
   47 |     void *ptr = nullptr;          // Pointer to the underlying storage
      |           ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:69:42: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t’ {aka ‘long int’} [-Wold-style-cast]
   69 |         if (ndim != (ssize_t) shape.size() || ndim != (ssize_t) strides.size()) {
      |                                          ^
      |                     ---------
      |                     static_cast<ssize_t> ()
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:69:78: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t’ {aka ‘long int’} [-Wold-style-cast]
   69 |         if (ndim != (ssize_t) shape.size() || ndim != (ssize_t) strides.size()) {
      |                                                                              ^
      |                                                       ---------
      |                                                       static_cast<ssize_t> (  )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:72:41: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
   72 |         for (size_t i = 0; i < (size_t) ndim; ++i) {
      |                                         ^~~~
      |                                -------------
      |                                static_cast<size_t> ( ndim)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(void*, pybind11::ssize_t, const std::string&, pybind11::ssize_t, pybind11::detail::any_container<long int>, pybind11::detail::any_container<long int>, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:66:22: warning: declaration of ‘readonly’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   66 |                 bool readonly = false)
      |                 ~~~~~^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:56:10: note: shadowed declaration is here
   56 |     bool readonly = false;        // flag to indicate if the underlying storage may be written to
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:63:25: warning: declaration of ‘ndim’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   63 |                 ssize_t ndim,
      |                 ~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:52:13: note: shadowed declaration is here
   52 |     ssize_t ndim = 0;             // Number of dimensions
      |             ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:62:36: warning: declaration of ‘format’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   62 |                 const std::string &format,
      |                 ~~~~~~~~~~~~~~~~~~~^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:50:17: note: shadowed declaration is here
   50 |     std::string format;           // For homogeneous buffers, this should be set to
      |                 ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:61:25: warning: declaration of ‘itemsize’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   61 |                 ssize_t itemsize,
      |                 ~~~~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:48:13: note: shadowed declaration is here
   48 |     ssize_t itemsize = 0;         // Size of individual items in bytes
      |             ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:60:23: warning: declaration of ‘ptr’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   60 |     buffer_info(void *ptr,
      |                 ~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:47:11: note: shadowed declaration is here
   47 |     void *ptr = nullptr;          // Pointer to the underlying storage
      |           ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(void*, pybind11::ssize_t, const std::string&, pybind11::ssize_t, pybind11::detail::any_container<long int>, pybind11::detail::any_container<long int>, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:66:22: warning: declaration of ‘readonly’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   66 |                 bool readonly = false)
      |                 ~~~~~^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:56:10: note: shadowed declaration is here
   56 |     bool readonly = false;        // flag to indicate if the underlying storage may be written to
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:63:25: warning: declaration of ‘ndim’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   63 |                 ssize_t ndim,
      |                 ~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:52:13: note: shadowed declaration is here
   52 |     ssize_t ndim = 0;             // Number of dimensions
      |             ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:62:36: warning: declaration of ‘format’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   62 |                 const std::string &format,
      |                 ~~~~~~~~~~~~~~~~~~~^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:50:17: note: shadowed declaration is here
   50 |     std::string format;           // For homogeneous buffers, this should be set to
      |                 ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:61:25: warning: declaration of ‘itemsize’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   61 |                 ssize_t itemsize,
      |                 ~~~~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:48:13: note: shadowed declaration is here
   48 |     ssize_t itemsize = 0;         // Size of individual items in bytes
      |             ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:60:23: warning: declaration of ‘ptr’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   60 |     buffer_info(void *ptr,
      |                 ~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:47:11: note: shadowed declaration is here
   47 |     void *ptr = nullptr;          // Pointer to the underlying storage
      |           ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(T*, pybind11::detail::any_container<long int>, pybind11::detail::any_container<long int>, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:81:22: warning: declaration of ‘readonly’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   81 |                 bool readonly = false)
      |                 ~~~~~^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:56:10: note: shadowed declaration is here
   56 |     bool readonly = false;        // flag to indicate if the underlying storage may be written to
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:78:20: warning: declaration of ‘ptr’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   78 |     buffer_info(T *ptr,
      |                 ~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:47:11: note: shadowed declaration is here
   47 |     void *ptr = nullptr;          // Pointer to the underlying storage
      |           ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(void*, pybind11::ssize_t, const std::string&, pybind11::ssize_t, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:95:22: warning: declaration of ‘readonly’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   95 |                 bool readonly = false)
      |                 ~~~~~^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:56:10: note: shadowed declaration is here
   56 |     bool readonly = false;        // flag to indicate if the underlying storage may be written to
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:94:25: warning: declaration of ‘size’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   94 |                 ssize_t size,
      |                 ~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:49:13: note: shadowed declaration is here
   49 |     ssize_t size = 0;             // Total number of entries
      |             ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:93:36: warning: declaration of ‘format’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   93 |                 const std::string &format,
      |                 ~~~~~~~~~~~~~~~~~~~^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:50:17: note: shadowed declaration is here
   50 |     std::string format;           // For homogeneous buffers, this should be set to
      |                 ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:92:25: warning: declaration of ‘itemsize’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   92 |                 ssize_t itemsize,
      |                 ~~~~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:48:13: note: shadowed declaration is here
   48 |     ssize_t itemsize = 0;         // Size of individual items in bytes
      |             ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:91:23: warning: declaration of ‘ptr’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   91 |     buffer_info(void *ptr,
      |                 ~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:47:11: note: shadowed declaration is here
   47 |     void *ptr = nullptr;          // Pointer to the underlying storage
      |           ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(void*, pybind11::ssize_t, const std::string&, pybind11::ssize_t, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:95:22: warning: declaration of ‘readonly’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   95 |                 bool readonly = false)
      |                 ~~~~~^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:56:10: note: shadowed declaration is here
   56 |     bool readonly = false;        // flag to indicate if the underlying storage may be written to
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:94:25: warning: declaration of ‘size’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   94 |                 ssize_t size,
      |                 ~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:49:13: note: shadowed declaration is here
   49 |     ssize_t size = 0;             // Total number of entries
      |             ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:93:36: warning: declaration of ‘format’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   93 |                 const std::string &format,
      |                 ~~~~~~~~~~~~~~~~~~~^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:50:17: note: shadowed declaration is here
   50 |     std::string format;           // For homogeneous buffers, this should be set to
      |                 ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:92:25: warning: declaration of ‘itemsize’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   92 |                 ssize_t itemsize,
      |                 ~~~~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:48:13: note: shadowed declaration is here
   48 |     ssize_t itemsize = 0;         // Size of individual items in bytes
      |             ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:91:23: warning: declaration of ‘ptr’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   91 |     buffer_info(void *ptr,
      |                 ~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:47:11: note: shadowed declaration is here
   47 |     void *ptr = nullptr;          // Pointer to the underlying storage
      |           ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(void*, pybind11::ssize_t, const std::string&, pybind11::ssize_t, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:95:22: warning: declaration of ‘readonly’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   95 |                 bool readonly = false)
      |                 ~~~~~^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:56:10: note: shadowed declaration is here
   56 |     bool readonly = false;        // flag to indicate if the underlying storage may be written to
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:94:25: warning: declaration of ‘size’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   94 |                 ssize_t size,
      |                 ~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:49:13: note: shadowed declaration is here
   49 |     ssize_t size = 0;             // Total number of entries
      |             ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:93:36: warning: declaration of ‘format’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   93 |                 const std::string &format,
      |                 ~~~~~~~~~~~~~~~~~~~^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:50:17: note: shadowed declaration is here
   50 |     std::string format;           // For homogeneous buffers, this should be set to
      |                 ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:92:25: warning: declaration of ‘itemsize’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   92 |                 ssize_t itemsize,
      |                 ~~~~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:48:13: note: shadowed declaration is here
   48 |     ssize_t itemsize = 0;         // Size of individual items in bytes
      |             ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:91:23: warning: declaration of ‘ptr’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   91 |     buffer_info(void *ptr,
      |                 ~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:47:11: note: shadowed declaration is here
   47 |     void *ptr = nullptr;          // Pointer to the underlying storage
      |           ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(T*, pybind11::ssize_t, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:99:44: warning: declaration of ‘readonly’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   99 |     buffer_info(T *ptr, ssize_t size, bool readonly = false)
      |                                       ~~~~~^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:56:10: note: shadowed declaration is here
   56 |     bool readonly = false;        // flag to indicate if the underlying storage may be written to
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:99:33: warning: declaration of ‘size’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   99 |     buffer_info(T *ptr, ssize_t size, bool readonly = false)
      |                         ~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:49:13: note: shadowed declaration is here
   49 |     ssize_t size = 0;             // Total number of entries
      |             ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:99:20: warning: declaration of ‘ptr’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
   99 |     buffer_info(T *ptr, ssize_t size, bool readonly = false)
      |                 ~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:47:11: note: shadowed declaration is here
   47 |     void *ptr = nullptr;          // Pointer to the underlying storage
      |           ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(const T*, pybind11::ssize_t, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:103:50: warning: declaration of ‘readonly’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  103 |     buffer_info(const T *ptr, ssize_t size, bool readonly = true)
      |                                             ~~~~~^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:56:10: note: shadowed declaration is here
   56 |     bool readonly = false;        // flag to indicate if the underlying storage may be written to
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:103:39: warning: declaration of ‘size’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  103 |     buffer_info(const T *ptr, ssize_t size, bool readonly = true)
      |                               ~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:49:13: note: shadowed declaration is here
   49 |     ssize_t size = 0;             // Total number of entries
      |             ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:103:26: warning: declaration of ‘ptr’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  103 |     buffer_info(const T *ptr, ssize_t size, bool readonly = true)
      |                 ~~~~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:47:11: note: shadowed declaration is here
   47 |     void *ptr = nullptr;          // Pointer to the underlying storage
      |           ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(Py_buffer*, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:107:48: warning: declaration of ‘ownview’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  107 |     explicit buffer_info(Py_buffer *view, bool ownview = true)
      |                                           ~~~~~^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:182:10: note: shadowed declaration is here
  182 |     bool ownview = false;
      |          ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(Py_buffer*, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:107:48: warning: declaration of ‘ownview’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  107 |     explicit buffer_info(Py_buffer *view, bool ownview = true)
      |                                           ~~~~~^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:182:10: note: shadowed declaration is here
  182 |     bool ownview = false;
      |          ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(Py_buffer*, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:107:48: warning: declaration of ‘ownview’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  107 |     explicit buffer_info(Py_buffer *view, bool ownview = true)
      |                                           ~~~~~^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:182:10: note: shadowed declaration is here
  182 |     bool ownview = false;
      |          ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(pybind11::buffer_info&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:130:5: warning: ‘pybind11::buffer_info::format’ should be initialized in the member initialization list [-Weffc++]
  130 |     buffer_info(buffer_info &&other) noexcept { (*this) = std::move(other); }
      |     ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:130:5: warning: ‘pybind11::buffer_info::shape’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:130:5: warning: ‘pybind11::buffer_info::strides’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(private_ctr_tag, void*, pybind11::ssize_t, const std::string&, pybind11::ssize_t, pybind11::detail::any_container<long int>&&, pybind11::detail::any_container<long int>&&, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:177:22: warning: declaration of ‘readonly’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  177 |                 bool readonly)
      |                 ~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:56:10: note: shadowed declaration is here
   56 |     bool readonly = false;        // flag to indicate if the underlying storage may be written to
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:174:25: warning: declaration of ‘ndim’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  174 |                 ssize_t ndim,
      |                 ~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:52:13: note: shadowed declaration is here
   52 |     ssize_t ndim = 0;             // Number of dimensions
      |             ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:173:36: warning: declaration of ‘format’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  173 |                 const std::string &format,
      |                 ~~~~~~~~~~~~~~~~~~~^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:50:17: note: shadowed declaration is here
   50 |     std::string format;           // For homogeneous buffers, this should be set to
      |                 ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:172:25: warning: declaration of ‘itemsize’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  172 |                 ssize_t itemsize,
      |                 ~~~~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:48:13: note: shadowed declaration is here
   48 |     ssize_t itemsize = 0;         // Size of individual items in bytes
      |             ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:171:23: warning: declaration of ‘ptr’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  171 |                 void *ptr,
      |                 ~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:47:11: note: shadowed declaration is here
   47 |     void *ptr = nullptr;          // Pointer to the underlying storage
      |           ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(private_ctr_tag, void*, pybind11::ssize_t, const std::string&, pybind11::ssize_t, pybind11::detail::any_container<long int>&&, pybind11::detail::any_container<long int>&&, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:177:22: warning: declaration of ‘readonly’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  177 |                 bool readonly)
      |                 ~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:56:10: note: shadowed declaration is here
   56 |     bool readonly = false;        // flag to indicate if the underlying storage may be written to
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:174:25: warning: declaration of ‘ndim’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  174 |                 ssize_t ndim,
      |                 ~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:52:13: note: shadowed declaration is here
   52 |     ssize_t ndim = 0;             // Number of dimensions
      |             ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:173:36: warning: declaration of ‘format’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  173 |                 const std::string &format,
      |                 ~~~~~~~~~~~~~~~~~~~^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:50:17: note: shadowed declaration is here
   50 |     std::string format;           // For homogeneous buffers, this should be set to
      |                 ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:172:25: warning: declaration of ‘itemsize’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  172 |                 ssize_t itemsize,
      |                 ~~~~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:48:13: note: shadowed declaration is here
   48 |     ssize_t itemsize = 0;         // Size of individual items in bytes
      |             ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:171:23: warning: declaration of ‘ptr’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  171 |                 void *ptr,
      |                 ~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:47:11: note: shadowed declaration is here
   47 |     void *ptr = nullptr;          // Pointer to the underlying storage
      |           ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In constructor ‘pybind11::buffer_info::buffer_info(private_ctr_tag, void*, pybind11::ssize_t, const std::string&, pybind11::ssize_t, pybind11::detail::any_container<long int>&&, pybind11::detail::any_container<long int>&&, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:177:22: warning: declaration of ‘readonly’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  177 |                 bool readonly)
      |                 ~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:56:10: note: shadowed declaration is here
   56 |     bool readonly = false;        // flag to indicate if the underlying storage may be written to
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:174:25: warning: declaration of ‘ndim’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  174 |                 ssize_t ndim,
      |                 ~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:52:13: note: shadowed declaration is here
   52 |     ssize_t ndim = 0;             // Number of dimensions
      |             ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:173:36: warning: declaration of ‘format’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  173 |                 const std::string &format,
      |                 ~~~~~~~~~~~~~~~~~~~^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:50:17: note: shadowed declaration is here
   50 |     std::string format;           // For homogeneous buffers, this should be set to
      |                 ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:172:25: warning: declaration of ‘itemsize’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  172 |                 ssize_t itemsize,
      |                 ~~~~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:48:13: note: shadowed declaration is here
   48 |     ssize_t itemsize = 0;         // Size of individual items in bytes
      |             ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:171:23: warning: declaration of ‘ptr’ shadows a member of ‘pybind11::buffer_info’ [-Wshadow]
  171 |                 void *ptr,
      |                 ~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:47:11: note: shadowed declaration is here
   47 |     void *ptr = nullptr;          // Pointer to the underlying storage
      |           ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In static member function ‘static bool pybind11::detail::compare_buffer_info<T, SFINAE>::compare(const pybind11::buffer_info&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:191:94: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t’ {aka ‘long int’} [-Wold-style-cast]
  191 |         return b.format == format_descriptor<T>::format() && b.itemsize == (ssize_t) sizeof(T);
      |                                                                                              ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h: In static member function ‘static bool pybind11::detail::compare_buffer_info<T, typename std::enable_if<std::is_integral<_Tp>::value, void>::type>::compare(const pybind11::buffer_info&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../buffer_info.h:198:27: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
  198 |         return (size_t) b.itemsize == sizeof(T)
      |                           ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘int pybind11::detail::object_api<Derived>::ref_count() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:214:35: note: in expansion of macro ‘_PyObject_CAST’
  214 | #  define Py_REFCNT(ob) Py_REFCNT(_PyObject_CAST(ob))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:186:53: note: in expansion of macro ‘Py_REFCNT’
  186 |     int ref_count() const { return static_cast<int>(Py_REFCNT(derived().ptr())); }
      |                                                     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘const pybind11::handle& pybind11::handle::inc_ref() const &’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:792:37: note: in expansion of macro ‘_PyObject_CAST’
  792 | #  define Py_XINCREF(op) Py_XINCREF(_PyObject_CAST(op))
      |                                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:259:9: note: in expansion of macro ‘Py_XINCREF’
  259 |         Py_XINCREF(m_ptr);
      |         ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘const pybind11::handle& pybind11::handle::dec_ref() const &’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:802:37: note: in expansion of macro ‘_PyObject_CAST’
  802 | #  define Py_XDECREF(op) Py_XDECREF(_PyObject_CAST(op))
      |                                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:274:9: note: in expansion of macro ‘Py_XDECREF’
  274 |         Py_XDECREF(m_ptr);
      |         ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘void pybind11::handle::throw_gilstate_error(const std::string&) const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:314:13: note: in expansion of macro ‘Py_TYPE’
  314 |         if (Py_TYPE(m_ptr)->tp_name != nullptr) {
      |             ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:318:21: note: in expansion of macro ‘Py_TYPE’
  318 |                     Py_TYPE(m_ptr)->tp_name);
      |                     ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In function ‘const char* pybind11::detail::obj_class_name(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:480:9: note: in expansion of macro ‘PyType_Check’
  480 |     if (PyType_Check(obj)) {
      |         ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:480:9: note: in expansion of macro ‘PyType_Check’
  480 |     if (PyType_Check(obj)) {
      |         ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:483:12: note: in expansion of macro ‘Py_TYPE’
  483 |     return Py_TYPE(obj)->tp_name;
      |            ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:483:12: note: in expansion of macro ‘Py_TYPE’
  483 |     return Py_TYPE(obj)->tp_name;
      |            ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:496:8: warning: ‘pybind11::detail::error_fetch_and_normalize’ does not have the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in the type of ‘pybind11::detail::error_fetch_and_normalize::m_lazy_error_string’) has [-Wabi-tag]
  496 | struct error_fetch_and_normalize {
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:716:25: note: ‘pybind11::detail::error_fetch_and_normalize::m_lazy_error_string’ declared here
  716 |     mutable std::string m_lazy_error_string;
      |                         ^~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:496:8: warning: padding struct size to alignment boundary [-Wpadded]
  496 | struct error_fetch_and_normalize {
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::detail::error_fetch_and_normalize::error_fetch_and_normalize(const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:506:14: warning: ‘pybind11::detail::error_fetch_and_normalize::m_type’ should be initialized in the member initialization list [-Weffc++]
  506 |     explicit error_fetch_and_normalize(const char *called) {
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:506:14: warning: ‘pybind11::detail::error_fetch_and_normalize::m_value’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:506:14: warning: ‘pybind11::detail::error_fetch_and_normalize::m_trace’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:506:14: warning: ‘pybind11::detail::error_fetch_and_normalize::m_lazy_error_string’ should be initialized in the member initialization list [-Weffc++]
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:15:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘std::string pybind11::detail::error_fetch_and_normalize::format_value_and_trace() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:5: note: in expansion of macro ‘PyType_FastSubclass’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:25: note: in expansion of macro ‘Py_TYPE’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:29:13: note: in expansion of macro ‘PyList_Check’
   29 |     (assert(PyList_Check(op)), _Py_CAST(PyListObject*, (op)))
      |             ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:39:37: note: in expansion of macro ‘_PyList_CAST’
   39 | #define PyList_GET_ITEM(op, index) (_PyList_CAST(op)->ob_item[(index)])
      |                                     ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:607:42: note: in expansion of macro ‘PyList_GET_ITEM’
  607 |                         PyObject *note = PyList_GET_ITEM(notes.ptr(), i);
      |                                          ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:5: note: in expansion of macro ‘PyType_FastSubclass’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:25: note: in expansion of macro ‘Py_TYPE’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:29:13: note: in expansion of macro ‘PyList_Check’
   29 |     (assert(PyList_Check(op)), _Py_CAST(PyListObject*, (op)))
      |             ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:39:37: note: in expansion of macro ‘_PyList_CAST’
   39 | #define PyList_GET_ITEM(op, index) (_PyList_CAST(op)->ob_item[(index)])
      |                                     ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:607:42: note: in expansion of macro ‘PyList_GET_ITEM’
  607 |                         PyObject *note = PyList_GET_ITEM(notes.ptr(), i);
      |                                          ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘struct PyListObject*’ [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:29:32: note: in expansion of macro ‘_Py_CAST’
   29 |     (assert(PyList_Check(op)), _Py_CAST(PyListObject*, (op)))
      |                                ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:39:37: note: in expansion of macro ‘_PyList_CAST’
   39 | #define PyList_GET_ITEM(op, index) (_PyList_CAST(op)->ob_item[(index)])
      |                                     ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:607:42: note: in expansion of macro ‘PyList_GET_ITEM’
  607 |                         PyObject *note = PyList_GET_ITEM(notes.ptr(), i);
      |                                          ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:792:37: note: in expansion of macro ‘_PyObject_CAST’
  792 | #  define Py_XINCREF(op) Py_XINCREF(_PyObject_CAST(op))
      |                                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:647:13: note: in expansion of macro ‘Py_XINCREF’
  647 |             Py_XINCREF(frame);
      |             ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:664:17: note: in expansion of macro ‘Py_DECREF’
  664 |                 Py_DECREF(f_code);
      |                 ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:671:17: note: in expansion of macro ‘Py_DECREF’
  671 |                 Py_DECREF(frame);
      |                 ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In function ‘void pybind11::raise_from(PyObject*, const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:800:9: note: in expansion of macro ‘Py_DECREF’
  800 |         Py_DECREF(tb);
      |         ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:800:9: note: in expansion of macro ‘Py_DECREF’
  800 |         Py_DECREF(tb);
      |         ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:802:5: note: in expansion of macro ‘Py_DECREF’
  802 |     Py_DECREF(exc);
      |     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:802:5: note: in expansion of macro ‘Py_DECREF’
  802 |     Py_DECREF(exc);
      |     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:661:35: note: in expansion of macro ‘_PyObject_CAST’
  661 | #  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:809:5: note: in expansion of macro ‘Py_INCREF’
  809 |     Py_INCREF(val);
      |     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:661:35: note: in expansion of macro ‘_PyObject_CAST’
  661 | #  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:809:5: note: in expansion of macro ‘Py_INCREF’
  809 |     Py_INCREF(val);
      |     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In function ‘pybind11::handle pybind11::detail::get_function(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:51:36: note: in expansion of macro ‘Py_IS_TYPE’
   51 | #define PyInstanceMethod_Check(op) Py_IS_TYPE((op), &PyInstanceMethod_Type)
      |                                    ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:939:13: note: in expansion of macro ‘PyInstanceMethod_Check’
  939 |         if (PyInstanceMethod_Check(value.ptr())) {
      |             ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:51:36: note: in expansion of macro ‘Py_IS_TYPE’
   51 | #define PyInstanceMethod_Check(op) Py_IS_TYPE((op), &PyInstanceMethod_Type)
      |                                    ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:939:13: note: in expansion of macro ‘PyInstanceMethod_Check’
  939 |         if (PyInstanceMethod_Check(value.ptr())) {
      |             ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:65:75: note: in expansion of macro ‘_PyObject_CAST’
   65 | #define PyInstanceMethod_GET_FUNCTION(meth) PyInstanceMethod_GET_FUNCTION(_PyObject_CAST(meth))
      |                                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:940:21: note: in expansion of macro ‘PyInstanceMethod_GET_FUNCTION’
  940 |             value = PyInstanceMethod_GET_FUNCTION(value.ptr());
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:65:75: note: in expansion of macro ‘_PyObject_CAST’
   65 | #define PyInstanceMethod_GET_FUNCTION(meth) PyInstanceMethod_GET_FUNCTION(_PyObject_CAST(meth))
      |                                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:940:21: note: in expansion of macro ‘PyInstanceMethod_GET_FUNCTION’
  940 |             value = PyInstanceMethod_GET_FUNCTION(value.ptr());
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:22:28: note: in expansion of macro ‘Py_IS_TYPE’
   22 | #define PyMethod_Check(op) Py_IS_TYPE((op), &PyMethod_Type)
      |                            ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:941:20: note: in expansion of macro ‘PyMethod_Check’
  941 |         } else if (PyMethod_Check(value.ptr())) {
      |                    ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:22:28: note: in expansion of macro ‘Py_IS_TYPE’
   22 | #define PyMethod_Check(op) Py_IS_TYPE((op), &PyMethod_Type)
      |                            ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:941:20: note: in expansion of macro ‘PyMethod_Check’
  941 |         } else if (PyMethod_Check(value.ptr())) {
      |                    ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:37:59: note: in expansion of macro ‘_PyObject_CAST’
   37 | #define PyMethod_GET_FUNCTION(meth) PyMethod_GET_FUNCTION(_PyObject_CAST(meth))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:942:21: note: in expansion of macro ‘PyMethod_GET_FUNCTION’
  942 |             value = PyMethod_GET_FUNCTION(value.ptr());
      |                     ^~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:37:59: note: in expansion of macro ‘_PyObject_CAST’
   37 | #define PyMethod_GET_FUNCTION(meth) PyMethod_GET_FUNCTION(_PyObject_CAST(meth))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:942:21: note: in expansion of macro ‘PyMethod_GET_FUNCTION’
  942 |             value = PyMethod_GET_FUNCTION(value.ptr());
      |                     ^~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In function ‘PyObject* pybind11::detail::dict_getitemstring(PyObject*, const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:960:5: note: in expansion of macro ‘Py_DECREF’
  960 |     Py_DECREF(kv);
      |     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:960:5: note: in expansion of macro ‘Py_DECREF’
  960 |     Py_DECREF(kv);
      |     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::detail::accessor<Policy>::accessor(pybind11::handle, key_type)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:995:35: warning: declaration of ‘key’ shadows a member of ‘pybind11::detail::accessor<Policy>’ [-Wshadow]
  995 |     accessor(handle obj, key_type key) : obj(obj), key(std::move(key)) {}
      |                          ~~~~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1050:14: note: shadowed declaration is here
 1050 |     key_type key;
      |              ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:995:21: warning: declaration of ‘obj’ shadows a member of ‘pybind11::detail::accessor<Policy>’ [-Wshadow]
  995 |     accessor(handle obj, key_type key) : obj(obj), key(std::move(key)) {}
      |              ~~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1049:12: note: shadowed declaration is here
 1049 |     handle obj;
      |            ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1001:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 1001 |     void operator=(const accessor &a) && { std::move(*this).operator=(handle(a)); }
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1002:41: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 1002 |     void operator=(const accessor &a) & { operator=(handle(a)); }
      |                                         ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:34: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 1005 |     void operator=(T &&value) && {
      |                                  ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1009:33: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 1009 |     void operator=(T &&value) & {
      |                                 ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::detail::iterator_policies::arrow_proxy<T>::arrow_proxy(T&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1224:21: warning: declaration of ‘value’ shadows a member of ‘pybind11::detail::iterator_policies::arrow_proxy<T>’ [-Wshadow]
 1224 |     arrow_proxy(T &&value) noexcept : value(std::move(value)) {}
      |                 ~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1221:7: note: shadowed declaration is here
 1221 |     T value;
      |       ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::detail::iterator_policies::sequence_fast_readonly::sequence_fast_readonly(pybind11::handle, pybind11::ssize_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:25: note: in expansion of macro ‘Py_TYPE’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/abstract.h:756:6: note: in expansion of macro ‘PyList_Check’
  756 |     (PyList_Check(sf) ? ((PyListObject *)(sf))->ob_item \
      |      ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1236:57: note: in expansion of macro ‘PySequence_Fast_ITEMS’
 1236 |     sequence_fast_readonly(handle obj, ssize_t n) : ptr(PySequence_Fast_ITEMS(obj.ptr()) + n) {}
      |                                                         ^~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:25: note: in expansion of macro ‘Py_TYPE’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/abstract.h:756:6: note: in expansion of macro ‘PyList_Check’
  756 |     (PyList_Check(sf) ? ((PyListObject *)(sf))->ob_item \
      |      ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1236:57: note: in expansion of macro ‘PySequence_Fast_ITEMS’
 1236 |     sequence_fast_readonly(handle obj, ssize_t n) : ptr(PySequence_Fast_ITEMS(obj.ptr()) + n) {}
      |                                                         ^~~~~~~~~~~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:100:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/abstract.h:756:45: warning: use of old-style cast to ‘struct PyListObject*’ [-Wold-style-cast]
  756 |     (PyList_Check(sf) ? ((PyListObject *)(sf))->ob_item \
      |                                             ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1236:57: note: in expansion of macro ‘PySequence_Fast_ITEMS’
 1236 |     sequence_fast_readonly(handle obj, ssize_t n) : ptr(PySequence_Fast_ITEMS(obj.ptr()) + n) {}
      |                                                         ^~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/abstract.h:757:46: warning: use of old-style cast to ‘struct PyTupleObject*’ [-Wold-style-cast]
  757 |                       : ((PyTupleObject *)(sf))->ob_item)
      |                                              ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1236:57: note: in expansion of macro ‘PySequence_Fast_ITEMS’
 1236 |     sequence_fast_readonly(handle obj, ssize_t n) : ptr(PySequence_Fast_ITEMS(obj.ptr()) + n) {}
      |                                                         ^~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::detail::iterator_policies::sequence_slow_readwrite::sequence_slow_readwrite(pybind11::handle, pybind11::ssize_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1258:49: warning: declaration of ‘index’ shadows a member of ‘pybind11::detail::iterator_policies::sequence_slow_readwrite’ [-Wshadow]
 1258 |     sequence_slow_readwrite(handle obj, ssize_t index) : obj(obj), index(index) {}
      |                                         ~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1269:13: note: shadowed declaration is here
 1269 |     ssize_t index;
      |             ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1258:36: warning: declaration of ‘obj’ shadows a member of ‘pybind11::detail::iterator_policies::sequence_slow_readwrite’ [-Wshadow]
 1258 |     sequence_slow_readwrite(handle obj, ssize_t index) : obj(obj), index(index) {}
      |                             ~~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1268:12: note: shadowed declaration is here
 1268 |     handle obj;
      |            ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::detail::iterator_policies::sequence_slow_readwrite::sequence_slow_readwrite(pybind11::handle, pybind11::ssize_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1258:49: warning: declaration of ‘index’ shadows a member of ‘pybind11::detail::iterator_policies::sequence_slow_readwrite’ [-Wshadow]
 1258 |     sequence_slow_readwrite(handle obj, ssize_t index) : obj(obj), index(index) {}
      |                                         ~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1269:13: note: shadowed declaration is here
 1269 |     ssize_t index;
      |             ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1258:36: warning: declaration of ‘obj’ shadows a member of ‘pybind11::detail::iterator_policies::sequence_slow_readwrite’ [-Wshadow]
 1258 |     sequence_slow_readwrite(handle obj, ssize_t index) : obj(obj), index(index) {}
      |                             ~~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1268:12: note: shadowed declaration is here
 1268 |     handle obj;
      |            ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::detail::iterator_policies::sequence_slow_readwrite::sequence_slow_readwrite(pybind11::handle, pybind11::ssize_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1258:49: warning: declaration of ‘index’ shadows a member of ‘pybind11::detail::iterator_policies::sequence_slow_readwrite’ [-Wshadow]
 1258 |     sequence_slow_readwrite(handle obj, ssize_t index) : obj(obj), index(index) {}
      |                                         ~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1269:13: note: shadowed declaration is here
 1269 |     ssize_t index;
      |             ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1258:36: warning: declaration of ‘obj’ shadows a member of ‘pybind11::detail::iterator_policies::sequence_slow_readwrite’ [-Wshadow]
 1258 |     sequence_slow_readwrite(handle obj, ssize_t index) : obj(obj), index(index) {}
      |                             ~~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1268:12: note: shadowed declaration is here
 1268 |     handle obj;
      |            ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::detail::iterator_policies::dict_readonly::dict_readonly(pybind11::handle, pybind11::ssize_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1281:39: warning: declaration of ‘pos’ shadows a member of ‘pybind11::detail::iterator_policies::dict_readonly’ [-Wshadow]
 1281 |     dict_readonly(handle obj, ssize_t pos) : obj(obj), pos(pos) { increment(); }
      |                               ~~~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1295:13: note: shadowed declaration is here
 1295 |     ssize_t pos = -1;
      |             ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1281:26: warning: declaration of ‘obj’ shadows a member of ‘pybind11::detail::iterator_policies::dict_readonly’ [-Wshadow]
 1281 |     dict_readonly(handle obj, ssize_t pos) : obj(obj), pos(pos) { increment(); }
      |                   ~~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1293:12: note: shadowed declaration is here
 1293 |     handle obj;
      |            ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::detail::iterator_policies::dict_readonly::dict_readonly(pybind11::handle, pybind11::ssize_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1281:39: warning: declaration of ‘pos’ shadows a member of ‘pybind11::detail::iterator_policies::dict_readonly’ [-Wshadow]
 1281 |     dict_readonly(handle obj, ssize_t pos) : obj(obj), pos(pos) { increment(); }
      |                               ~~~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1295:13: note: shadowed declaration is here
 1295 |     ssize_t pos = -1;
      |             ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1281:26: warning: declaration of ‘obj’ shadows a member of ‘pybind11::detail::iterator_policies::dict_readonly’ [-Wshadow]
 1281 |     dict_readonly(handle obj, ssize_t pos) : obj(obj), pos(pos) { increment(); }
      |                   ~~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1293:12: note: shadowed declaration is here
 1293 |     handle obj;
      |            ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::detail::iterator_policies::dict_readonly::dict_readonly(pybind11::handle, pybind11::ssize_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1281:39: warning: declaration of ‘pos’ shadows a member of ‘pybind11::detail::iterator_policies::dict_readonly’ [-Wshadow]
 1281 |     dict_readonly(handle obj, ssize_t pos) : obj(obj), pos(pos) { increment(); }
      |                               ~~~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1295:13: note: shadowed declaration is here
 1295 |     ssize_t pos = -1;
      |             ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1281:26: warning: declaration of ‘obj’ shadows a member of ‘pybind11::detail::iterator_policies::dict_readonly’ [-Wshadow]
 1281 |     dict_readonly(handle obj, ssize_t pos) : obj(obj), pos(pos) { increment(); }
      |                   ~~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1293:12: note: shadowed declaration is here
 1293 |     handle obj;
      |            ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In function ‘bool pybind11::detail::PyIterable_Check(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1313:9: note: in expansion of macro ‘Py_DECREF’
 1313 |         Py_DECREF(iter);
      |         ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1313:9: note: in expansion of macro ‘Py_DECREF’
 1313 |         Py_DECREF(iter);
      |         ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::iterator::iterator(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1443:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1443 |     PYBIND11_OBJECT_DEFAULT(iterator, object, PyIter_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1443:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1443 |     PYBIND11_OBJECT_DEFAULT(iterator, object, PyIter_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::iterator::iterator(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1443:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1443 |     PYBIND11_OBJECT_DEFAULT(iterator, object, PyIter_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1443:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1443 |     PYBIND11_OBJECT_DEFAULT(iterator, object, PyIter_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::type::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyType_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1502:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1502 |     PYBIND11_OBJECT(type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::type::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyType_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1502:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1502 |     PYBIND11_OBJECT(type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyType_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1502:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1502 |     PYBIND11_OBJECT(type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::type::type(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1502:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1502 |     PYBIND11_OBJECT(type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1502:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1502 |     PYBIND11_OBJECT(type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::type::type(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1502:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1502 |     PYBIND11_OBJECT(type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1502:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1502 |     PYBIND11_OBJECT(type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static pybind11::handle pybind11::type::handle_of(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1505:68: note: in expansion of macro ‘Py_TYPE’
 1505 |     static handle handle_of(handle h) { return handle((PyObject *) Py_TYPE(h.ptr())); }
      |                                                                    ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1505:68: note: in expansion of macro ‘Py_TYPE’
 1505 |     static handle handle_of(handle h) { return handle((PyObject *) Py_TYPE(h.ptr())); }
      |                                                                    ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:49: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                                                 ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1505:68: note: in expansion of macro ‘Py_TYPE’
 1505 |     static handle handle_of(handle h) { return handle((PyObject *) Py_TYPE(h.ptr())); }
      |                                                                    ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::iterable::iterable(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1528:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1528 |     PYBIND11_OBJECT_DEFAULT(iterable, object, detail::PyIterable_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1528:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1528 |     PYBIND11_OBJECT_DEFAULT(iterable, object, detail::PyIterable_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::iterable::iterable(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1528:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1528 |     PYBIND11_OBJECT_DEFAULT(iterable, object, detail::PyIterable_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1528:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1528 |     PYBIND11_OBJECT_DEFAULT(iterable, object, detail::PyIterable_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::str::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyUnicode_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1535:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1535 |     PYBIND11_OBJECT_CVT(str, object, PYBIND11_STR_CHECK_FUN, raw_str)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1535:38: note: in expansion of macro ‘PYBIND11_STR_CHECK_FUN’
 1535 |     PYBIND11_OBJECT_CVT(str, object, PYBIND11_STR_CHECK_FUN, raw_str)
      |                                      ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::str::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyUnicode_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1535:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1535 |     PYBIND11_OBJECT_CVT(str, object, PYBIND11_STR_CHECK_FUN, raw_str)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1535:38: note: in expansion of macro ‘PYBIND11_STR_CHECK_FUN’
 1535 |     PYBIND11_OBJECT_CVT(str, object, PYBIND11_STR_CHECK_FUN, raw_str)
      |                                      ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyUnicode_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1535:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1535 |     PYBIND11_OBJECT_CVT(str, object, PYBIND11_STR_CHECK_FUN, raw_str)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1535:38: note: in expansion of macro ‘PYBIND11_STR_CHECK_FUN’
 1535 |     PYBIND11_OBJECT_CVT(str, object, PYBIND11_STR_CHECK_FUN, raw_str)
      |                                      ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘pybind11::str::operator std::string() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1592:13: note: in expansion of macro ‘PyUnicode_Check’
 1592 |         if (PyUnicode_Check(m_ptr)) {
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1603:45: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
 1603 |         return std::string(buffer, (size_t) length);
      |                                             ^~~~~~
      |                                    ---------------
      |                                    static_cast<size_t> ( length)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::bytes::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytesobject.h:31:38: note: in expansion of macro ‘Py_TYPE’
   31 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_BYTES_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyBytes_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1639:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1639 |     PYBIND11_OBJECT(bytes, object, PYBIND11_BYTES_CHECK)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1639:36: note: in expansion of macro ‘PYBIND11_BYTES_CHECK’
 1639 |     PYBIND11_OBJECT(bytes, object, PYBIND11_BYTES_CHECK)
      |                                    ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::bytes::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytesobject.h:31:38: note: in expansion of macro ‘Py_TYPE’
   31 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_BYTES_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyBytes_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1639:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1639 |     PYBIND11_OBJECT(bytes, object, PYBIND11_BYTES_CHECK)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1639:36: note: in expansion of macro ‘PYBIND11_BYTES_CHECK’
 1639 |     PYBIND11_OBJECT(bytes, object, PYBIND11_BYTES_CHECK)
      |                                    ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytesobject.h:31:38: note: in expansion of macro ‘Py_TYPE’
   31 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_BYTES_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyBytes_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1639:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1639 |     PYBIND11_OBJECT(bytes, object, PYBIND11_BYTES_CHECK)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1639:36: note: in expansion of macro ‘PYBIND11_BYTES_CHECK’
 1639 |     PYBIND11_OBJECT(bytes, object, PYBIND11_BYTES_CHECK)
      |                                    ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::bytes::bytes(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1639:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1639 |     PYBIND11_OBJECT(bytes, object, PYBIND11_BYTES_CHECK)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1639:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1639 |     PYBIND11_OBJECT(bytes, object, PYBIND11_BYTES_CHECK)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::bytes::bytes(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1639:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1639 |     PYBIND11_OBJECT(bytes, object, PYBIND11_BYTES_CHECK)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1639:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1639 |     PYBIND11_OBJECT(bytes, object, PYBIND11_BYTES_CHECK)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::bytes::bytes(const pybind11::str&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1695:9: note: in expansion of macro ‘PyUnicode_Check’
 1695 |     if (PyUnicode_Check(s.ptr())) {
      |         ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1695:9: note: in expansion of macro ‘PyUnicode_Check’
 1695 |     if (PyUnicode_Check(s.ptr())) {
      |         ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::bytearray::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytearrayobject.h:24:33: note: in expansion of macro ‘PyObject_TypeCheck’
   24 | #define PyByteArray_Check(self) PyObject_TypeCheck((self), &PyByteArray_Type)
      |                                 ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyByteArray_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1733:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1733 |     PYBIND11_OBJECT_CVT(bytearray, object, PyByteArray_Check, PyByteArray_FromObject)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::bytearray::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytearrayobject.h:24:33: note: in expansion of macro ‘PyObject_TypeCheck’
   24 | #define PyByteArray_Check(self) PyObject_TypeCheck((self), &PyByteArray_Type)
      |                                 ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyByteArray_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1733:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1733 |     PYBIND11_OBJECT_CVT(bytearray, object, PyByteArray_Check, PyByteArray_FromObject)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytearrayobject.h:24:33: note: in expansion of macro ‘PyObject_TypeCheck’
   24 | #define PyByteArray_Check(self) PyObject_TypeCheck((self), &PyByteArray_Type)
      |                                 ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyByteArray_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1733:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1733 |     PYBIND11_OBJECT_CVT(bytearray, object, PyByteArray_Check, PyByteArray_FromObject)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘pybind11::bytearray::operator std::string() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytearrayobject.h:28:59: note: in expansion of macro ‘_PyObject_CAST’
   28 | #define PyByteArray_AS_STRING(self) PyByteArray_AS_STRING(_PyObject_CAST(self))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1750:24: note: in expansion of macro ‘PyByteArray_AS_STRING’
 1750 |         char *buffer = PyByteArray_AS_STRING(m_ptr);
      |                        ^~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/bytearrayobject.h:34:57: note: in expansion of macro ‘_PyObject_CAST’
   34 | #define PyByteArray_GET_SIZE(self) PyByteArray_GET_SIZE(_PyObject_CAST(self))
      |                                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1751:24: note: in expansion of macro ‘PyByteArray_GET_SIZE’
 1751 |         ssize_t size = PyByteArray_GET_SIZE(m_ptr);
      |                        ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::none::none(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1763:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1763 |     PYBIND11_OBJECT(none, object, detail::PyNone_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1763:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1763 |     PYBIND11_OBJECT(none, object, detail::PyNone_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::none::none(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1763:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1763 |     PYBIND11_OBJECT(none, object, detail::PyNone_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1763:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1763 |     PYBIND11_OBJECT(none, object, detail::PyNone_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::ellipsis::ellipsis(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1769:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1769 |     PYBIND11_OBJECT(ellipsis, object, detail::PyEllipsis_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1769:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1769 |     PYBIND11_OBJECT(ellipsis, object, detail::PyEllipsis_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::ellipsis::ellipsis(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1769:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1769 |     PYBIND11_OBJECT(ellipsis, object, detail::PyEllipsis_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1769:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1769 |     PYBIND11_OBJECT(ellipsis, object, detail::PyEllipsis_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::bool_::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/boolobject.h:12:25: note: in expansion of macro ‘Py_IS_TYPE’
   12 | #define PyBool_Check(x) Py_IS_TYPE((x), &PyBool_Type)
      |                         ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyBool_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1775:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1775 |     PYBIND11_OBJECT_CVT(bool_, object, PyBool_Check, raw_bool)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::bool_::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/boolobject.h:12:25: note: in expansion of macro ‘Py_IS_TYPE’
   12 | #define PyBool_Check(x) Py_IS_TYPE((x), &PyBool_Type)
      |                         ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyBool_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1775:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1775 |     PYBIND11_OBJECT_CVT(bool_, object, PyBool_Check, raw_bool)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/boolobject.h:12:25: note: in expansion of macro ‘Py_IS_TYPE’
   12 | #define PyBool_Check(x) Py_IS_TYPE((x), &PyBool_Type)
      |                         ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyBool_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1775:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1775 |     PYBIND11_OBJECT_CVT(bool_, object, PyBool_Check, raw_bool)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::bool_::bool_()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/boolobject.h:21:18: note: in expansion of macro ‘_PyObject_CAST’
   21 | #define Py_False _PyObject_CAST(&_Py_FalseStruct)
      |                  ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1776:22: note: in expansion of macro ‘Py_False’
 1776 |     bool_() : object(Py_False, borrowed_t{}) {}
      |                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::bool_::bool_(bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/boolobject.h:22:17: note: in expansion of macro ‘_PyObject_CAST’
   22 | #define Py_True _PyObject_CAST(&_Py_TrueStruct)
      |                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1779:40: note: in expansion of macro ‘Py_True’
 1779 |     bool_(bool value) : object(value ? Py_True : Py_False, borrowed_t{}) {}
      |                                        ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/boolobject.h:21:18: note: in expansion of macro ‘_PyObject_CAST’
   21 | #define Py_False _PyObject_CAST(&_Py_FalseStruct)
      |                  ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1779:50: note: in expansion of macro ‘Py_False’
 1779 |     bool_(bool value) : object(value ? Py_True : Py_False, borrowed_t{}) {}
      |                                                  ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static PyObject* pybind11::bool_::raw_bool(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/boolobject.h:22:17: note: in expansion of macro ‘_PyObject_CAST’
   22 | #define Py_True _PyObject_CAST(&_Py_TrueStruct)
      |                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1790:36: note: in expansion of macro ‘Py_True’
 1790 |         return handle(value != 0 ? Py_True : Py_False).inc_ref().ptr();
      |                                    ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/boolobject.h:21:18: note: in expansion of macro ‘_PyObject_CAST’
   21 | #define Py_False _PyObject_CAST(&_Py_FalseStruct)
      |                  ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1790:46: note: in expansion of macro ‘Py_False’
 1790 |         return handle(value != 0 ? Py_True : Py_False).inc_ref().ptr();
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In function ‘Unsigned pybind11::detail::as_unsigned(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1803:38: warning: use of old-style cast to ‘long unsigned int’ [-Wold-style-cast]
 1803 |         return v == (unsigned long) -1 && PyErr_Occurred() ? (Unsigned) -1 : (Unsigned) v;
      |                                      ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1803:74: warning: use of old-style cast to ‘Unsigned’ [-Wold-style-cast]
 1803 |         return v == (unsigned long) -1 && PyErr_Occurred() ? (Unsigned) -1 : (Unsigned) v;
      |                                                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1803:89: warning: use of old-style cast to ‘Unsigned’ [-Wold-style-cast]
 1803 |         return v == (unsigned long) -1 && PyErr_Occurred() ? (Unsigned) -1 : (Unsigned) v;
      |                                                                                         ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1806:39: warning: use of old-style cast to ‘long long unsigned int’ [-Wold-style-cast]
 1806 |     return v == (unsigned long long) -1 && PyErr_Occurred() ? (Unsigned) -1 : (Unsigned) v;
      |                                       ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1806:75: warning: use of old-style cast to ‘Unsigned’ [-Wold-style-cast]
 1806 |     return v == (unsigned long long) -1 && PyErr_Occurred() ? (Unsigned) -1 : (Unsigned) v;
      |                                                                           ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1806:90: warning: use of old-style cast to ‘Unsigned’ [-Wold-style-cast]
 1806 |     return v == (unsigned long long) -1 && PyErr_Occurred() ? (Unsigned) -1 : (Unsigned) v;
      |                                                                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::int_::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/longobject.h:13:29: note: in expansion of macro ‘Py_TYPE’
   13 |         PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LONG_SUBCLASS)
      |                             ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:367:32: note: in expansion of macro ‘PyLong_Check’
  367 | #define PYBIND11_LONG_CHECK(o) PyLong_Check(o)
      |                                ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PYBIND11_LONG_CHECK’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1812:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1812 |     PYBIND11_OBJECT_CVT(int_, object, PYBIND11_LONG_CHECK, PyNumber_Long)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::int_::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/longobject.h:13:29: note: in expansion of macro ‘Py_TYPE’
   13 |         PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LONG_SUBCLASS)
      |                             ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:367:32: note: in expansion of macro ‘PyLong_Check’
  367 | #define PYBIND11_LONG_CHECK(o) PyLong_Check(o)
      |                                ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PYBIND11_LONG_CHECK’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1812:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1812 |     PYBIND11_OBJECT_CVT(int_, object, PYBIND11_LONG_CHECK, PyNumber_Long)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/longobject.h:13:29: note: in expansion of macro ‘Py_TYPE’
   13 |         PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LONG_SUBCLASS)
      |                             ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:367:32: note: in expansion of macro ‘PyLong_Check’
  367 | #define PYBIND11_LONG_CHECK(o) PyLong_Check(o)
      |                                ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PYBIND11_LONG_CHECK’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1812:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1812 |     PYBIND11_OBJECT_CVT(int_, object, PYBIND11_LONG_CHECK, PyNumber_Long)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::int_::int_(T)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1820:48: warning: use of old-style cast to ‘long int’ [-Wold-style-cast]
 1820 |                 m_ptr = PyLong_FromLong((long) value);
      |                                                ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1822:65: warning: use of old-style cast to ‘long unsigned int’ [-Wold-style-cast]
 1822 |                 m_ptr = PyLong_FromUnsignedLong((unsigned long) value);
      |                                                                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1826:57: warning: use of old-style cast to ‘long long int’ [-Wold-style-cast]
 1826 |                 m_ptr = PyLong_FromLongLong((long long) value);
      |                                                         ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1828:74: warning: use of old-style cast to ‘long long unsigned int’ [-Wold-style-cast]
 1828 |                 m_ptr = PyLong_FromUnsignedLongLong((unsigned long long) value);
      |                                                                          ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘pybind11::int_::operator T() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1840:69: warning: use of old-style cast to ‘T’ [-Wold-style-cast]
 1840 |                : sizeof(T) <= sizeof(long) ? (T) PyLong_AsLong(m_ptr)
      |                                                                     ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:368:57: warning: use of old-style cast to ‘T’ [-Wold-style-cast]
  368 | #define PYBIND11_LONG_AS_LONGLONG(o) PyLong_AsLongLong(o)
      |                                                         ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1841:50: note: in expansion of macro ‘PYBIND11_LONG_AS_LONGLONG’
 1841 |                                            : (T) PYBIND11_LONG_AS_LONGLONG(m_ptr);
      |                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::float_::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/floatobject.h:16:27: note: in expansion of macro ‘PyObject_TypeCheck’
   16 | #define PyFloat_Check(op) PyObject_TypeCheck(op, &PyFloat_Type)
      |                           ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyFloat_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1847:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1847 |     PYBIND11_OBJECT_CVT(float_, object, PyFloat_Check, PyNumber_Float)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::float_::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/floatobject.h:16:27: note: in expansion of macro ‘PyObject_TypeCheck’
   16 | #define PyFloat_Check(op) PyObject_TypeCheck(op, &PyFloat_Type)
      |                           ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyFloat_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1847:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1847 |     PYBIND11_OBJECT_CVT(float_, object, PyFloat_Check, PyNumber_Float)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/floatobject.h:16:27: note: in expansion of macro ‘PyObject_TypeCheck’
   16 | #define PyFloat_Check(op) PyObject_TypeCheck(op, &PyFloat_Type)
      |                           ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyFloat_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1847:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1847 |     PYBIND11_OBJECT_CVT(float_, object, PyFloat_Check, PyNumber_Float)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::float_::float_(float)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1850:62: warning: use of old-style cast to ‘double’ [-Wold-style-cast]
 1850 |     float_(float value) : object(PyFloat_FromDouble((double) value), stolen_t{}) {
      |                                                              ^~~~~
      |                                                     --------------
      |                                                     static_cast<double> ( value)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::float_::float_(double)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1856:68: warning: use of old-style cast to ‘double’ [-Wold-style-cast]
 1856 |     float_(double value = .0) : object(PyFloat_FromDouble((double) value), stolen_t{}) {
      |                                                                    ^~~~~
      |                                                           --------------
      |                                                           static_cast<double> ( value)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1856:59: warning: useless cast to type ‘double’ [-Wuseless-cast]
 1856 |     float_(double value = .0) : object(PyFloat_FromDouble((double) value), stolen_t{}) {
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘pybind11::float_::operator float() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1862:67: warning: use of old-style cast to ‘float’ [-Wold-style-cast]
 1862 |     operator float() const { return (float) PyFloat_AsDouble(m_ptr); }
      |                                                                   ^
      |                                     -------
      |                                     static_cast<float> (           )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘pybind11::float_::operator double() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1864:69: warning: use of old-style cast to ‘double’ [-Wold-style-cast]
 1864 |     operator double() const { return (double) PyFloat_AsDouble(m_ptr); }
      |                                                                     ^
      |                                      --------
      |                                      static_cast<double> (           )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1864:38: warning: useless cast to type ‘double’ [-Wuseless-cast]
 1864 |     operator double() const { return (double) PyFloat_AsDouble(m_ptr); }
      |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::weakref::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:15:32: note: in expansion of macro ‘PyObject_TypeCheck’
   15 | #define PyWeakref_CheckRef(op) PyObject_TypeCheck((op), &_PyWeakref_RefType)
      |                                ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:23:10: note: in expansion of macro ‘PyWeakref_CheckRef’
   23 |         (PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))
      |          ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyWeakref_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1398:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1398 |     PYBIND11_OBJECT_CVT(Name, Parent, CheckFun, ConvertFun)                                       \
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1869:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT_DEFAULT’
 1869 |     PYBIND11_OBJECT_CVT_DEFAULT(weakref, object, PyWeakref_Check, raw_weakref)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:19:10: note: in expansion of macro ‘Py_IS_TYPE’
   19 |         (Py_IS_TYPE((op), &_PyWeakref_ProxyType) \
      |          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:23:36: note: in expansion of macro ‘PyWeakref_CheckProxy’
   23 |         (PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))
      |                                    ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyWeakref_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1398:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1398 |     PYBIND11_OBJECT_CVT(Name, Parent, CheckFun, ConvertFun)                                       \
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1869:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT_DEFAULT’
 1869 |     PYBIND11_OBJECT_CVT_DEFAULT(weakref, object, PyWeakref_Check, raw_weakref)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:20:13: note: in expansion of macro ‘Py_IS_TYPE’
   20 |          || Py_IS_TYPE((op), &_PyWeakref_CallableProxyType))
      |             ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:23:36: note: in expansion of macro ‘PyWeakref_CheckProxy’
   23 |         (PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))
      |                                    ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyWeakref_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1398:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1398 |     PYBIND11_OBJECT_CVT(Name, Parent, CheckFun, ConvertFun)                                       \
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1869:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT_DEFAULT’
 1869 |     PYBIND11_OBJECT_CVT_DEFAULT(weakref, object, PyWeakref_Check, raw_weakref)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::weakref::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:15:32: note: in expansion of macro ‘PyObject_TypeCheck’
   15 | #define PyWeakref_CheckRef(op) PyObject_TypeCheck((op), &_PyWeakref_RefType)
      |                                ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:23:10: note: in expansion of macro ‘PyWeakref_CheckRef’
   23 |         (PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))
      |          ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyWeakref_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1398:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1398 |     PYBIND11_OBJECT_CVT(Name, Parent, CheckFun, ConvertFun)                                       \
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1869:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT_DEFAULT’
 1869 |     PYBIND11_OBJECT_CVT_DEFAULT(weakref, object, PyWeakref_Check, raw_weakref)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:15:32: note: in expansion of macro ‘PyObject_TypeCheck’
   15 | #define PyWeakref_CheckRef(op) PyObject_TypeCheck((op), &_PyWeakref_RefType)
      |                                ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:23:10: note: in expansion of macro ‘PyWeakref_CheckRef’
   23 |         (PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))
      |          ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyWeakref_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1398:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1398 |     PYBIND11_OBJECT_CVT(Name, Parent, CheckFun, ConvertFun)                                       \
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1869:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT_DEFAULT’
 1869 |     PYBIND11_OBJECT_CVT_DEFAULT(weakref, object, PyWeakref_Check, raw_weakref)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:19:10: note: in expansion of macro ‘Py_IS_TYPE’
   19 |         (Py_IS_TYPE((op), &_PyWeakref_ProxyType) \
      |          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:23:36: note: in expansion of macro ‘PyWeakref_CheckProxy’
   23 |         (PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))
      |                                    ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyWeakref_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1398:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1398 |     PYBIND11_OBJECT_CVT(Name, Parent, CheckFun, ConvertFun)                                       \
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1869:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT_DEFAULT’
 1869 |     PYBIND11_OBJECT_CVT_DEFAULT(weakref, object, PyWeakref_Check, raw_weakref)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:19:10: note: in expansion of macro ‘Py_IS_TYPE’
   19 |         (Py_IS_TYPE((op), &_PyWeakref_ProxyType) \
      |          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:23:36: note: in expansion of macro ‘PyWeakref_CheckProxy’
   23 |         (PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))
      |                                    ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyWeakref_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1398:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1398 |     PYBIND11_OBJECT_CVT(Name, Parent, CheckFun, ConvertFun)                                       \
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1869:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT_DEFAULT’
 1869 |     PYBIND11_OBJECT_CVT_DEFAULT(weakref, object, PyWeakref_Check, raw_weakref)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:20:13: note: in expansion of macro ‘Py_IS_TYPE’
   20 |          || Py_IS_TYPE((op), &_PyWeakref_CallableProxyType))
      |             ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:23:36: note: in expansion of macro ‘PyWeakref_CheckProxy’
   23 |         (PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))
      |                                    ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyWeakref_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1398:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1398 |     PYBIND11_OBJECT_CVT(Name, Parent, CheckFun, ConvertFun)                                       \
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1869:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT_DEFAULT’
 1869 |     PYBIND11_OBJECT_CVT_DEFAULT(weakref, object, PyWeakref_Check, raw_weakref)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:20:13: note: in expansion of macro ‘Py_IS_TYPE’
   20 |          || Py_IS_TYPE((op), &_PyWeakref_CallableProxyType))
      |             ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/weakrefobject.h:23:36: note: in expansion of macro ‘PyWeakref_CheckProxy’
   23 |         (PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))
      |                                    ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyWeakref_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1398:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 1398 |     PYBIND11_OBJECT_CVT(Name, Parent, CheckFun, ConvertFun)                                       \
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1869:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT_DEFAULT’
 1869 |     PYBIND11_OBJECT_CVT_DEFAULT(weakref, object, PyWeakref_Check, raw_weakref)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::slice::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:31:27: note: in expansion of macro ‘Py_IS_TYPE’
   31 | #define PySlice_Check(op) Py_IS_TYPE((op), &PySlice_Type)
      |                           ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PySlice_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1886:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1886 |     PYBIND11_OBJECT_DEFAULT(slice, object, PySlice_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::slice::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:31:27: note: in expansion of macro ‘Py_IS_TYPE’
   31 | #define PySlice_Check(op) Py_IS_TYPE((op), &PySlice_Type)
      |                           ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PySlice_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1886:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1886 |     PYBIND11_OBJECT_DEFAULT(slice, object, PySlice_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:31:27: note: in expansion of macro ‘Py_IS_TYPE’
   31 | #define PySlice_Check(op) Py_IS_TYPE((op), &PySlice_Type)
      |                           ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PySlice_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1886:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1886 |     PYBIND11_OBJECT_DEFAULT(slice, object, PySlice_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::slice::slice(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1886:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1886 |     PYBIND11_OBJECT_DEFAULT(slice, object, PySlice_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1886:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1886 |     PYBIND11_OBJECT_DEFAULT(slice, object, PySlice_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::slice::slice(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1886:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1886 |     PYBIND11_OBJECT_DEFAULT(slice, object, PySlice_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1886:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1886 |     PYBIND11_OBJECT_DEFAULT(slice, object, PySlice_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:77:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::slice::compute(pybind11::size_t, pybind11::size_t*, pybind11::size_t*, pybind11::size_t*, pybind11::size_t*) const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1904:63: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
 1904 |         return PySlice_GetIndicesEx((PYBIND11_SLICE_OBJECT *) m_ptr,
      |                                                               ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:51:21: note: in definition of macro ‘PySlice_GetIndicesEx’
   51 |     PySlice_Unpack((slice), (start), (stop), (step)) < 0 ?                  \
      |                     ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1906:49: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t*’ {aka ‘long int*’} [-Wold-style-cast]
 1906 |                                     (ssize_t *) start,
      |                                                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:51:30: note: in definition of macro ‘PySlice_GetIndicesEx’
   51 |     PySlice_Unpack((slice), (start), (stop), (step)) < 0 ?                  \
      |                              ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1907:49: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t*’ {aka ‘long int*’} [-Wold-style-cast]
 1907 |                                     (ssize_t *) stop,
      |                                                 ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:51:39: note: in definition of macro ‘PySlice_GetIndicesEx’
   51 |     PySlice_Unpack((slice), (start), (stop), (step)) < 0 ?                  \
      |                                       ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1908:49: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t*’ {aka ‘long int*’} [-Wold-style-cast]
 1908 |                                     (ssize_t *) step,
      |                                                 ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:51:47: note: in definition of macro ‘PySlice_GetIndicesEx’
   51 |     PySlice_Unpack((slice), (start), (stop), (step)) < 0 ?                  \
      |                                               ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1909:49: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t*’ {aka ‘long int*’} [-Wold-style-cast]
 1909 |                                     (ssize_t *) slicelength)
      |                                                 ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:52:9: note: in definition of macro ‘PySlice_GetIndicesEx’
   52 |     ((*(slicelen) = 0), -1) :                                               \
      |         ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1909:49: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t*’ {aka ‘long int*’} [-Wold-style-cast]
 1909 |                                     (ssize_t *) slicelength)
      |                                                 ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:53:9: note: in definition of macro ‘PySlice_GetIndicesEx’
   53 |     ((*(slicelen) = PySlice_AdjustIndices((length), (start), (stop), *(step))), \
      |         ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1905:47: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t’ {aka ‘long int’} [-Wold-style-cast]
 1905 |                                     (ssize_t) length,
      |                                               ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:53:44: note: in definition of macro ‘PySlice_GetIndicesEx’
   53 |     ((*(slicelen) = PySlice_AdjustIndices((length), (start), (stop), *(step))), \
      |                                            ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1906:49: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t*’ {aka ‘long int*’} [-Wold-style-cast]
 1906 |                                     (ssize_t *) start,
      |                                                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:53:54: note: in definition of macro ‘PySlice_GetIndicesEx’
   53 |     ((*(slicelen) = PySlice_AdjustIndices((length), (start), (stop), *(step))), \
      |                                                      ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1907:49: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t*’ {aka ‘long int*’} [-Wold-style-cast]
 1907 |                                     (ssize_t *) stop,
      |                                                 ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:53:63: note: in definition of macro ‘PySlice_GetIndicesEx’
   53 |     ((*(slicelen) = PySlice_AdjustIndices((length), (start), (stop), *(step))), \
      |                                                               ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1908:49: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t*’ {aka ‘long int*’} [-Wold-style-cast]
 1908 |                                     (ssize_t *) step,
      |                                                 ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:53:72: note: in definition of macro ‘PySlice_GetIndicesEx’
   53 |     ((*(slicelen) = PySlice_AdjustIndices((length), (start), (stop), *(step))), \
      |                                                                        ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::slice::compute(pybind11::ssize_t, pybind11::ssize_t*, pybind11::ssize_t*, pybind11::ssize_t*, pybind11::ssize_t*) const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1915:46: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
 1915 |                    (PYBIND11_SLICE_OBJECT *) m_ptr, length, start, stop, step, slicelength)
      |                                              ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/sliceobject.h:51:21: note: in definition of macro ‘PySlice_GetIndicesEx’
   51 |     PySlice_Unpack((slice), (start), (stop), (step)) < 0 ?                  \
      |                     ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::capsule::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pycapsule.h:25:34: note: in expansion of macro ‘Py_IS_TYPE’
   25 | #define PyCapsule_CheckExact(op) Py_IS_TYPE((op), &PyCapsule_Type)
      |                                  ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyCapsule_CheckExact’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1928:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1928 |     PYBIND11_OBJECT_DEFAULT(capsule, object, PyCapsule_CheckExact)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::capsule::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pycapsule.h:25:34: note: in expansion of macro ‘Py_IS_TYPE’
   25 | #define PyCapsule_CheckExact(op) Py_IS_TYPE((op), &PyCapsule_Type)
      |                                  ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyCapsule_CheckExact’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1928:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1928 |     PYBIND11_OBJECT_DEFAULT(capsule, object, PyCapsule_CheckExact)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pycapsule.h:25:34: note: in expansion of macro ‘Py_IS_TYPE’
   25 | #define PyCapsule_CheckExact(op) Py_IS_TYPE((op), &PyCapsule_Type)
      |                                  ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyCapsule_CheckExact’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1928:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1928 |     PYBIND11_OBJECT_DEFAULT(capsule, object, PyCapsule_CheckExact)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1928:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1928 |     PYBIND11_OBJECT_DEFAULT(capsule, object, PyCapsule_CheckExact)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1928:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1928 |     PYBIND11_OBJECT_DEFAULT(capsule, object, PyCapsule_CheckExact)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1928:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1928 |     PYBIND11_OBJECT_DEFAULT(capsule, object, PyCapsule_CheckExact)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1928:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1928 |     PYBIND11_OBJECT_DEFAULT(capsule, object, PyCapsule_CheckExact)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(const void*, const char*, PyCapsule_Destructor)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1935:43: warning: declaration of ‘destructor’ shadows a global declaration [-Wshadow]
 1935 |                      PyCapsule_Destructor destructor = nullptr)
      |                      ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:321:16: note: shadowed declaration is here
  321 | typedef void (*destructor)(PyObject *);
      |                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(const void*, const char*, PyCapsule_Destructor)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1935:43: warning: declaration of ‘destructor’ shadows a global declaration [-Wshadow]
 1935 |                      PyCapsule_Destructor destructor = nullptr)
      |                      ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:321:16: note: shadowed declaration is here
  321 | typedef void (*destructor)(PyObject *);
      |                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(const void*, PyCapsule_Destructor)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1943:53: warning: declaration of ‘destructor’ shadows a global declaration [-Wshadow]
 1943 |     capsule(const void *value, PyCapsule_Destructor destructor)
      |                                ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:321:16: note: shadowed declaration is here
  321 | typedef void (*destructor)(PyObject *);
      |                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(const void*, PyCapsule_Destructor)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1943:53: warning: declaration of ‘destructor’ shadows a global declaration [-Wshadow]
 1943 |     capsule(const void *value, PyCapsule_Destructor destructor)
      |                                ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:321:16: note: shadowed declaration is here
  321 | typedef void (*destructor)(PyObject *);
      |                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(const void*, void (*)(void*))’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1951:39: warning: declaration of ‘destructor’ shadows a global declaration [-Wshadow]
 1951 |     capsule(const void *value, void (*destructor)(void *)) {
      |                                ~~~~~~~^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:321:16: note: shadowed declaration is here
  321 | typedef void (*destructor)(PyObject *);
      |                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(const void*, void (*)(void*))’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1951:39: warning: declaration of ‘destructor’ shadows a global declaration [-Wshadow]
 1951 |     capsule(const void *value, void (*destructor)(void *)) {
      |                                ~~~~~~~^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:321:16: note: shadowed declaration is here
  321 | typedef void (*destructor)(PyObject *);
      |                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(const void*, const char*, void (*)(void*))’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1955:57: warning: declaration of ‘destructor’ shadows a global declaration [-Wshadow]
 1955 |     capsule(const void *value, const char *name, void (*destructor)(void *)) {
      |                                                  ~~~~~~~^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:321:16: note: shadowed declaration is here
  321 | typedef void (*destructor)(PyObject *);
      |                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(const void*, const char*, void (*)(void*))’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1955:57: warning: declaration of ‘destructor’ shadows a global declaration [-Wshadow]
 1955 |     capsule(const void *value, const char *name, void (*destructor)(void *)) {
      |                                                  ~~~~~~~^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:321:16: note: shadowed declaration is here
  321 | typedef void (*destructor)(PyObject *);
      |                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(void (*)())’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1960:31: warning: casting between pointer-to-function and pointer-to-object is conditionally-supported [-Wconditionally-supported]
 1960 |         m_ptr = PyCapsule_New(reinterpret_cast<void *>(destructor), nullptr, [](PyObject *o) {
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1962:18: warning: declaration of ‘auto destructor’ shadows a parameter [-Wshadow]
 1962 |             auto destructor = reinterpret_cast<void (*)()>(PyCapsule_GetPointer(o, name));
      |                  ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1959:29: note: shadowed declaration is here
 1959 |     explicit capsule(void (*destructor)()) {
      |                      ~~~~~~~^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1962:31: warning: casting between pointer-to-function and pointer-to-object is conditionally-supported [-Wconditionally-supported]
 1962 |             auto destructor = reinterpret_cast<void (*)()>(PyCapsule_GetPointer(o, name));
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(void (*)())’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1959:29: warning: declaration of ‘destructor’ shadows a global declaration [-Wshadow]
 1959 |     explicit capsule(void (*destructor)()) {
      |                      ~~~~~~~^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:321:16: note: shadowed declaration is here
  321 | typedef void (*destructor)(PyObject *);
      |                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::capsule::capsule(void (*)())’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1959:29: warning: declaration of ‘destructor’ shadows a global declaration [-Wshadow]
 1959 |     explicit capsule(void (*destructor)()) {
      |                      ~~~~~~~^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:321:16: note: shadowed declaration is here
  321 | typedef void (*destructor)(PyObject *);
      |                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2031:18: warning: declaration of ‘auto destructor’ shadows a parameter [-Wshadow]
 2031 |             auto destructor = reinterpret_cast<void (*)(void *)>(PyCapsule_GetContext(o));
      |                  ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2027:53: note: shadowed declaration is here
 2027 |                                              void (*destructor)(void *)) {
      |                                              ~~~~~~~^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2031:31: warning: casting between pointer-to-function and pointer-to-object is conditionally-supported [-Wconditionally-supported]
 2031 |             auto destructor = reinterpret_cast<void (*)(void *)>(PyCapsule_GetContext(o));
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2035:25: warning: declaration of ‘const char* name’ shadows a parameter [-Wshadow]
 2035 |             const char *name = get_name_in_error_scope(o);
      |                         ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2026:58: note: shadowed declaration is here
 2026 |                                              const char *name,
      |                                              ~~~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘void pybind11::capsule::initialize_with_void_ptr_destructor(const void*, const char*, void (*)(void*))’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2046:51: warning: casting between pointer-to-function and pointer-to-object is conditionally-supported [-Wconditionally-supported]
 2046 |         if (!m_ptr || PyCapsule_SetContext(m_ptr, reinterpret_cast<void *>(destructor)) != 0) {
      |                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::tuple::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyTuple_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2054:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2054 |     PYBIND11_OBJECT_CVT(tuple, object, PyTuple_Check, PySequence_Tuple)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::tuple::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyTuple_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2054:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2054 |     PYBIND11_OBJECT_CVT(tuple, object, PyTuple_Check, PySequence_Tuple)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyTuple_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2054:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2054 |     PYBIND11_OBJECT_CVT(tuple, object, PyTuple_Check, PySequence_Tuple)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘pybind11::size_t pybind11::tuple::size() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2063:61: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
 2063 |     size_t size() const { return (size_t) PyTuple_Size(m_ptr); }
      |                                                             ^
      |                                  --------
      |                                  static_cast<size_t> (       )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘pybind11::detail::tuple_iterator pybind11::tuple::end() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:26:47: note: in expansion of macro ‘_PyObject_CAST’
   26 | #define PyTuple_GET_SIZE(op) PyTuple_GET_SIZE(_PyObject_CAST(op))
      |                                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2071:57: note: in expansion of macro ‘PyTuple_GET_SIZE’
 2071 |     detail::tuple_iterator end() const { return {*this, PyTuple_GET_SIZE(m_ptr)}; }
      |                                                         ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::dict::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/dictobject.h:18:38: note: in expansion of macro ‘Py_TYPE’
   18 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyDict_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2084:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2084 |     PYBIND11_OBJECT_CVT(dict, object, PyDict_Check, raw_dict)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::dict::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/dictobject.h:18:38: note: in expansion of macro ‘Py_TYPE’
   18 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyDict_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2084:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2084 |     PYBIND11_OBJECT_CVT(dict, object, PyDict_Check, raw_dict)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/dictobject.h:18:38: note: in expansion of macro ‘Py_TYPE’
   18 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyDict_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2084:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2084 |     PYBIND11_OBJECT_CVT(dict, object, PyDict_Check, raw_dict)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘pybind11::size_t pybind11::dict::size() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2097:60: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
 2097 |     size_t size() const { return (size_t) PyDict_Size(m_ptr); }
      |                                                            ^
      |                                  --------
      |                                  static_cast<size_t> (      )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘constexpr pybind11::detail::iterator_policies::dict_readonly::dict_readonly()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1280:5: warning: ‘pybind11::detail::iterator_policies::dict_readonly::obj’ should be initialized in the member initialization list [-Weffc++]
 1280 |     dict_readonly() = default;
      |     ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static PyObject* pybind11::dict::raw_dict(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/dictobject.h:18:38: note: in expansion of macro ‘Py_TYPE’
   18 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2114:13: note: in expansion of macro ‘PyDict_Check’
 2114 |         if (PyDict_Check(op)) {
      |             ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/dictobject.h:18:38: note: in expansion of macro ‘Py_TYPE’
   18 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2114:13: note: in expansion of macro ‘PyDict_Check’
 2114 |         if (PyDict_Check(op)) {
      |             ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2117:59: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
 2117 |         return PyObject_CallFunctionObjArgs((PyObject *) &PyDict_Type, op, nullptr);
      |                                                           ^~~~~~~~~~~
      |                                             -------------------------
      |                                             reinterpret_cast<PyObject *> ( &PyDict_Type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::sequence::sequence(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2123:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2123 |     PYBIND11_OBJECT_DEFAULT(sequence, object, PySequence_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2123:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2123 |     PYBIND11_OBJECT_DEFAULT(sequence, object, PySequence_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::sequence::sequence(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2123:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2123 |     PYBIND11_OBJECT_DEFAULT(sequence, object, PySequence_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2123:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2123 |     PYBIND11_OBJECT_DEFAULT(sequence, object, PySequence_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘pybind11::size_t pybind11::sequence::size() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2129:25: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
 2129 |         return (size_t) result;
      |                         ^~~~~~
      |                ---------------
      |                static_cast<size_t> ( result)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::list::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:25: note: in expansion of macro ‘Py_TYPE’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyList_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2143:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2143 |     PYBIND11_OBJECT_CVT(list, object, PyList_Check, PySequence_List)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::list::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:25: note: in expansion of macro ‘Py_TYPE’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyList_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2143:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2143 |     PYBIND11_OBJECT_CVT(list, object, PyList_Check, PySequence_List)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/listobject.h:25:25: note: in expansion of macro ‘Py_TYPE’
   25 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyList_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2143:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2143 |     PYBIND11_OBJECT_CVT(list, object, PyList_Check, PySequence_List)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘pybind11::size_t pybind11::list::size() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2152:60: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
 2152 |     size_t size() const { return (size_t) PyList_Size(m_ptr); }
      |                                                            ^
      |                                  --------
      |                                  static_cast<size_t> (      )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘pybind11::detail::list_iterator pybind11::list::end() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:37:45: note: in expansion of macro ‘_PyObject_CAST’
   37 | #define PyList_GET_SIZE(op) PyList_GET_SIZE(_PyObject_CAST(op))
      |                                             ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2160:56: note: in expansion of macro ‘PyList_GET_SIZE’
 2160 |     detail::list_iterator end() const { return {*this, PyList_GET_SIZE(m_ptr)}; }
      |                                                        ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::args::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyTuple_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2181:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2181 |     PYBIND11_OBJECT_DEFAULT(args, tuple, PyTuple_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::args::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyTuple_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2181:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2181 |     PYBIND11_OBJECT_DEFAULT(args, tuple, PyTuple_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyTuple_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2181:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2181 |     PYBIND11_OBJECT_DEFAULT(args, tuple, PyTuple_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::args::args(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2181:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2181 |     PYBIND11_OBJECT_DEFAULT(args, tuple, PyTuple_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2181:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2181 |     PYBIND11_OBJECT_DEFAULT(args, tuple, PyTuple_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::args::args(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2181:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2181 |     PYBIND11_OBJECT_DEFAULT(args, tuple, PyTuple_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2181:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2181 |     PYBIND11_OBJECT_DEFAULT(args, tuple, PyTuple_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::kwargs::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/dictobject.h:18:38: note: in expansion of macro ‘Py_TYPE’
   18 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyDict_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2184:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2184 |     PYBIND11_OBJECT_DEFAULT(kwargs, dict, PyDict_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::kwargs::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/dictobject.h:18:38: note: in expansion of macro ‘Py_TYPE’
   18 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyDict_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2184:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2184 |     PYBIND11_OBJECT_DEFAULT(kwargs, dict, PyDict_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/dictobject.h:18:38: note: in expansion of macro ‘Py_TYPE’
   18 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyDict_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2184:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2184 |     PYBIND11_OBJECT_DEFAULT(kwargs, dict, PyDict_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::kwargs::kwargs(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2184:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2184 |     PYBIND11_OBJECT_DEFAULT(kwargs, dict, PyDict_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2184:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2184 |     PYBIND11_OBJECT_DEFAULT(kwargs, dict, PyDict_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::kwargs::kwargs(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2184:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2184 |     PYBIND11_OBJECT_DEFAULT(kwargs, dict, PyDict_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2184:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2184 |     PYBIND11_OBJECT_DEFAULT(kwargs, dict, PyDict_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::anyset::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:31:6: note: in expansion of macro ‘Py_IS_TYPE’
   31 |     (Py_IS_TYPE((ob), &PySet_Type) || Py_IS_TYPE((ob), &PyFrozenSet_Type) || \
      |      ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyAnySet_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:31:39: note: in expansion of macro ‘Py_IS_TYPE’
   31 |     (Py_IS_TYPE((ob), &PySet_Type) || Py_IS_TYPE((ob), &PyFrozenSet_Type) || \
      |                                       ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyAnySet_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:32:24: note: in expansion of macro ‘Py_TYPE’
   32 |       PyType_IsSubtype(Py_TYPE(ob), &PySet_Type) || \
      |                        ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyAnySet_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:33:24: note: in expansion of macro ‘Py_TYPE’
   33 |       PyType_IsSubtype(Py_TYPE(ob), &PyFrozenSet_Type))
      |                        ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyAnySet_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::anyset::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:31:6: note: in expansion of macro ‘Py_IS_TYPE’
   31 |     (Py_IS_TYPE((ob), &PySet_Type) || Py_IS_TYPE((ob), &PyFrozenSet_Type) || \
      |      ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyAnySet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:31:6: note: in expansion of macro ‘Py_IS_TYPE’
   31 |     (Py_IS_TYPE((ob), &PySet_Type) || Py_IS_TYPE((ob), &PyFrozenSet_Type) || \
      |      ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyAnySet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:31:39: note: in expansion of macro ‘Py_IS_TYPE’
   31 |     (Py_IS_TYPE((ob), &PySet_Type) || Py_IS_TYPE((ob), &PyFrozenSet_Type) || \
      |                                       ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyAnySet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:31:39: note: in expansion of macro ‘Py_IS_TYPE’
   31 |     (Py_IS_TYPE((ob), &PySet_Type) || Py_IS_TYPE((ob), &PyFrozenSet_Type) || \
      |                                       ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyAnySet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:32:24: note: in expansion of macro ‘Py_TYPE’
   32 |       PyType_IsSubtype(Py_TYPE(ob), &PySet_Type) || \
      |                        ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyAnySet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:32:24: note: in expansion of macro ‘Py_TYPE’
   32 |       PyType_IsSubtype(Py_TYPE(ob), &PySet_Type) || \
      |                        ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyAnySet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:33:24: note: in expansion of macro ‘Py_TYPE’
   33 |       PyType_IsSubtype(Py_TYPE(ob), &PyFrozenSet_Type))
      |                        ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyAnySet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:33:24: note: in expansion of macro ‘Py_TYPE’
   33 |       PyType_IsSubtype(Py_TYPE(ob), &PyFrozenSet_Type))
      |                        ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyAnySet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::anyset::anyset(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::anyset::anyset(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2189:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 2189 |     PYBIND11_OBJECT(anyset, object, PyAnySet_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::set::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:37:6: note: in expansion of macro ‘Py_IS_TYPE’
   37 |     (Py_IS_TYPE((ob), &PySet_Type) || \
      |      ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PySet_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2204:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2204 |     PYBIND11_OBJECT_CVT(set, anyset, PySet_Check, PySet_New)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:38:22: note: in expansion of macro ‘Py_TYPE’
   38 |     PyType_IsSubtype(Py_TYPE(ob), &PySet_Type))
      |                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PySet_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2204:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2204 |     PYBIND11_OBJECT_CVT(set, anyset, PySet_Check, PySet_New)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::set::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:37:6: note: in expansion of macro ‘Py_IS_TYPE’
   37 |     (Py_IS_TYPE((ob), &PySet_Type) || \
      |      ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PySet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2204:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2204 |     PYBIND11_OBJECT_CVT(set, anyset, PySet_Check, PySet_New)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:37:6: note: in expansion of macro ‘Py_IS_TYPE’
   37 |     (Py_IS_TYPE((ob), &PySet_Type) || \
      |      ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PySet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2204:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2204 |     PYBIND11_OBJECT_CVT(set, anyset, PySet_Check, PySet_New)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:38:22: note: in expansion of macro ‘Py_TYPE’
   38 |     PyType_IsSubtype(Py_TYPE(ob), &PySet_Type))
      |                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PySet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2204:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2204 |     PYBIND11_OBJECT_CVT(set, anyset, PySet_Check, PySet_New)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:38:22: note: in expansion of macro ‘Py_TYPE’
   38 |     PyType_IsSubtype(Py_TYPE(ob), &PySet_Type))
      |                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PySet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2204:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2204 |     PYBIND11_OBJECT_CVT(set, anyset, PySet_Check, PySet_New)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::frozenset::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:25:6: note: in expansion of macro ‘Py_IS_TYPE’
   25 |     (Py_IS_TYPE((ob), &PyFrozenSet_Type) || \
      |      ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyFrozenSet_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2219:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2219 |     PYBIND11_OBJECT_CVT(frozenset, anyset, PyFrozenSet_Check, PyFrozenSet_New)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:26:24: note: in expansion of macro ‘Py_TYPE’
   26 |       PyType_IsSubtype(Py_TYPE(ob), &PyFrozenSet_Type))
      |                        ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyFrozenSet_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2219:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2219 |     PYBIND11_OBJECT_CVT(frozenset, anyset, PyFrozenSet_Check, PyFrozenSet_New)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::frozenset::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:25:6: note: in expansion of macro ‘Py_IS_TYPE’
   25 |     (Py_IS_TYPE((ob), &PyFrozenSet_Type) || \
      |      ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyFrozenSet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2219:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2219 |     PYBIND11_OBJECT_CVT(frozenset, anyset, PyFrozenSet_Check, PyFrozenSet_New)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:25:6: note: in expansion of macro ‘Py_IS_TYPE’
   25 |     (Py_IS_TYPE((ob), &PyFrozenSet_Type) || \
      |      ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyFrozenSet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2219:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2219 |     PYBIND11_OBJECT_CVT(frozenset, anyset, PyFrozenSet_Check, PyFrozenSet_New)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:26:24: note: in expansion of macro ‘Py_TYPE’
   26 |       PyType_IsSubtype(Py_TYPE(ob), &PyFrozenSet_Type))
      |                        ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyFrozenSet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2219:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2219 |     PYBIND11_OBJECT_CVT(frozenset, anyset, PyFrozenSet_Check, PyFrozenSet_New)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/setobject.h:26:24: note: in expansion of macro ‘Py_TYPE’
   26 |       PyType_IsSubtype(Py_TYPE(ob), &PyFrozenSet_Type))
      |                        ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyFrozenSet_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2219:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2219 |     PYBIND11_OBJECT_CVT(frozenset, anyset, PyFrozenSet_Check, PyFrozenSet_New)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::function::function(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2224:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2224 |     PYBIND11_OBJECT_DEFAULT(function, object, PyCallable_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2224:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2224 |     PYBIND11_OBJECT_DEFAULT(function, object, PyCallable_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::function::function(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2224:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2224 |     PYBIND11_OBJECT_DEFAULT(function, object, PyCallable_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2224:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2224 |     PYBIND11_OBJECT_DEFAULT(function, object, PyCallable_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘pybind11::handle pybind11::function::cpp_function() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/methodobject.h:17:31: note: in expansion of macro ‘PyObject_TypeCheck’
   17 | #define PyCFunction_Check(op) PyObject_TypeCheck((op), &PyCFunction_Type)
      |                               ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2227:20: note: in expansion of macro ‘PyCFunction_Check’
 2227 |         if (fun && PyCFunction_Check(fun.ptr())) {
      |                    ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/methodobject.h:17:31: note: in expansion of macro ‘PyObject_TypeCheck’
   17 | #define PyCFunction_Check(op) PyObject_TypeCheck((op), &PyCFunction_Type)
      |                               ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2227:20: note: in expansion of macro ‘PyCFunction_Check’
 2227 |         if (fun && PyCFunction_Check(fun.ptr())) {
      |                    ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::function::is_cpp_function() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2232:63: warning: use of old-style cast to ‘bool’ [-Wold-style-cast]
 2232 |     bool is_cpp_function() const { return (bool) cpp_function(); }
      |                                                               ^
      |                                           ------
      |                                           static_cast<bool> (  )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::buffer::buffer(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2242:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2242 |     PYBIND11_OBJECT_DEFAULT(buffer, object, PyObject_CheckBuffer)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2242:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2242 |     PYBIND11_OBJECT_DEFAULT(buffer, object, PyObject_CheckBuffer)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In constructor ‘pybind11::buffer::buffer(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2242:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2242 |     PYBIND11_OBJECT_DEFAULT(buffer, object, PyObject_CheckBuffer)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2242:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 2242 |     PYBIND11_OBJECT_DEFAULT(buffer, object, PyObject_CheckBuffer)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In member function ‘bool pybind11::memoryview::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/memoryobject.h:11:32: note: in expansion of macro ‘Py_IS_TYPE’
   11 | #define PyMemoryView_Check(op) Py_IS_TYPE((op), &PyMemoryView_Type)
      |                                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyMemoryView_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2260:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2260 |     PYBIND11_OBJECT_CVT(memoryview, object, PyMemoryView_Check, PyMemoryView_FromObject)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In static member function ‘static bool pybind11::memoryview::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/memoryobject.h:11:32: note: in expansion of macro ‘Py_IS_TYPE’
   11 | #define PyMemoryView_Check(op) Py_IS_TYPE((op), &PyMemoryView_Type)
      |                                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyMemoryView_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2260:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2260 |     PYBIND11_OBJECT_CVT(memoryview, object, PyMemoryView_Check, PyMemoryView_FromObject)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/memoryobject.h:11:32: note: in expansion of macro ‘Py_IS_TYPE’
   11 | #define PyMemoryView_Check(op) Py_IS_TYPE((op), &PyMemoryView_Type)
      |                                ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyMemoryView_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1383:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1383 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2260:5: note: in expansion of macro ‘PYBIND11_OBJECT_CVT’
 2260 |     PYBIND11_OBJECT_CVT(memoryview, object, PyMemoryView_Check, PyMemoryView_FromObject)
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In function ‘pybind11::size_t pybind11::len(handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2421:21: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
 2421 |     return (size_t) result;
      |                     ^~~~~~
      |            ---------------
      |            static_cast<size_t> ( result)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In function ‘pybind11::size_t pybind11::len_hint(handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2434:21: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
 2434 |     return (size_t) result;
      |                     ^~~~~~
      |            ---------------
      |            static_cast<size_t> ( result)
In file included from /usr/include/c++/12/bits/stl_pair.h:60,
                 from /usr/include/c++/12/bits/stl_algobase.h:64,
                 from /usr/include/c++/12/bits/specfun.h:45,
                 from /usr/include/c++/12/cmath:1935,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:36:
/usr/include/c++/12/type_traits: In instantiation of ‘constexpr bool std::__call_is_nt(__invoke_other) [with _Fn = const pybind11::detail::override_hash&; _Args = {const pair<const _object*, const char*>&}]’:
/usr/include/c++/12/type_traits:2991:34:   required from ‘struct std::__call_is_nothrow<std::__invoke_result<const pybind11::detail::override_hash&, const std::pair<const _object*, const char*>&>, const pybind11::detail::override_hash&, const std::pair<const _object*, const char*>&>’
/usr/include/c++/12/type_traits:167:12:   required from ‘struct std::__and_<std::__is_invocable<const pybind11::detail::override_hash&, const std::pair<const _object*, const char*>&>, std::__call_is_nothrow<std::__invoke_result<const pybind11::detail::override_hash&, const std::pair<const _object*, const char*>&>, const pybind11::detail::override_hash&, const std::pair<const _object*, const char*>&> >’
/usr/include/c++/12/type_traits:3001:12:   required from ‘struct std::__is_nothrow_invocable<const pybind11::detail::override_hash&, const std::pair<const _object*, const char*>&>’
/usr/include/c++/12/type_traits:167:12:   required from ‘struct std::__and_<std::__is_fast_hash<pybind11::detail::override_hash>, std::__is_nothrow_invocable<const pybind11::detail::override_hash&, const std::pair<const _object*, const char*>&> >’
/usr/include/c++/12/type_traits:178:41:   required from ‘struct std::__not_<std::__and_<std::__is_fast_hash<pybind11::detail::override_hash>, std::__is_nothrow_invocable<const pybind11::detail::override_hash&, const std::pair<const _object*, const char*>&> > >’
/usr/include/c++/12/bits/unordered_set.h:99:63:   required from ‘class std::unordered_set<std::pair<const _object*, const char*>, pybind11::detail::override_hash>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:181:9:   required from here
/usr/include/c++/12/type_traits:2985:14: warning: noexcept-expression evaluates to ‘false’ because of a call to ‘pybind11::size_t pybind11::detail::override_hash::operator()(const std::pair<const _object*, const char*>&) const’ [-Wnoexcept]
 2985 |       return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:15:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:164:19: note: but ‘pybind11::size_t pybind11::detail::override_hash::operator()(const std::pair<const _object*, const char*>&) const’ does not throw; perhaps it should be declared ‘noexcept’
  164 |     inline size_t operator()(const std::pair<const PyObject *, const char *> &v) const {
      |                   ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:174:8: warning: ‘pybind11::detail::internals’ does not have the "cxx11" ABI tag that ‘std::unordered_map<std::__cxx11::basic_string<char>, void*>’ (used in the type of ‘pybind11::detail::internals::shared_data’) has [-Wabi-tag]
  174 | struct internals {
      |        ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:185:45: note: ‘pybind11::detail::internals::shared_data’ declared here
  185 |     std::unordered_map<std::string, void *> shared_data; // Custom data to be shared across
      |                                             ^~~~~~~~~~~
In file included from /usr/include/c++/12/unordered_map:47,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:324:
/usr/include/c++/12/bits/unordered_map.h:102:11: note: ‘std::unordered_map<std::__cxx11::basic_string<char>, void*>’ declared here
  102 |     class unordered_map
      |           ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:174:8: warning: ‘pybind11::detail::internals’ does not have the "cxx11" ABI tag that ‘std::forward_list<std::__cxx11::basic_string<char> >’ (used in the type of ‘pybind11::detail::internals::static_strings’) has [-Wabi-tag]
  174 | struct internals {
      |        ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:190:36: note: ‘pybind11::detail::internals::static_strings’ declared here
  190 |     std::forward_list<std::string> static_strings; // Stores the std::strings backing
      |                                    ^~~~~~~~~~~~~~
In file included from /usr/include/c++/12/forward_list:38,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:318:
/usr/include/c++/12/bits/forward_list.h:431:11: note: ‘std::forward_list<std::__cxx11::basic_string<char> >’ declared here
  431 |     class forward_list : private _Fwd_list_base<_Tp, _Alloc>
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:174:8: warning: ‘pybind11::detail::internals’ does not have the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in the type of ‘pybind11::detail::internals::function_record_capsule_name’) has [-Wabi-tag]
  174 | struct internals {
      |        ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:207:17: note: ‘pybind11::detail::internals::function_record_capsule_name’ declared here
  207 |     std::string function_record_capsule_name = internals_function_record_capsule_name;
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: padding struct size to alignment boundary [-Wpadded]
  232 | struct type_info {
      |        ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h: In constructor ‘pybind11::detail::internals::internals()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:210:5: warning: ‘pybind11::detail::internals::registered_types_cpp’ should be initialized in the member initialization list [-Weffc++]
  210 |     internals() = default;
      |     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:210:5: warning: ‘pybind11::detail::internals::registered_types_py’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:210:5: warning: ‘pybind11::detail::internals::registered_instances’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:210:5: warning: ‘pybind11::detail::internals::inactive_override_cache’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:210:5: warning: ‘pybind11::detail::internals::direct_conversions’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:210:5: warning: ‘pybind11::detail::internals::patients’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:210:5: warning: ‘pybind11::detail::internals::registered_exception_translators’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:210:5: warning: ‘pybind11::detail::internals::shared_data’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:210:5: warning: ‘pybind11::detail::internals::static_strings’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:210:5: warning: ‘pybind11::detail::internals::static_property_type’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:210:5: warning: ‘pybind11::detail::internals::default_metaclass’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:210:5: warning: ‘pybind11::detail::internals::instance_base’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h: In constructor ‘pybind11::detail::local_internals::local_internals()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:555:8: warning: ‘pybind11::detail::local_internals::registered_types_cpp’ should be initialized in the member initialization list [-Weffc++]
  555 | struct local_internals {
      |        ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:555:8: warning: ‘pybind11::detail::local_internals::registered_exception_translators’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h: In function ‘pybind11::detail::local_internals& pybind11::detail::get_local_internals()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:601:47: note: synthesized method ‘pybind11::detail::local_internals::local_internals()’ first required here
  601 |     static auto *locals = new local_internals();
      |                                               ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h: In function ‘T& pybind11::get_or_create_shared_data(const std::string&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:659:77: warning: use of old-style cast to ‘T*’ [-Wold-style-cast]
  659 |     T *ptr = (T *) (it != internals.shared_data.end() ? it->second : nullptr);
      |                                                                             ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:34:7: warning: ‘class pybind11::detail::loader_life_support’ has pointer data members [-Weffc++]
   34 | class loader_life_support {
      |       ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:34:7: warning:   but does not declare ‘pybind11::detail::loader_life_support(const pybind11::detail::loader_life_support&)’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:34:7: warning:   or ‘operator=(const pybind11::detail::loader_life_support&)’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:36:26: note: pointer member ‘pybind11::detail::loader_life_support::parent’ declared here
   36 |     loader_life_support *parent = nullptr;
      |                          ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::loader_life_support::loader_life_support()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:66:5: warning: ‘pybind11::detail::loader_life_support::keep_alive’ should be initialized in the member initialization list [-Weffc++]
   66 |     loader_life_support() : parent{get_stack_top()} { set_stack_top(this); }
      |     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In destructor ‘pybind11::detail::loader_life_support::~loader_life_support()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:75:13: note: in expansion of macro ‘Py_DECREF’
   75 |             Py_DECREF(item);
      |             ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:75:13: note: in expansion of macro ‘Py_DECREF’
   75 |             Py_DECREF(item);
      |             ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In static member function ‘static void pybind11::detail::loader_life_support::add_patient(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:661:35: note: in expansion of macro ‘_PyObject_CAST’
  661 | #  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:94:13: note: in expansion of macro ‘Py_INCREF’
   94 |             Py_INCREF(h.ptr());
      |             ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:661:35: note: in expansion of macro ‘_PyObject_CAST’
  661 | #  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:94:13: note: in expansion of macro ‘Py_INCREF’
   94 |             Py_INCREF(h.ptr());
      |             ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In function ‘void pybind11::detail::all_type_info_populate(PyTypeObject*, std::vector<type_info*>&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:123:53: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
  123 |         check.push_back((PyTypeObject *) parent.ptr());
      |                                                     ^
      |                         -----------------------------
      |                         reinterpret_cast<PyTypeObject *> ( parent.ptr())
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:130:40: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  130 |         if (!PyType_Check((PyObject *) type)) {
      |                                        ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:38: note: in definition of macro ‘_Py_CAST’
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                      ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:130:14: note: in expansion of macro ‘PyType_Check’
  130 |         if (!PyType_Check((PyObject *) type)) {
      |              ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:130:14: note: in expansion of macro ‘PyType_Check’
  130 |         if (!PyType_Check((PyObject *) type)) {
      |              ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:130:14: note: in expansion of macro ‘PyType_Check’
  130 |         if (!PyType_Check((PyObject *) type)) {
      |              ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:167:61: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
  167 |                 check.push_back((PyTypeObject *) parent.ptr());
      |                                                             ^
      |                                 -----------------------------
      |                                 reinterpret_cast<PyTypeObject *> ( parent.ptr())
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In function ‘pybind11::handle pybind11::detail::get_type_handle(const std::type_info&, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:250:56: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  250 |     return handle(type_info ? ((PyObject *) type_info->type) : nullptr);
      |                                                        ^~~~
      |                                ----------------------------
      |                                reinterpret_cast<PyObject *> ( type_info->type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In function ‘pybind11::handle pybind11::detail::find_registered_python_instance(void*, const type_info*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:258:58: note: in expansion of macro ‘Py_TYPE’
  258 |         for (auto *instance_type : detail::all_type_info(Py_TYPE(it_i->second))) {
      |                                                          ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:260:50: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  260 |                 return handle((PyObject *) it_i->second).inc_ref();
      |                                                  ^~~~~~
      |                               -------------------------
      |                               reinterpret_cast<PyObject *> ( it_i->second)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::value_and_holder::value_and_holder(pybind11::detail::instance*, const pybind11::detail::type_info*, pybind11::size_t, pybind11::size_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:274:86: warning: declaration of ‘index’ shadows a member of ‘pybind11::detail::value_and_holder’ [-Wshadow]
  274 |     value_and_holder(instance *i, const detail::type_info *type, size_t vpos, size_t index)
      |                                                                               ~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:269:12: note: shadowed declaration is here
  269 |     size_t index = 0u;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:274:60: warning: declaration of ‘type’ shadows a member of ‘pybind11::detail::value_and_holder’ [-Wshadow]
  274 |     value_and_holder(instance *i, const detail::type_info *type, size_t vpos, size_t index)
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:270:30: note: shadowed declaration is here
  270 |     const detail::type_info *type = nullptr;
      |                              ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::value_and_holder::value_and_holder(pybind11::detail::instance*, const pybind11::detail::type_info*, pybind11::size_t, pybind11::size_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:274:86: warning: declaration of ‘index’ shadows a member of ‘pybind11::detail::value_and_holder’ [-Wshadow]
  274 |     value_and_holder(instance *i, const detail::type_info *type, size_t vpos, size_t index)
      |                                                                               ~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:269:12: note: shadowed declaration is here
  269 |     size_t index = 0u;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:274:60: warning: declaration of ‘type’ shadows a member of ‘pybind11::detail::value_and_holder’ [-Wshadow]
  274 |     value_and_holder(instance *i, const detail::type_info *type, size_t vpos, size_t index)
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:270:30: note: shadowed declaration is here
  270 |     const detail::type_info *type = nullptr;
      |                              ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::value_and_holder::value_and_holder(pybind11::detail::instance*, const pybind11::detail::type_info*, pybind11::size_t, pybind11::size_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:274:86: warning: declaration of ‘index’ shadows a member of ‘pybind11::detail::value_and_holder’ [-Wshadow]
  274 |     value_and_holder(instance *i, const detail::type_info *type, size_t vpos, size_t index)
      |                                                                               ~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:269:12: note: shadowed declaration is here
  269 |     size_t index = 0u;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:274:60: warning: declaration of ‘type’ shadows a member of ‘pybind11::detail::value_and_holder’ [-Wshadow]
  274 |     value_and_holder(instance *i, const detail::type_info *type, size_t vpos, size_t index)
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:270:30: note: shadowed declaration is here
  270 |     const detail::type_info *type = nullptr;
      |                              ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::value_and_holder::value_and_holder(pybind11::size_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:283:38: warning: declaration of ‘index’ shadows a member of ‘pybind11::detail::value_and_holder’ [-Wshadow]
  283 |     explicit value_and_holder(size_t index) : index{index} {}
      |                               ~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:269:12: note: shadowed declaration is here
  269 |     size_t index = 0u;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::value_and_holder::value_and_holder(pybind11::size_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:283:38: warning: declaration of ‘index’ shadows a member of ‘pybind11::detail::value_and_holder’ [-Wshadow]
  283 |     explicit value_and_holder(size_t index) : index{index} {}
      |                               ~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:269:12: note: shadowed declaration is here
  269 |     size_t index = 0u;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::value_and_holder::value_and_holder(pybind11::size_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:283:38: warning: declaration of ‘index’ shadows a member of ‘pybind11::detail::value_and_holder’ [-Wshadow]
  283 |     explicit value_and_holder(size_t index) : index{index} {}
      |                               ~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:269:12: note: shadowed declaration is here
  269 |     size_t index = 0u;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In member function ‘void pybind11::detail::value_and_holder::set_holder_constructed(bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:308:72: warning: use of old-style cast to ‘uint8_t’ {aka ‘unsigned char’} [-Wold-style-cast]
  308 |             inst->nonsimple.status[index] &= (std::uint8_t) ~instance::status_holder_constructed;
      |                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
      |                                              -
      |                                              static_cast< -
      |                                                           > (                                   )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In member function ‘void pybind11::detail::value_and_holder::set_instance_registered(bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:323:72: warning: use of old-style cast to ‘uint8_t’ {aka ‘unsigned char’} [-Wold-style-cast]
  323 |             inst->nonsimple.status[index] &= (std::uint8_t) ~instance::status_instance_registered;
      |                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~
      |                                              -
      |                                              static_cast< -
      |                                                           > (                                    )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::values_and_holders::values_and_holders(pybind11::detail::instance*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:336:43: warning: declaration of ‘inst’ shadows a member of ‘pybind11::detail::values_and_holders’ [-Wshadow]
  336 |     explicit values_and_holders(instance *inst)
      |                                 ~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:331:15: note: shadowed declaration is here
  331 |     instance *inst;
      |               ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:337:43: note: in expansion of macro ‘Py_TYPE’
  337 |         : inst{inst}, tinfo(all_type_info(Py_TYPE(inst))) {}
      |                                           ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::values_and_holders::values_and_holders(pybind11::detail::instance*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:336:43: warning: declaration of ‘inst’ shadows a member of ‘pybind11::detail::values_and_holders’ [-Wshadow]
  336 |     explicit values_and_holders(instance *inst)
      |                                 ~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:331:15: note: shadowed declaration is here
  331 |     instance *inst;
      |               ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::values_and_holders::values_and_holders(pybind11::detail::instance*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:336:43: warning: declaration of ‘inst’ shadows a member of ‘pybind11::detail::values_and_holders’ [-Wshadow]
  336 |     explicit values_and_holders(instance *inst)
      |                                 ~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:331:15: note: shadowed declaration is here
  331 |     instance *inst;
      |               ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::values_and_holders::values_and_holders(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:340:46: note: in expansion of macro ‘Py_TYPE’
  340 |         : inst{nullptr}, tinfo(all_type_info(Py_TYPE(obj))) {
      |                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:340:46: note: in expansion of macro ‘Py_TYPE’
  340 |         : inst{nullptr}, tinfo(all_type_info(Py_TYPE(obj))) {
      |                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::values_and_holders::iterator::iterator(pybind11::detail::instance*, const pybind11::detail::values_and_holders::type_vec*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:352:28: warning: declaration of ‘inst’ shadows a member of ‘pybind11::detail::values_and_holders::iterator’ [-Wshadow]
  352 |         iterator(instance *inst, const type_vec *tinfo) : inst{inst}, types{tinfo} {
      |                  ~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:348:19: note: shadowed declaration is here
  348 |         instance *inst = nullptr;
      |                   ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:352:9: warning: ‘pybind11::detail::values_and_holders::iterator::curr’ should be initialized in the member initialization list [-Weffc++]
  352 |         iterator(instance *inst, const type_vec *tinfo) : inst{inst}, types{tinfo} {
      |         ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::values_and_holders::iterator::iterator(pybind11::detail::instance*, const pybind11::detail::values_and_holders::type_vec*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:352:28: warning: declaration of ‘inst’ shadows a member of ‘pybind11::detail::values_and_holders::iterator’ [-Wshadow]
  352 |         iterator(instance *inst, const type_vec *tinfo) : inst{inst}, types{tinfo} {
      |                  ~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:348:19: note: shadowed declaration is here
  348 |         instance *inst = nullptr;
      |                   ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::values_and_holders::iterator::iterator(pybind11::detail::instance*, const pybind11::detail::values_and_holders::type_vec*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:352:28: warning: declaration of ‘inst’ shadows a member of ‘pybind11::detail::values_and_holders::iterator’ [-Wshadow]
  352 |         iterator(instance *inst, const type_vec *tinfo) : inst{inst}, types{tinfo} {
      |                  ~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:348:19: note: shadowed declaration is here
  348 |         instance *inst = nullptr;
      |                   ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In member function ‘pybind11::detail::value_and_holder pybind11::detail::instance::get_value_and_holder(const pybind11::detail::type_info*, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:418:23: note: in expansion of macro ‘Py_TYPE’
  418 |     if (!find_type || Py_TYPE(this) == find_type->type) {
      |                       ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:436:49: note: in expansion of macro ‘Py_TYPE’
  436 |                   + get_fully_qualified_tp_name(Py_TYPE(this)) + "' instance");
      |                                                 ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In member function ‘void pybind11::detail::instance::allocate_layout()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:446:39: note: in expansion of macro ‘Py_TYPE’
  446 |     const auto &tinfo = all_type_info(Py_TYPE(this));
      |                                       ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:483:84: warning: use of old-style cast to ‘void**’ [-Wold-style-cast]
  483 |         nonsimple.values_and_holders = (void **) PyMem_Calloc(space, sizeof(void *));
      |                                                                                    ^
      |                                        ---------
      |                                        static_cast<void **> (                       )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In function ‘pybind11::handle pybind11::detail::get_object_handle(const void*, const type_info*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:514:48: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  514 |                 return handle((PyObject *) it->second);
      |                                                ^~~~~~
      |                               -----------------------
      |                               reinterpret_cast<PyObject *> ( it->second)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::type_caster_generic::type_caster_generic(const pybind11::detail::type_info*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:540:51: warning: declaration of ‘typeinfo’ shadows a member of ‘pybind11::detail::type_caster_generic’ [-Wshadow]
  540 |     explicit type_caster_generic(const type_info *typeinfo)
      |                                  ~~~~~~~~~~~~~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:830:22: note: shadowed declaration is here
  830 |     const type_info *typeinfo = nullptr;
      |                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::type_caster_generic::type_caster_generic(const pybind11::detail::type_info*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:540:51: warning: declaration of ‘typeinfo’ shadows a member of ‘pybind11::detail::type_caster_generic’ [-Wshadow]
  540 |     explicit type_caster_generic(const type_info *typeinfo)
      |                                  ~~~~~~~~~~~~~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:830:22: note: shadowed declaration is here
  830 |     const type_info *typeinfo = nullptr;
      |                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In constructor ‘pybind11::detail::type_caster_generic::type_caster_generic(const pybind11::detail::type_info*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:540:51: warning: declaration of ‘typeinfo’ shadows a member of ‘pybind11::detail::type_caster_generic’ [-Wshadow]
  540 |     explicit type_caster_generic(const type_info *typeinfo)
      |                                  ~~~~~~~~~~~~~~~~~^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:830:22: note: shadowed declaration is here
  830 |     const type_info *typeinfo = nullptr;
      |                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In member function ‘bool pybind11::detail::type_caster_generic::load_impl(pybind11::handle, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:726:33: note: in expansion of macro ‘Py_TYPE’
  726 |         PyTypeObject *srctype = Py_TYPE(src.ptr());
      |                                 ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In member function ‘pybind11::detail::type_caster_base<type>::operator itype*()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:1171:42: warning: use of old-style cast to ‘type*’ [-Wold-style-cast]
 1171 |     operator itype *() { return (type *) value; }
      |                                          ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In member function ‘pybind11::detail::type_caster_base<type>::operator itype&()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:1177:28: warning: use of old-style cast to ‘using itype = pybind11::detail::intrinsic_t<T>*’ [-Wold-style-cast]
 1177 |         return *((itype *) value);
      |                            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h: In function ‘std::string pybind11::detail::type_info_description(const std::type_info&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:1210:43: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
 1210 |         handle th((PyObject *) type_data->type);
      |                                           ^~~~
      |                   ----------------------------
      |                   reinterpret_cast<PyObject *> ( type_data->type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In member function ‘bool pybind11::detail::type_caster<T, typename std::enable_if<(std::is_arithmetic<_Tp>::value && (! std::integral_constant<bool, (std::is_same<Char, char>::value || (std::is_same<T, char8_t>::value || (std::is_same<T, char16_t>::value || (std::is_same<T, char32_t>::value || std::is_same<T, wchar_t>::value))))>::value)), void>::type>::load(pybind11::handle, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/floatobject.h:16:27: note: in expansion of macro ‘PyObject_TypeCheck’
   16 | #define PyFloat_Check(op) PyObject_TypeCheck(op, &PyFloat_Type)
      |                           ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:150:28: note: in expansion of macro ‘PyFloat_Check’
  150 |             if (convert || PyFloat_Check(src.ptr())) {
      |                            ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:151:64: warning: use of old-style cast to ‘using py_type = std::conditional_t<std::is_floating_point<_Tp>::value, double, typename std::conditional<std::is_signed<_Tp>::value, typename std::conditional<(sizeof (T) <= sizeof (long int)), long int, long long int>::type, typename std::make_unsigned<typename std::conditional<(sizeof (T) <= sizeof (long int)), long int, long long int>::type>::type>::type>’ [-Wold-style-cast]
  151 |                 py_value = (py_type) PyFloat_AsDouble(src.ptr());
      |                                                                ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/floatobject.h:16:27: note: in expansion of macro ‘PyObject_TypeCheck’
   16 | #define PyFloat_Check(op) PyObject_TypeCheck(op, &PyFloat_Type)
      |                           ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:155:20: note: in expansion of macro ‘PyFloat_Check’
  155 |         } else if (PyFloat_Check(src.ptr())
      |                    ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/longobject.h:13:29: note: in expansion of macro ‘Py_TYPE’
   13 |         PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LONG_SUBCLASS)
      |                             ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:367:32: note: in expansion of macro ‘PyLong_Check’
  367 | #define PYBIND11_LONG_CHECK(o) PyLong_Check(o)
      |                                ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:156:37: note: in expansion of macro ‘PYBIND11_LONG_CHECK’
  156 |                    || (!convert && !PYBIND11_LONG_CHECK(src.ptr()) && !index_check(src.ptr()))) {
      |                                     ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:178:76: warning: use of old-style cast to ‘using py_type = std::conditional_t<std::is_floating_point<_Tp>::value, double, typename std::conditional<std::is_signed<_Tp>::value, typename std::conditional<(sizeof (T) <= sizeof (long int)), long int, long long int>::type, typename std::make_unsigned<typename std::conditional<(sizeof (T) <= sizeof (long int)), long int, long long int>::type>::type>::type>’ [-Wold-style-cast]
  178 |                                ? (py_type) PyLong_AsLong(src_or_index.ptr())
      |                                                                            ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:368:57: warning: use of old-style cast to ‘using py_type = std::conditional_t<std::is_floating_point<_Tp>::value, double, typename std::conditional<std::is_signed<_Tp>::value, typename std::conditional<(sizeof (T) <= sizeof (long int)), long int, long long int>::type, typename std::make_unsigned<typename std::conditional<(sizeof (T) <= sizeof (long int)), long int, long long int>::type>::type>::type>’ [-Wold-style-cast]
  368 | #define PYBIND11_LONG_AS_LONGLONG(o) PyLong_AsLongLong(o)
      |                                                         ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:179:44: note: in expansion of macro ‘PYBIND11_LONG_AS_LONGLONG’
  179 |                                : (py_type) PYBIND11_LONG_AS_LONGLONG(src_or_index.ptr());
      |                                            ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:184:46: warning: use of old-style cast to ‘using py_type = std::conditional_t<std::is_floating_point<_Tp>::value, double, typename std::conditional<std::is_signed<_Tp>::value, typename std::conditional<(sizeof (T) <= sizeof (long int)), long int, long long int>::type, typename std::make_unsigned<typename std::conditional<(sizeof (T) <= sizeof (long int)), long int, long long int>::type>::type>::type>’ [-Wold-style-cast]
  184 |         bool py_err = py_value == (py_type) -1 && PyErr_Occurred();
      |                                              ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:190:46: warning: use of old-style cast to ‘T’ [-Wold-style-cast]
  190 |                 && py_value != (py_type) (T) py_value)) {
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:190:46: warning: use of old-style cast to ‘using py_type = std::conditional_t<std::is_floating_point<_Tp>::value, double, typename std::conditional<std::is_signed<_Tp>::value, typename std::conditional<(sizeof (T) <= sizeof (long int)), long int, long long int>::type, typename std::make_unsigned<typename std::conditional<(sizeof (T) <= sizeof (long int)), long int, long long int>::type>::type>::type>’ [-Wold-style-cast]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:202:21: warning: use of old-style cast to ‘T’ [-Wold-style-cast]
  202 |         value = (T) py_value;
      |                     ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In static member function ‘static typename std::enable_if<std::is_floating_point<U>::value, pybind11::handle>::type pybind11::detail::type_caster<T, typename std::enable_if<(std::is_arithmetic<_Tp>::value && (! std::integral_constant<bool, (std::is_same<Char, char>::value || (std::is_same<T, char8_t>::value || (std::is_same<T, char16_t>::value || (std::is_same<T, char32_t>::value || std::is_same<T, wchar_t>::value))))>::value)), void>::type>::cast(U, pybind11::return_value_policy, pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:209:44: warning: use of old-style cast to ‘double’ [-Wold-style-cast]
  209 |         return PyFloat_FromDouble((double) src);
      |                                            ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In static member function ‘static typename std::enable_if<(((! std::is_floating_point<U>::value) && std::is_signed<U>::value) && (sizeof (U) <= sizeof (long int))), pybind11::handle>::type pybind11::detail::type_caster<T, typename std::enable_if<(std::is_arithmetic<_Tp>::value && (! std::integral_constant<bool, (std::is_same<Char, char>::value || (std::is_same<T, char8_t>::value || (std::is_same<T, char16_t>::value || (std::is_same<T, char32_t>::value || std::is_same<T, wchar_t>::value))))>::value)), void>::type>::cast(U, pybind11::return_value_policy, pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:217:49: warning: use of old-style cast to ‘long int’ [-Wold-style-cast]
  217 |         return PYBIND11_LONG_FROM_SIGNED((long) src);
      |                                                 ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:369:68: note: in definition of macro ‘PYBIND11_LONG_FROM_SIGNED’
  369 | #define PYBIND11_LONG_FROM_SIGNED(o) PyLong_FromSsize_t((ssize_t) (o))
      |                                                                    ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:369:69: warning: use of old-style cast to ‘using ssize_t = Py_ssize_t’ {aka ‘long int’} [-Wold-style-cast]
  369 | #define PYBIND11_LONG_FROM_SIGNED(o) PyLong_FromSsize_t((ssize_t) (o))
      |                                                                     ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:217:16: note: in expansion of macro ‘PYBIND11_LONG_FROM_SIGNED’
  217 |         return PYBIND11_LONG_FROM_SIGNED((long) src);
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In static member function ‘static typename std::enable_if<(((! std::is_floating_point<U>::value) && std::is_unsigned<U>::value) && (sizeof (U) <= sizeof (long unsigned int))), pybind11::handle>::type pybind11::detail::type_caster<T, typename std::enable_if<(std::is_arithmetic<_Tp>::value && (! std::integral_constant<bool, (std::is_same<Char, char>::value || (std::is_same<T, char8_t>::value || (std::is_same<T, char16_t>::value || (std::is_same<T, char32_t>::value || std::is_same<T, wchar_t>::value))))>::value)), void>::type>::cast(U, pybind11::return_value_policy, pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:225:60: warning: use of old-style cast to ‘long unsigned int’ [-Wold-style-cast]
  225 |         return PYBIND11_LONG_FROM_UNSIGNED((unsigned long) src);
      |                                                            ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:370:68: note: in definition of macro ‘PYBIND11_LONG_FROM_UNSIGNED’
  370 | #define PYBIND11_LONG_FROM_UNSIGNED(o) PyLong_FromSize_t((size_t) (o))
      |                                                                    ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:370:69: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
  370 | #define PYBIND11_LONG_FROM_UNSIGNED(o) PyLong_FromSize_t((size_t) (o))
      |                                                                     ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:225:16: note: in expansion of macro ‘PYBIND11_LONG_FROM_UNSIGNED’
  225 |         return PYBIND11_LONG_FROM_UNSIGNED((unsigned long) src);
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In static member function ‘static typename std::enable_if<(((! std::is_floating_point<U>::value) && std::is_signed<U>::value) && (sizeof (U) > sizeof (long int))), pybind11::handle>::type pybind11::detail::type_caster<T, typename std::enable_if<(std::is_arithmetic<_Tp>::value && (! std::integral_constant<bool, (std::is_same<Char, char>::value || (std::is_same<T, char8_t>::value || (std::is_same<T, char16_t>::value || (std::is_same<T, char32_t>::value || std::is_same<T, wchar_t>::value))))>::value)), void>::type>::cast(U, pybind11::return_value_policy, pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:233:48: warning: use of old-style cast to ‘long long int’ [-Wold-style-cast]
  233 |         return PyLong_FromLongLong((long long) src);
      |                                                ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In static member function ‘static typename std::enable_if<(((! std::is_floating_point<U>::value) && std::is_unsigned<U>::value) && (sizeof (U) > sizeof (long unsigned int))), pybind11::handle>::type pybind11::detail::type_caster<T, typename std::enable_if<(std::is_arithmetic<_Tp>::value && (! std::integral_constant<bool, (std::is_same<Char, char>::value || (std::is_same<T, char8_t>::value || (std::is_same<T, char16_t>::value || (std::is_same<T, char32_t>::value || std::is_same<T, wchar_t>::value))))>::value)), void>::type>::cast(U, pybind11::return_value_policy, pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:241:65: warning: use of old-style cast to ‘long long unsigned int’ [-Wold-style-cast]
  241 |         return PyLong_FromUnsignedLongLong((unsigned long long) src);
      |                                                                 ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:309:11: warning: padding struct to align ‘pybind11::detail::type_caster<void>::value’ [-Wpadded]
  309 |     void *value = nullptr;
      |           ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In member function ‘bool pybind11::detail::type_caster<void>::load(pybind11::handle, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:286:83: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
  286 |         const auto &bases = all_type_info((PyTypeObject *) type::handle_of(h).ptr());
      |                                                                                   ^
      |                                           ----------------
      |                                           reinterpret_cast<PyTypeObject *> (       )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In member function ‘bool pybind11::detail::type_caster<bool>::load(pybind11::handle, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/boolobject.h:22:17: note: in expansion of macro ‘_PyObject_CAST’
   22 | #define Py_True _PyObject_CAST(&_Py_TrueStruct)
      |                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:322:26: note: in expansion of macro ‘Py_True’
  322 |         if (src.ptr() == Py_True) {
      |                          ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/boolobject.h:21:18: note: in expansion of macro ‘_PyObject_CAST’
   21 | #define Py_False _PyObject_CAST(&_Py_FalseStruct)
      |                  ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:326:26: note: in expansion of macro ‘Py_False’
  326 |         if (src.ptr() == Py_False) {
      |                          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In static member function ‘static pybind11::handle pybind11::detail::type_caster<bool>::cast(bool, pybind11::return_value_policy, pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/boolobject.h:22:17: note: in expansion of macro ‘_PyObject_CAST’
   22 | #define Py_True _PyObject_CAST(&_Py_TrueStruct)
      |                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:361:29: note: in expansion of macro ‘Py_True’
  361 |         return handle(src ? Py_True : Py_False).inc_ref();
      |                             ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/boolobject.h:21:18: note: in expansion of macro ‘_PyObject_CAST’
   21 | #define Py_False _PyObject_CAST(&_Py_FalseStruct)
      |                  ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:361:39: note: in expansion of macro ‘Py_False’
  361 |         return handle(src ? Py_True : Py_False).inc_ref();
      |                                       ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In static member function ‘static bool pybind11::detail::type_caster<bool>::is_numpy_bool(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:368:33: note: in expansion of macro ‘Py_TYPE’
  368 |         const char *type_name = Py_TYPE(object.ptr())->tp_name;
      |                                 ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:368:33: note: in expansion of macro ‘Py_TYPE’
  368 |         const char *type_name = Py_TYPE(object.ptr())->tp_name;
      |                                 ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In member function ‘bool pybind11::detail::string_caster<StringType, IsView>::load(pybind11::handle, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/unicodeobject.h:115:25: note: in expansion of macro ‘Py_TYPE’
  115 |     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)
      |                         ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:402:14: note: in expansion of macro ‘PyUnicode_Check’
  402 |         if (!PyUnicode_Check(load_src.ptr())) {
      |              ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:433:69: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
  433 |         size_t length = (size_t) PYBIND11_BYTES_SIZE(utfNbytes.ptr()) / sizeof(CharT);
      |                                                                     ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In member function ‘bool pybind11::detail::string_caster<StringType, IsView>::load_raw(std::enable_if_t<std::is_same<T, char>::value, pybind11::handle>)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytesobject.h:31:38: note: in expansion of macro ‘Py_TYPE’
   31 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_BYTES_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:361:30: note: in expansion of macro ‘PyBytes_Check’
  361 | #define PYBIND11_BYTES_CHECK PyBytes_Check
      |                              ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:486:13: note: in expansion of macro ‘PYBIND11_BYTES_CHECK’
  486 |         if (PYBIND11_BYTES_CHECK(src.ptr())) {
      |             ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:493:77: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
  493 |             value = StringType(bytes, (size_t) PYBIND11_BYTES_SIZE(src.ptr()));
      |                                                                             ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/bytearrayobject.h:24:33: note: in expansion of macro ‘PyObject_TypeCheck’
   24 | #define PyByteArray_Check(self) PyObject_TypeCheck((self), &PyByteArray_Type)
      |                                 ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:496:13: note: in expansion of macro ‘PyByteArray_Check’
  496 |         if (PyByteArray_Check(src.ptr())) {
      |             ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:503:78: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
  503 |             value = StringType(bytearray, (size_t) PyByteArray_Size(src.ptr()));
      |                                                                              ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In static member function ‘static pybind11::handle pybind11::detail::type_caster<CharT, typename std::enable_if<std::integral_constant<bool, (std::is_same<Char, char>::value || (std::is_same<T, char8_t>::value || (std::is_same<T, char16_t>::value || (std::is_same<T, char32_t>::value || std::is_same<T, wchar_t>::value))))>::value, void>::type>::cast(CharT, pybind11::return_value_policy, pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:563:63: warning: use of old-style cast to ‘const char*’ [-Wold-style-cast]
  563 |             handle s = PyUnicode_DecodeLatin1((const char *) &src, 1, nullptr);
      |                                                               ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In static member function ‘static pybind11::handle pybind11::detail::tuple_caster<Tuple, Ts>::cast_impl(T&&, pybind11::return_value_policy, pybind11::handle, std::index_sequence<_Ind ...>)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:37:22: note: in expansion of macro ‘_PyObject_CAST’
   37 |     PyTuple_SET_ITEM(_PyObject_CAST(op), (index), _PyObject_CAST(value))
      |                      ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:729:13: note: in expansion of macro ‘PyTuple_SET_ITEM’
  729 |             PyTuple_SET_ITEM(result.ptr(), counter++, entry.release().ptr());
      |             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:37:51: note: in expansion of macro ‘_PyObject_CAST’
   37 |     PyTuple_SET_ITEM(_PyObject_CAST(op), (index), _PyObject_CAST(value))
      |                                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:729:13: note: in expansion of macro ‘PyTuple_SET_ITEM’
  729 |             PyTuple_SET_ITEM(result.ptr(), counter++, entry.release().ptr());
      |             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In member function ‘bool pybind11::detail::copyable_holder_caster<type, holder_type, SFINAE>::try_implicit_casts(pybind11::handle, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:819:66: warning: use of old-style cast to ‘type*’ [-Wold-style-cast]
  819 |                 holder = holder_type(sub_caster.holder, (type *) value);
      |                                                                  ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In function ‘pybind11::tuple pybind11::make_tuple(Args&& ...)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:37:22: note: in expansion of macro ‘_PyObject_CAST’
   37 |     PyTuple_SET_ITEM(_PyObject_CAST(op), (index), _PyObject_CAST(value))
      |                      ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1394:9: note: in expansion of macro ‘PyTuple_SET_ITEM’
 1394 |         PyTuple_SET_ITEM(result.ptr(), counter++, arg_value.release().ptr());
      |         ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:37:51: note: in expansion of macro ‘_PyObject_CAST’
   37 |     PyTuple_SET_ITEM(_PyObject_CAST(op), (index), _PyObject_CAST(value))
      |                                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1394:9: note: in expansion of macro ‘PyTuple_SET_ITEM’
 1394 |         PyTuple_SET_ITEM(result.ptr(), counter++, arg_value.release().ptr());
      |         ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1401:8: warning: padding struct size to alignment boundary [-Wpadded]
 1401 | struct arg {
      |        ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In constructor ‘constexpr pybind11::arg::arg(const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1404:40: warning: declaration of ‘name’ shadows a member of ‘pybind11::arg’ [-Wshadow]
 1404 |     constexpr explicit arg(const char *name = nullptr)
      |                            ~~~~~~~~~~~~^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1420:17: note: shadowed declaration is here
 1420 |     const char *name;        ///< If non-null, this is a named kwargs argument
      |                 ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In constructor ‘constexpr pybind11::arg::arg(const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1404:40: warning: declaration of ‘name’ shadows a member of ‘pybind11::arg’ [-Wshadow]
 1404 |     constexpr explicit arg(const char *name = nullptr)
      |                            ~~~~~~~~~~~~^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1420:17: note: shadowed declaration is here
 1420 |     const char *name;        ///< If non-null, this is a named kwargs argument
      |                 ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In constructor ‘constexpr pybind11::arg::arg(const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1404:40: warning: declaration of ‘name’ shadows a member of ‘pybind11::arg’ [-Wshadow]
 1404 |     constexpr explicit arg(const char *name = nullptr)
      |                            ~~~~~~~~~~~~^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1420:17: note: shadowed declaration is here
 1420 |     const char *name;        ///< If non-null, this is a named kwargs argument
      |                 ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1428:8: warning: ‘pybind11::arg_v’ does not have the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in the type of ‘pybind11::arg_v::type’) has [-Wabi-tag]
 1428 | struct arg_v : arg {
      |        ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1477:17: note: ‘pybind11::arg_v::type’ declared here
 1477 |     std::string type;
      |                 ^~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1428:8: warning: ‘struct pybind11::arg_v’ has pointer data members [-Weffc++]
 1428 | struct arg_v : arg {
      |        ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1428:8: warning:   but does not declare ‘pybind11::arg_v(const pybind11::arg_v&)’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1428:8: warning:   or ‘operator=(const pybind11::arg_v&)’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1474:17: note: pointer member ‘pybind11::arg_v::descr’ declared here
 1474 |     const char *descr;
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1472:12: warning: padding struct to align ‘pybind11::arg_v::value’ [-Wpadded]
 1472 |     object value;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In constructor ‘pybind11::arg_v::arg_v(pybind11::arg&&, T&&, const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1431:42: warning: declaration of ‘descr’ shadows a member of ‘pybind11::arg_v’ [-Wshadow]
 1431 |     arg_v(arg &&base, T &&x, const char *descr = nullptr)
      |                              ~~~~~~~~~~~~^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1474:17: note: shadowed declaration is here
 1474 |     const char *descr;
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In constructor ‘pybind11::arg_v::arg_v(const char*, T&&, const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1451:48: warning: declaration of ‘descr’ shadows a member of ‘pybind11::arg_v’ [-Wshadow]
 1451 |     arg_v(const char *name, T &&x, const char *descr = nullptr)
      |                                    ~~~~~~~~~~~~^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1474:17: note: shadowed declaration is here
 1474 |     const char *descr;
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1451:23: warning: declaration of ‘name’ shadows a member of ‘pybind11::arg_v’ [-Wshadow]
 1451 |     arg_v(const char *name, T &&x, const char *descr = nullptr)
      |           ~~~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1420:17: note: shadowed declaration is here
 1420 |     const char *name;        ///< If non-null, this is a named kwargs argument
      |                 ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In constructor ‘pybind11::arg_v::arg_v(const pybind11::arg&, T&&, const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1456:47: warning: declaration of ‘descr’ shadows a member of ‘pybind11::arg_v’ [-Wshadow]
 1456 |     arg_v(const arg &base, T &&x, const char *descr = nullptr)
      |                                   ~~~~~~~~~~~~^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1474:17: note: shadowed declaration is here
 1474 |     const char *descr;
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1561:73: warning: use of old-style cast to ‘int’ [-Wold-style-cast]
 1561 |     static_assert(kwargs_pos == -1 || kwargs_pos == (int) sizeof...(Args) - 1,
      |                                                                         ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::doc::doc(const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:47:30: warning: declaration of ‘value’ shadows a member of ‘pybind11::doc’ [-Wshadow]
   47 |     explicit doc(const char *value) : value(value) {}
      |                  ~~~~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:46:17: note: shadowed declaration is here
   46 |     const char *value;
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::doc::doc(const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:47:30: warning: declaration of ‘value’ shadows a member of ‘pybind11::doc’ [-Wshadow]
   47 |     explicit doc(const char *value) : value(value) {}
      |                  ~~~~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:46:17: note: shadowed declaration is here
   46 |     const char *value;
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::doc::doc(const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:47:30: warning: declaration of ‘value’ shadows a member of ‘pybind11::doc’ [-Wshadow]
   47 |     explicit doc(const char *value) : value(value) {}
      |                  ~~~~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:46:17: note: shadowed declaration is here
   46 |     const char *value;
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::name::name(const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:53:31: warning: declaration of ‘value’ shadows a member of ‘pybind11::name’ [-Wshadow]
   53 |     explicit name(const char *value) : value(value) {}
      |                   ~~~~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:52:17: note: shadowed declaration is here
   52 |     const char *value;
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::name::name(const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:53:31: warning: declaration of ‘value’ shadows a member of ‘pybind11::name’ [-Wshadow]
   53 |     explicit name(const char *value) : value(value) {}
      |                   ~~~~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:52:17: note: shadowed declaration is here
   52 |     const char *value;
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::name::name(const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:53:31: warning: declaration of ‘value’ shadows a member of ‘pybind11::name’ [-Wshadow]
   53 |     explicit name(const char *value) : value(value) {}
      |                   ~~~~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:52:17: note: shadowed declaration is here
   52 |     const char *value;
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::sibling::sibling(const pybind11::handle&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:59:36: warning: declaration of ‘value’ shadows a member of ‘pybind11::sibling’ [-Wshadow]
   59 |     explicit sibling(const handle &value) : value(value.ptr()) {}
      |                      ~~~~~~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:58:12: note: shadowed declaration is here
   58 |     handle value;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::sibling::sibling(const pybind11::handle&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:59:36: warning: declaration of ‘value’ shadows a member of ‘pybind11::sibling’ [-Wshadow]
   59 |     explicit sibling(const handle &value) : value(value.ptr()) {}
      |                      ~~~~~~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:58:12: note: shadowed declaration is here
   58 |     handle value;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::sibling::sibling(const pybind11::handle&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:59:36: warning: declaration of ‘value’ shadows a member of ‘pybind11::sibling’ [-Wshadow]
   59 |     explicit sibling(const handle &value) : value(value.ptr()) {}
      |                      ~~~~~~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:58:12: note: shadowed declaration is here
   58 |     handle value;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::metaclass::metaclass(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:92:31: warning: declaration of ‘value’ shadows a member of ‘pybind11::metaclass’ [-Wshadow]
   92 |     explicit metaclass(handle value) : value(value) {}
      |                        ~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:86:12: note: shadowed declaration is here
   86 |     handle value;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::metaclass::metaclass(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:92:31: warning: declaration of ‘value’ shadows a member of ‘pybind11::metaclass’ [-Wshadow]
   92 |     explicit metaclass(handle value) : value(value) {}
      |                        ~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:86:12: note: shadowed declaration is here
   86 |     handle value;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::metaclass::metaclass(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:92:31: warning: declaration of ‘value’ shadows a member of ‘pybind11::metaclass’ [-Wshadow]
   92 |     explicit metaclass(handle value) : value(value) {}
      |                        ~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:86:12: note: shadowed declaration is here
   86 |     handle value;
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::custom_type_setup::custom_type_setup(callback)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:107:41: warning: declaration of ‘value’ shadows a member of ‘pybind11::custom_type_setup’ [-Wshadow]
  107 |     explicit custom_type_setup(callback value) : value(std::move(value)) {}
      |                                ~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:109:14: note: shadowed declaration is here
  109 |     callback value;
      |              ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::custom_type_setup::custom_type_setup(callback)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:107:41: warning: declaration of ‘value’ shadows a member of ‘pybind11::custom_type_setup’ [-Wshadow]
  107 |     explicit custom_type_setup(callback value) : value(std::move(value)) {}
      |                                ~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:109:14: note: shadowed declaration is here
  109 |     callback value;
      |              ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::custom_type_setup::custom_type_setup(callback)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:107:41: warning: declaration of ‘value’ shadows a member of ‘pybind11::custom_type_setup’ [-Wshadow]
  107 |     explicit custom_type_setup(callback value) : value(std::move(value)) {}
      |                                ~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:109:14: note: shadowed declaration is here
  109 |     callback value;
      |              ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:178:8: warning: padding struct size to alignment boundary [-Wpadded]
  178 | struct argument_record {
      |        ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::detail::argument_record::argument_record(const char*, const char*, pybind11::handle, bool, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:91: warning: declaration of ‘none’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                                                                                      ~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:183:10: note: shadowed declaration is here
  183 |     bool none : 1;     ///< True if None is allowed when loading
      |          ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:77: warning: declaration of ‘convert’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                                                                        ~~~~~^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:182:10: note: shadowed declaration is here
  182 |     bool convert : 1;  ///< True if the argument is allowed to convert when loading
      |          ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:65: warning: declaration of ‘value’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                                                          ~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:181:12: note: shadowed declaration is here
  181 |     handle value;      ///< Associated Python object
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:51: warning: declaration of ‘descr’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                                       ~~~~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:180:17: note: shadowed declaration is here
  180 |     const char *descr; ///< Human-readable version of the argument value
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:33: warning: declaration of ‘name’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                     ~~~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:179:17: note: shadowed declaration is here
  179 |     const char *name;  ///< Argument name
      |                 ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::detail::argument_record::argument_record(const char*, const char*, pybind11::handle, bool, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:91: warning: declaration of ‘none’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                                                                                      ~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:183:10: note: shadowed declaration is here
  183 |     bool none : 1;     ///< True if None is allowed when loading
      |          ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:77: warning: declaration of ‘convert’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                                                                        ~~~~~^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:182:10: note: shadowed declaration is here
  182 |     bool convert : 1;  ///< True if the argument is allowed to convert when loading
      |          ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:65: warning: declaration of ‘value’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                                                          ~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:181:12: note: shadowed declaration is here
  181 |     handle value;      ///< Associated Python object
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:51: warning: declaration of ‘descr’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                                       ~~~~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:180:17: note: shadowed declaration is here
  180 |     const char *descr; ///< Human-readable version of the argument value
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:33: warning: declaration of ‘name’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                     ~~~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:179:17: note: shadowed declaration is here
  179 |     const char *name;  ///< Argument name
      |                 ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::detail::argument_record::argument_record(const char*, const char*, pybind11::handle, bool, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:91: warning: declaration of ‘none’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                                                                                      ~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:183:10: note: shadowed declaration is here
  183 |     bool none : 1;     ///< True if None is allowed when loading
      |          ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:77: warning: declaration of ‘convert’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                                                                        ~~~~~^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:182:10: note: shadowed declaration is here
  182 |     bool convert : 1;  ///< True if the argument is allowed to convert when loading
      |          ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:65: warning: declaration of ‘value’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                                                          ~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:181:12: note: shadowed declaration is here
  181 |     handle value;      ///< Associated Python object
      |            ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:51: warning: declaration of ‘descr’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                                       ~~~~~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:180:17: note: shadowed declaration is here
  180 |     const char *descr; ///< Human-readable version of the argument value
      |                 ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:33: warning: declaration of ‘name’ shadows a member of ‘pybind11::detail::argument_record’ [-Wshadow]
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |                     ~~~~~~~~~~~~^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:179:17: note: shadowed declaration is here
  179 |     const char *name;  ///< Argument name
      |                 ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:191:8: warning: ‘struct pybind11::detail::function_record’ has pointer data members [-Weffc++]
  191 | struct function_record {
      |        ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:191:8: warning:   but does not declare ‘pybind11::detail::function_record(const pybind11::detail::function_record&)’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:191:8: warning:   or ‘operator=(const pybind11::detail::function_record&)’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:268:22: note: pointer member ‘pybind11::detail::function_record::next’ declared here
  268 |     function_record *next = nullptr;
      |                      ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:249:19: warning: padding struct to align ‘pybind11::detail::function_record::nargs’ [-Wpadded]
  249 |     std::uint16_t nargs;
      |                   ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:259:18: warning: padding struct to align ‘pybind11::detail::function_record::def’ [-Wpadded]
  259 |     PyMethodDef *def = nullptr;
      |                  ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::detail::function_record::function_record()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:192:5: warning: ‘pybind11::detail::function_record::args’ should be initialized in the member initialization list [-Weffc++]
  192 |     function_record()
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:192:5: warning: ‘pybind11::detail::function_record::nargs’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:192:5: warning: ‘pybind11::detail::function_record::scope’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:192:5: warning: ‘pybind11::detail::function_record::sibling’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:272:8: warning: ‘struct pybind11::detail::type_record’ has pointer data members [-Weffc++]
  272 | struct type_record {
      |        ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:272:8: warning:   but does not declare ‘pybind11::detail::type_record(const pybind11::detail::type_record&)’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:272:8: warning:   or ‘operator=(const pybind11::detail::type_record&)’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:308:17: note: pointer member ‘pybind11::detail::type_record::doc’ declared here
  308 |     const char *doc = nullptr;
      |                 ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:272:8: warning: padding struct size to alignment boundary [-Wpadded]
  272 | struct type_record {
      |        ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::detail::type_record::type_record()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:273:23: warning: ‘pybind11::detail::type_record::scope’ should be initialized in the member initialization list [-Weffc++]
  273 |     PYBIND11_NOINLINE type_record()
      |                       ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:273:23: warning: ‘pybind11::detail::type_record::bases’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:273:23: warning: ‘pybind11::detail::type_record::metaclass’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:273:23: warning: ‘pybind11::detail::type_record::custom_type_setup_callback’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In member function ‘void pybind11::detail::type_record::add_base(const std::type_info&, void* (*)(void*))’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:352:46: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  352 |         bases.append((PyObject *) base_info->type);
      |                                              ^~~~
      |                      ----------------------------
      |                      reinterpret_cast<PyObject *> ( base_info->type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In constructor ‘pybind11::detail::function_call::function_call(const pybind11::detail::function_record&, pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:366:8: warning: ‘pybind11::detail::function_call::args’ should be initialized in the member initialization list [-Weffc++]
  366 | inline function_call::function_call(const function_record &f, handle p) : func(f), parent(p) {
      |        ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:366:8: warning: ‘pybind11::detail::function_call::args_convert’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:366:8: warning: ‘pybind11::detail::function_call::args_ref’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:366:8: warning: ‘pybind11::detail::function_call::kwargs_ref’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:366:8: warning: ‘pybind11::detail::function_call::init_self’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h: In static member function ‘static void pybind11::detail::process_attribute<pybind11::arg_v>::init(const pybind11::arg_v&, pybind11::detail::function_record*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:503:73: warning: use of old-style cast to ‘std::string’ {aka ‘class std::__cxx11::basic_string<char>’} [-Wold-style-cast]
  503 |                     descr += " in method '" + (std::string) str(r->scope) + "."
      |                                                                         ^
      |                                               -
      |                                               static_cast<-
      |                                                           > (            )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:504:49: warning: use of old-style cast to ‘std::string’ {aka ‘class std::__cxx11::basic_string<char>’} [-Wold-style-cast]
  504 |                              + (std::string) r->name + "'";
      |                                                 ^~~~
      |                                -
      |                                static_cast<-
      |                                            > (      )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:506:76: warning: use of old-style cast to ‘std::string’ {aka ‘class std::__cxx11::basic_string<char>’} [-Wold-style-cast]
  506 |                     descr += " in method of '" + (std::string) str(r->scope) + "'";
      |                                                                            ^
      |                                                  -
      |                                                  static_cast<-
      |                                                              > (            )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:509:62: warning: use of old-style cast to ‘std::string’ {aka ‘class std::__cxx11::basic_string<char>’} [-Wold-style-cast]
  509 |                 descr += " in function '" + (std::string) r->name + "'";
      |                                                              ^~~~
      |                                             -
      |                                             static_cast<-
      |                                                         > (      )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘PyTypeObject* pybind11::detail::type_incref(PyTypeObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:661:35: note: in expansion of macro ‘_PyObject_CAST’
  661 | #  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:41:5: note: in expansion of macro ‘Py_INCREF’
   41 |     Py_INCREF(type);
      |     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘int pybind11::detail::pybind11_static_set(PyObject*, PyObject*, PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:54:21: note: in expansion of macro ‘PyType_Check’
   54 |     PyObject *cls = PyType_Check(obj) ? obj : (PyObject *) Py_TYPE(obj);
      |                     ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:54:60: note: in expansion of macro ‘Py_TYPE’
   54 |     PyObject *cls = PyType_Check(obj) ? obj : (PyObject *) Py_TYPE(obj);
      |                                                            ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘PyTypeObject* pybind11::detail::make_static_property_type()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:72:80: warning: use of old-style cast to ‘PyHeapTypeObject*’ {aka ‘struct _heaptypeobject*’} [-Wold-style-cast]
   72 |     auto *heap_type = (PyHeapTypeObject *) PyType_Type.tp_alloc(&PyType_Type, 0);
      |                                                                                ^
      |                       -
      |                       reinterpret_cast<  -
      |                                          > (                                    )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:99:26: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   99 |     setattr((PyObject *) type, "__module__", str("pybind11_builtins"));
      |                          ^~~~
      |             -----------------
      |             reinterpret_cast<PyObject *> ( type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘int pybind11::detail::pybind11_meta_setattro(PyObject*, PyObject*, PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:152:16: note: in expansion of macro ‘Py_TYPE’
  152 |         return Py_TYPE(descr)->tp_descr_set(descr, obj, value);
      |                ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘PyObject* pybind11::detail::pybind11_meta_getattro(PyObject*, PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:51:36: note: in expansion of macro ‘Py_IS_TYPE’
   51 | #define PyInstanceMethod_Check(op) Py_IS_TYPE((op), &PyInstanceMethod_Type)
      |                                    ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:175:18: note: in expansion of macro ‘PyInstanceMethod_Check’
  175 |     if (descr && PyInstanceMethod_Check(descr)) {
      |                  ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:661:35: note: in expansion of macro ‘_PyObject_CAST’
  661 | #  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:176:9: note: in expansion of macro ‘Py_INCREF’
  176 |         Py_INCREF(descr);
      |         ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘PyObject* pybind11::detail::pybind11_meta_call(PyObject*, PyObject*, PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:198:13: note: in expansion of macro ‘Py_DECREF’
  198 |             Py_DECREF(self);
      |             ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘PyTypeObject* pybind11::detail::make_default_metaclass()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:256:80: warning: use of old-style cast to ‘PyHeapTypeObject*’ {aka ‘struct _heaptypeobject*’} [-Wold-style-cast]
  256 |     auto *heap_type = (PyHeapTypeObject *) PyType_Type.tp_alloc(&PyType_Type, 0);
      |                                                                                ^
      |                       -
      |                       reinterpret_cast<  -
      |                                          > (                                    )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:282:26: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  282 |     setattr((PyObject *) type, "__module__", str("pybind11_builtins"));
      |                          ^~~~
      |             -----------------
      |             reinterpret_cast<PyObject *> ( type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘void pybind11::detail::traverse_offset_bases(void*, const type_info*, instance*, bool (*)(void*, instance*))’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:297:71: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
  297 |         if (auto *parent_tinfo = get_type_info((PyTypeObject *) h.ptr())) {
      |                                                                       ^
      |                                                ------------------------
      |                                                reinterpret_cast<PyTypeObject *> ( h.ptr())
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘int pybind11::detail::pybind11_object_init(PyObject*, PyObject*, PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:373:26: note: in expansion of macro ‘Py_TYPE’
  373 |     PyTypeObject *type = Py_TYPE(self);
      |                          ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘void pybind11::detail::add_patient(PyObject*, PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:661:35: note: in expansion of macro ‘_PyObject_CAST’
  661 | #  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:383:5: note: in expansion of macro ‘Py_INCREF’
  383 |     Py_INCREF(patient);
      |     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:661:35: note: in expansion of macro ‘_PyObject_CAST’
  661 | #  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:383:5: note: in expansion of macro ‘Py_INCREF’
  383 |     Py_INCREF(patient);
      |     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘void pybind11::detail::clear_patients(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:767:13: note: in expansion of macro ‘Py_DECREF’
  767 |             Py_DECREF(_tmp_old_op); \
      |             ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:399:9: note: in expansion of macro ‘Py_CLEAR’
  399 |         Py_CLEAR(patient);
      |         ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:767:13: note: in expansion of macro ‘Py_DECREF’
  767 |             Py_DECREF(_tmp_old_op); \
      |             ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:399:9: note: in expansion of macro ‘Py_CLEAR’
  399 |         Py_CLEAR(patient);
      |         ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘void pybind11::detail::clear_instance(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:767:13: note: in expansion of macro ‘Py_DECREF’
  767 |             Py_DECREF(_tmp_old_op); \
      |             ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:434:9: note: in expansion of macro ‘Py_CLEAR’
  434 |         Py_CLEAR(*dict_ptr);
      |         ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:767:13: note: in expansion of macro ‘Py_DECREF’
  767 |             Py_DECREF(_tmp_old_op); \
      |             ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:434:9: note: in expansion of macro ‘Py_CLEAR’
  434 |         Py_CLEAR(*dict_ptr);
      |         ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘void pybind11::detail::pybind11_object_dealloc(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:445:18: note: in expansion of macro ‘Py_TYPE’
  445 |     auto *type = Py_TYPE(self);
      |                  ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:473:13: warning: redundant redeclaration of ‘std::string pybind11::detail::error_string()’ in same scope [-Wredundant-decls]
  473 | std::string error_string();
      |             ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:721:20: note: previous declaration of ‘std::string pybind11::detail::error_string()’
  721 | inline std::string error_string() {
      |                    ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘PyObject* pybind11::detail::make_object_base_type(PyTypeObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:486:76: warning: use of old-style cast to ‘PyHeapTypeObject*’ {aka ‘struct _heaptypeobject*’} [-Wold-style-cast]
  486 |     auto *heap_type = (PyHeapTypeObject *) metaclass->tp_alloc(metaclass, 0);
      |                                                                            ^
      |                       -
      |                       reinterpret_cast<  -
      |                                          > (                                )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:513:26: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  513 |     setattr((PyObject *) type, "__module__", str("pybind11_builtins"));
      |                          ^~~~
      |             -----------------
      |             reinterpret_cast<PyObject *> ( type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:517:25: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  517 |     return (PyObject *) heap_type;
      |                         ^~~~~~~~~
      |            ----------------------
      |            reinterpret_cast<PyObject *> ( heap_type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘int pybind11::detail::pybind11_traverse(PyObject*, visitproc, void*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/objimpl.h:219:30: note: in expansion of macro ‘_PyObject_CAST’
  219 |             int vret = visit(_PyObject_CAST(op), arg);                  \
      |                              ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:526:5: note: in expansion of macro ‘Py_VISIT’
  526 |     Py_VISIT(dict);
      |     ^~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:45:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/objimpl.h:218:13: note: in definition of macro ‘Py_VISIT’
  218 |         if (op) {                                                       \
      |             ^~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:530:14: note: in expansion of macro ‘Py_TYPE’
  530 |     Py_VISIT(Py_TYPE(self));
      |              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/objimpl.h:219:30: note: in expansion of macro ‘_PyObject_CAST’
  219 |             int vret = visit(_PyObject_CAST(op), arg);                  \
      |                              ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:530:5: note: in expansion of macro ‘Py_VISIT’
  530 |     Py_VISIT(Py_TYPE(self));
      |     ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:530:14: note: in expansion of macro ‘Py_TYPE’
  530 |     Py_VISIT(Py_TYPE(self));
      |              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘int pybind11::detail::pybind11_clear(PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:767:13: note: in expansion of macro ‘Py_DECREF’
  767 |             Py_DECREF(_tmp_old_op); \
      |             ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:541:5: note: in expansion of macro ‘Py_CLEAR’
  541 |     Py_CLEAR(dict);
      |     ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘int pybind11::detail::pybind11_getbuffer(PyObject*, Py_buffer*, int)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:577:48: note: in expansion of macro ‘Py_TYPE’
  577 |     for (auto type : reinterpret_borrow<tuple>(Py_TYPE(obj)->tp_mro)) {
      |                                                ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:661:35: note: in expansion of macro ‘_PyObject_CAST’
  661 | #  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:616:5: note: in expansion of macro ‘Py_INCREF’
  616 |     Py_INCREF(view->obj);
      |     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h: In function ‘PyObject* pybind11::detail::make_new_python_type(const type_record&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/moduleobject.h:12:28: note: in expansion of macro ‘PyObject_TypeCheck’
   12 | #define PyModule_Check(op) PyObject_TypeCheck((op), &PyModule_Type)
      |                            ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:639:23: note: in expansion of macro ‘PyModule_Check’
  639 |     if (rec.scope && !PyModule_Check(rec.scope.ptr()) && hasattr(rec.scope, "__qualname__")) {
      |                       ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/moduleobject.h:12:28: note: in expansion of macro ‘PyObject_TypeCheck’
   12 | #define PyModule_Check(op) PyObject_TypeCheck((op), &PyModule_Type)
      |                            ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:639:23: note: in expansion of macro ‘PyModule_Check’
  639 |     if (rec.scope && !PyModule_Check(rec.scope.ptr()) && hasattr(rec.scope, "__qualname__")) {
      |                       ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:664:47: warning: use of old-style cast to ‘char*’ [-Wold-style-cast]
  664 |         tp_doc = (char *) PyObject_MALLOC(size);
      |                                               ^
      |                  --------
      |                  static_cast<char *> (         )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:665:30: warning: use of old-style cast to ‘void*’ [-Wold-style-cast]
  665 |         std::memcpy((void *) tp_doc, rec.doc, size);
      |                              ^~~~~~
      |                     ---------------
      |                     static_cast<void *> ( tp_doc)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:677:68: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
  677 |         = rec.metaclass.ptr() ? (PyTypeObject *) rec.metaclass.ptr() : internals.default_metaclass;
      |                                                                    ^
      |                                 ----------------
      |                                 reinterpret_cast<PyTypeObject *> (  )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:679:76: warning: use of old-style cast to ‘PyHeapTypeObject*’ {aka ‘struct _heaptypeobject*’} [-Wold-style-cast]
  679 |     auto *heap_type = (PyHeapTypeObject *) metaclass->tp_alloc(metaclass, 0);
      |                                                                            ^
      |                       -
      |                       reinterpret_cast<  -
      |                                          > (                                )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:692:50: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
  692 |     type->tp_base = type_incref((PyTypeObject *) base);
      |                                                  ^~~~
      |                                 ---------------------
      |                                 reinterpret_cast<PyTypeObject *> ( base)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:733:51: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  733 |         setattr(rec.scope, rec.name, (PyObject *) type);
      |                                                   ^~~~
      |                                      -----------------
      |                                      reinterpret_cast<PyObject *> ( type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:661:35: note: in expansion of macro ‘_PyObject_CAST’
  661 | #  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))
      |                                   ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:735:9: note: in expansion of macro ‘Py_INCREF’
  735 |         Py_INCREF(type); // Keep it alive forever (reference leak)
      |         ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:739:30: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  739 |         setattr((PyObject *) type, "__module__", module_);
      |                              ^~~~
      |                 -----------------
      |                 reinterpret_cast<PyObject *> ( type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:744:25: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  744 |     return (PyObject *) type;
      |                         ^~~~
      |            -----------------
      |            reinterpret_cast<PyObject *> ( type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:221:21: note: in expansion of macro ‘Py_TYPE’
  221 |                 if (Py_TYPE(v_h.inst) == v_h.type->type) {
      |                     ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:304:61: note: in expansion of macro ‘Py_TYPE’
  304 |                     v_h, func(std::forward<Args>(args)...), Py_TYPE(v_h.inst) != v_h.type->type);
      |                                                             ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:351:21: note: in expansion of macro ‘Py_TYPE’
  351 |                 if (Py_TYPE(v_h.inst) == v_h.type->type) {
      |                     ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h: In function ‘void pybind11::detail::initimpl::setstate(pybind11::detail::value_and_holder&, std::pair<_Tp1, _Tp2>&&, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:971:60: note: in definition of macro ‘PyType_FastSubclass’
  971 | #define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))
      |                                                            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/dictobject.h:18:38: note: in expansion of macro ‘Py_TYPE’
   18 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:378:9: note: in expansion of macro ‘PyDict_Check’
  378 |     if (PyDict_Check(d.ptr()) && PyDict_Size(d.ptr()) == 0) {
      |         ^~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:14:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:383:30: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  383 |     setattr((PyObject *) v_h.inst, "__dict__", d);
      |                              ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h: In constructor ‘pybind11::detail::initimpl::pickle_factory<Get, Set, RetState(Self), NewInstance(ArgState)>::pickle_factory(Get, Set)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:407:33: warning: declaration of ‘set’ shadows a member of ‘pybind11::detail::initimpl::pickle_factory<Get, Set, RetState(Self), NewInstance(ArgState)>’ [-Wshadow]
  407 |     pickle_factory(Get get, Set set) : get(std::forward<Get>(get)), set(std::forward<Set>(set)) {}
      |                             ~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:405:29: note: shadowed declaration is here
  405 |     remove_reference_t<Set> set;
      |                             ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:407:24: warning: declaration of ‘get’ shadows a member of ‘pybind11::detail::initimpl::pickle_factory<Get, Set, RetState(Self), NewInstance(ArgState)>’ [-Wshadow]
  407 |     pickle_factory(Get get, Set set) : get(std::forward<Get>(get)), set(std::forward<Set>(set)) {}
      |                    ~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:404:29: note: shadowed declaration is here
  404 |     remove_reference_t<Get> get;
      |                             ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:425:63: note: in expansion of macro ‘Py_TYPE’
  425 |                     v_h, func(std::forward<ArgState>(state)), Py_TYPE(v_h.inst) != v_h.type->type);
      |                                                               ^~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:16:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h:25:16: warning: redundant redeclaration of ‘PyThreadState* pybind11::detail::get_thread_state_unchecked()’ in same scope [-Wredundant-decls]
   25 | PyThreadState *get_thread_state_unchecked();
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:521:23: note: previous declaration of ‘PyThreadState* pybind11::detail::get_thread_state_unchecked()’
  521 | inline PyThreadState *get_thread_state_unchecked() {
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h:55:7: warning: padding struct size to alignment boundary [-Wpadded]
   55 | class gil_scoped_acquire {
      |       ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h: In constructor ‘pybind11::gil_scoped_acquire::gil_scoped_acquire()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:88:68: warning: use of old-style cast to ‘PyThreadState*’ {aka ‘struct _ts*’} [-Wold-style-cast]
   88 | #        define PYBIND11_TLS_GET_VALUE(key) PyThread_tss_get(&(key))
      |                                                                    ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h:59:36: note: in expansion of macro ‘PYBIND11_TLS_GET_VALUE’
   59 |         tstate = (PyThreadState *) PYBIND11_TLS_GET_VALUE(internals.tstate);
      |                                    ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h:140:7: warning: padding struct size to alignment boundary [-Wpadded]
  140 | class gil_scoped_release {
      |       ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h: In constructor ‘pybind11::gil_scoped_release::gil_scoped_release(bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h:143:38: warning: declaration of ‘disassoc’ shadows a member of ‘pybind11::gil_scoped_release’ [-Wshadow]
  143 |     explicit gil_scoped_release(bool disassoc = false) : disassoc(disassoc) {
      |                                 ~~~~~^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h:187:10: note: shadowed declaration is here
  187 |     bool disassoc;
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h:143:14: warning: ‘pybind11::gil_scoped_release::tstate’ should be initialized in the member initialization list [-Weffc++]
  143 |     explicit gil_scoped_release(bool disassoc = false) : disassoc(disassoc) {
      |              ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h: In constructor ‘pybind11::gil_scoped_release::gil_scoped_release(bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h:143:38: warning: declaration of ‘disassoc’ shadows a member of ‘pybind11::gil_scoped_release’ [-Wshadow]
  143 |     explicit gil_scoped_release(bool disassoc = false) : disassoc(disassoc) {
      |                                 ~~~~~^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h:187:10: note: shadowed declaration is here
  187 |     bool disassoc;
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h: In constructor ‘pybind11::gil_scoped_release::gil_scoped_release(bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h:143:38: warning: declaration of ‘disassoc’ shadows a member of ‘pybind11::gil_scoped_release’ [-Wshadow]
  143 |     explicit gil_scoped_release(bool disassoc = false) : disassoc(disassoc) {
      |                                 ~~~~~^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil.h:187:10: note: shadowed declaration is here
  187 |     bool disassoc;
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In constructor ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:146:75: warning: use of old-style cast to ‘pybind11::detail::function_signature_t<CFunc>*’ [-Wold-style-cast]
  146 |             std::forward<Func>(f), (detail::function_signature_t<Func> *) nullptr, extra...);
      |                                                                           ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In constructor ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:155:42: warning: use of old-style cast to ‘Return (*)(Class*, Arg ...)’ [-Wold-style-cast]
  155 |             (Return(*)(Class *, Arg...)) nullptr,
      |                                          ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In constructor ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) &, const Extra& ...)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:167:42: warning: use of old-style cast to ‘Return (*)(Class*, Arg ...)’ [-Wold-style-cast]
  167 |             (Return(*)(Class *, Arg...)) nullptr,
      |                                          ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In constructor ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) const, const Extra& ...)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:177:55: warning: use of old-style cast to ‘Return (*)(const Class*, Arg ...)’ [-Wold-style-cast]
  177 |                    (Return(*)(const Class *, Arg...)) nullptr,
      |                                                       ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In constructor ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) const &, const Extra& ...)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:189:55: warning: use of old-style cast to ‘Return (*)(const Class*, Arg ...)’ [-Wold-style-cast]
  189 |                    (Return(*)(const Class *, Arg...)) nullptr,
      |                                                       ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In member function ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:235:36: warning: use of old-style cast to ‘struct pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...)::capture*’ [-Wold-style-cast]
  235 |             new ((capture *) &rec->data) capture{std::forward<Func>(f)};
      |                                    ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:245:70: warning: use of old-style cast to ‘struct pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...)::capture*’ [-Wold-style-cast]
  245 |                     auto data = PYBIND11_STD_LAUNDER((capture *) &r->data);
      |                                                                      ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:253:84: warning: use of old-style cast to ‘struct pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...)::capture*’ [-Wold-style-cast]
  253 |             rec->free_data = [](function_record *r) { delete ((capture *) r->data[0]); };
      |                                                                                    ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:385:50: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  385 | #define PYBIND11_TRY_NEXT_OVERLOAD ((PyObject *) 1) // special failure return code
      |                                                  ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:272:24: note: in expansion of macro ‘PYBIND11_TRY_NEXT_OVERLOAD’
  272 |                 return PYBIND11_TRY_NEXT_OVERLOAD;
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In constructor ‘constexpr pybind11::cpp_function::strdup_guard::strdup_guard()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:364:9: warning: ‘pybind11::cpp_function::strdup_guard::strings’ should be initialized in the member initialization list [-Weffc++]
  364 |         strdup_guard() = default;
      |         ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In member function ‘void pybind11::cpp_function::initialize_generic(unique_function_record&&, const char*, const std::type_info* const*, pybind11::size_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:425:87: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
  425 |                 = detail::get_fully_qualified_tp_name((PyTypeObject *) rec->scope.ptr());
      |                                                                                       ^
      |                                                       ---------------------------------
      |                                                       reinterpret_cast<PyTypeObject *> ( rec->scope.ptr())
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:486:51: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  486 |                     handle th((PyObject *) tinfo->type);
      |                                                   ^~~~
      |                               ------------------------
      |                               reinterpret_cast<PyObject *> ( tinfo->type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:508:38: warning: use of old-style cast to ‘uint16_t’ {aka ‘short unsigned int’} [-Wold-style-cast]
  508 |         rec->nargs = (std::uint16_t) args;
      |                                      ^~~~
      |                      -
      |                      static_cast<  -
      |                                    > (   )
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:51:36: note: in expansion of macro ‘Py_IS_TYPE’
   51 | #define PyInstanceMethod_Check(op) Py_IS_TYPE((op), &PyInstanceMethod_Type)
      |                                    ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:359:40: note: in expansion of macro ‘PyInstanceMethod_Check’
  359 | #define PYBIND11_INSTANCE_METHOD_CHECK PyInstanceMethod_Check
      |                                        ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:510:29: note: in expansion of macro ‘PYBIND11_INSTANCE_METHOD_CHECK’
  510 |         if (rec->sibling && PYBIND11_INSTANCE_METHOD_CHECK(rec->sibling.ptr())) {
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:253:43: note: in expansion of macro ‘_PyObject_CAST’
  253 | #  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))
      |                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:51:36: note: in expansion of macro ‘Py_IS_TYPE’
   51 | #define PyInstanceMethod_Check(op) Py_IS_TYPE((op), &PyInstanceMethod_Type)
      |                                    ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:359:40: note: in expansion of macro ‘PyInstanceMethod_Check’
  359 | #define PYBIND11_INSTANCE_METHOD_CHECK PyInstanceMethod_Check
      |                                        ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:510:29: note: in expansion of macro ‘PYBIND11_INSTANCE_METHOD_CHECK’
  510 |         if (rec->sibling && PYBIND11_INSTANCE_METHOD_CHECK(rec->sibling.ptr())) {
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:65:75: note: in expansion of macro ‘_PyObject_CAST’
   65 | #define PyInstanceMethod_GET_FUNCTION(meth) PyInstanceMethod_GET_FUNCTION(_PyObject_CAST(meth))
      |                                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:360:47: note: in expansion of macro ‘PyInstanceMethod_GET_FUNCTION’
  360 | #define PYBIND11_INSTANCE_METHOD_GET_FUNCTION PyInstanceMethod_GET_FUNCTION
      |                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:511:28: note: in expansion of macro ‘PYBIND11_INSTANCE_METHOD_GET_FUNCTION’
  511 |             rec->sibling = PYBIND11_INSTANCE_METHOD_GET_FUNCTION(rec->sibling.ptr());
      |                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/classobject.h:65:75: note: in expansion of macro ‘_PyObject_CAST’
   65 | #define PyInstanceMethod_GET_FUNCTION(meth) PyInstanceMethod_GET_FUNCTION(_PyObject_CAST(meth))
      |                                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:360:47: note: in expansion of macro ‘PyInstanceMethod_GET_FUNCTION’
  360 | #define PYBIND11_INSTANCE_METHOD_GET_FUNCTION PyInstanceMethod_GET_FUNCTION
      |                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:511:28: note: in expansion of macro ‘PYBIND11_INSTANCE_METHOD_GET_FUNCTION’
  511 |             rec->sibling = PYBIND11_INSTANCE_METHOD_GET_FUNCTION(rec->sibling.ptr());
      |                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/methodobject.h:17:31: note: in expansion of macro ‘PyObject_TypeCheck’
   17 | #define PyCFunction_Check(op) PyObject_TypeCheck((op), &PyCFunction_Type)
      |                               ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:516:17: note: in expansion of macro ‘PyCFunction_Check’
  516 |             if (PyCFunction_Check(rec->sibling.ptr())) {
      |                 ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/methodobject.h:17:31: note: in expansion of macro ‘PyObject_TypeCheck’
   17 | #define PyCFunction_Check(op) PyObject_TypeCheck((op), &PyCFunction_Type)
      |                               ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:516:17: note: in expansion of macro ‘PyCFunction_Check’
  516 |             if (PyCFunction_Check(rec->sibling.ptr())) {
      |                 ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h:52:57: note: in expansion of macro ‘_PyObject_CAST’
   52 | #define PyCFunction_GET_SELF(func) PyCFunction_GET_SELF(_PyObject_CAST(func))
      |                                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:517:30: note: in expansion of macro ‘PyCFunction_GET_SELF’
  517 |                 auto *self = PyCFunction_GET_SELF(rec->sibling.ptr());
      |                              ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h:52:57: note: in expansion of macro ‘_PyObject_CAST’
   52 | #define PyCFunction_GET_SELF(func) PyCFunction_GET_SELF(_PyObject_CAST(func))
      |                                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:517:30: note: in expansion of macro ‘PyCFunction_GET_SELF’
  517 |                 auto *self = PyCFunction_GET_SELF(rec->sibling.ptr());
      |                              ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:553:86: warning: use of old-style cast to ‘struct pybind11::detail::function_record*’ [-Wold-style-cast]
  553 |                                 [](void *ptr) { destruct((detail::function_record *) ptr); });
      |                                                                                      ^~~
      |                                                          -
      |                                                          static_cast<              -
      |                                                                                    > (  )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In member function ‘void pybind11::cpp_function::initialize_generic(unique_function_record&&, const char*, const std::type_info* const*, pybind11::size_t)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:595:74: warning: use of old-style cast to ‘struct PyCFunctionObject*’ [-Wold-style-cast]
  595 |                     = reinterpret_borrow<capsule>(((PyCFunctionObject *) m_ptr)->m_self);
      |                                                                          ^~~~~
      |                                                    -
      |                                                    reinterpret_cast<   -
      |                                                                        > (    )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:654:44: warning: use of old-style cast to ‘struct PyCFunctionObject*’ [-Wold-style-cast]
  654 |         auto *func = (PyCFunctionObject *) m_ptr;
      |                                            ^~~~~
      |                      -
      |                      reinterpret_cast<   -
      |                                          > (    )
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:666:13: note: in expansion of macro ‘Py_DECREF’
  666 |             Py_DECREF(func);
      |             ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In static member function ‘static void pybind11::cpp_function::destruct(pybind11::detail::function_record*, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:687:41: warning: use of old-style cast to ‘char*’ [-Wold-style-cast]
  687 |                 std::free((char *) rec->name);
      |                                         ^~~~
      |                           ------------------
      |                           const_cast<char *> ( rec->name)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:687:27: warning: useless cast to type ‘char*’ [-Wuseless-cast]
  687 |                 std::free((char *) rec->name);
      |                           ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:688:41: warning: use of old-style cast to ‘char*’ [-Wold-style-cast]
  688 |                 std::free((char *) rec->doc);
      |                                         ^~~
      |                           -----------------
      |                           const_cast<char *> ( rec->doc)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:688:27: warning: useless cast to type ‘char*’ [-Wuseless-cast]
  688 |                 std::free((char *) rec->doc);
      |                           ^~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:689:41: warning: use of old-style cast to ‘char*’ [-Wold-style-cast]
  689 |                 std::free((char *) rec->signature);
      |                                         ^~~~~~~~~
      |                           --------
      |                           const_cast<char *> (   )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:689:27: warning: useless cast to type ‘char*’ [-Wuseless-cast]
  689 |                 std::free((char *) rec->signature);
      |                           ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In static member function ‘static PyObject* pybind11::cpp_function::dispatcher(PyObject*, PyObject*, PyObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:26:47: note: in expansion of macro ‘_PyObject_CAST’
   26 | #define PyTuple_GET_SIZE(op) PyTuple_GET_SIZE(_PyObject_CAST(op))
      |                                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:729:41: note: in expansion of macro ‘PyTuple_GET_SIZE’
  729 |         const auto n_args_in = (size_t) PyTuple_GET_SIZE(args_in);
      |                                         ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:26:47: note: in expansion of macro ‘_PyObject_CAST’
   26 | #define PyTuple_GET_SIZE(op) PyTuple_GET_SIZE(_PyObject_CAST(op))
      |                                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:729:41: note: in expansion of macro ‘PyTuple_GET_SIZE’
  729 |         const auto n_args_in = (size_t) PyTuple_GET_SIZE(args_in);
      |                                         ^~~~~~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:39,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/Python.h:62:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:26:65: warning: use of old-style cast to ‘using size_t = std::size_t’ {aka ‘long unsigned int’} [-Wold-style-cast]
   26 | #define PyTuple_GET_SIZE(op) PyTuple_GET_SIZE(_PyObject_CAST(op))
      |                                                                 ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:729:41: note: in expansion of macro ‘PyTuple_GET_SIZE’
  729 |         const auto n_args_in = (size_t) PyTuple_GET_SIZE(args_in);
      |                                         ^~~~~~~~~~~~~~~~
In file included from /usr/include/c++/12/cassert:44,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/gil_safe_call_once.h:8,
                 from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:17:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:18: note: in expansion of macro ‘PyType_FastSubclass’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:13: note: in expansion of macro ‘PyTuple_Check’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:731:41: note: in expansion of macro ‘PyTuple_GET_ITEM’
  731 |         handle parent = n_args_in > 0 ? PyTuple_GET_ITEM(args_in, 0) : nullptr,
      |                                         ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:18: note: in expansion of macro ‘PyType_FastSubclass’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:13: note: in expansion of macro ‘PyTuple_Check’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:731:41: note: in expansion of macro ‘PyTuple_GET_ITEM’
  731 |         handle parent = n_args_in > 0 ? PyTuple_GET_ITEM(args_in, 0) : nullptr,
      |                                         ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘struct PyTupleObject*’ [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:33: note: in expansion of macro ‘_Py_CAST’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:731:41: note: in expansion of macro ‘PyTuple_GET_ITEM’
  731 |         handle parent = n_args_in > 0 ? PyTuple_GET_ITEM(args_in, 0) : nullptr,
      |                                         ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:385:50: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  385 | #define PYBIND11_TRY_NEXT_OVERLOAD ((PyObject *) 1) // special failure return code
      |                                                  ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:732:25: note: in expansion of macro ‘PYBIND11_TRY_NEXT_OVERLOAD’
  732 |                result = PYBIND11_TRY_NEXT_OVERLOAD;
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:737:21: note: in expansion of macro ‘PyObject_TypeCheck’
  737 |                 || !PyObject_TypeCheck(parent.ptr(), (PyTypeObject *) overloads->scope.ptr())) {
      |                     ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:737:21: note: in expansion of macro ‘PyObject_TypeCheck’
  737 |                 || !PyObject_TypeCheck(parent.ptr(), (PyTypeObject *) overloads->scope.ptr())) {
      |                     ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:737:92: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
  737 |                 || !PyObject_TypeCheck(parent.ptr(), (PyTypeObject *) overloads->scope.ptr())) {
      |                                                                                            ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:80: note: in definition of macro ‘PyObject_TypeCheck’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                                                ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:743:85: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
  743 |             auto *const tinfo = get_type_info((PyTypeObject *) overloads->scope.ptr());
      |                                                                                     ^
      |                                               ----------------
      |                                               reinterpret_cast<PyTypeObject *> (     )
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:18: note: in expansion of macro ‘PyType_FastSubclass’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:13: note: in expansion of macro ‘PyTuple_Check’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:819:38: note: in expansion of macro ‘PyTuple_GET_ITEM’
  819 |                     call.init_self = PyTuple_GET_ITEM(args_in, 0);
      |                                      ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:18: note: in expansion of macro ‘PyType_FastSubclass’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:13: note: in expansion of macro ‘PyTuple_Check’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:819:38: note: in expansion of macro ‘PyTuple_GET_ITEM’
  819 |                     call.init_self = PyTuple_GET_ITEM(args_in, 0);
      |                                      ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘struct PyTupleObject*’ [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:33: note: in expansion of macro ‘_Py_CAST’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:819:38: note: in expansion of macro ‘PyTuple_GET_ITEM’
  819 |                     call.init_self = PyTuple_GET_ITEM(args_in, 0);
      |                                      ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:18: note: in expansion of macro ‘PyType_FastSubclass’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:13: note: in expansion of macro ‘PyTuple_Check’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:836:32: note: in expansion of macro ‘PyTuple_GET_ITEM’
  836 |                     handle arg(PyTuple_GET_ITEM(args_in, args_copied));
      |                                ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:18: note: in expansion of macro ‘PyType_FastSubclass’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:13: note: in expansion of macro ‘PyTuple_Check’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:836:32: note: in expansion of macro ‘PyTuple_GET_ITEM’
  836 |                     handle arg(PyTuple_GET_ITEM(args_in, args_copied));
      |                                ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘struct PyTupleObject*’ [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:33: note: in expansion of macro ‘_Py_CAST’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:836:32: note: in expansion of macro ‘PyTuple_GET_ITEM’
  836 |                     handle arg(PyTuple_GET_ITEM(args_in, args_copied));
      |                                ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:18: note: in expansion of macro ‘PyType_FastSubclass’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:13: note: in expansion of macro ‘PyTuple_Check’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:944:45: note: in expansion of macro ‘PyTuple_GET_ITEM’
  944 |                             extra_args[i] = PyTuple_GET_ITEM(args_in, positional_args_copied + i);
      |                                             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:18: note: in expansion of macro ‘PyType_FastSubclass’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:13: note: in expansion of macro ‘PyTuple_Check’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:944:45: note: in expansion of macro ‘PyTuple_GET_ITEM’
  944 |                             extra_args[i] = PyTuple_GET_ITEM(args_in, positional_args_copied + i);
      |                                             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘struct PyTupleObject*’ [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:33: note: in expansion of macro ‘_Py_CAST’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:944:45: note: in expansion of macro ‘PyTuple_GET_ITEM’
  944 |                             extra_args[i] = PyTuple_GET_ITEM(args_in, positional_args_copied + i);
      |                                             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:385:50: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  385 | #define PYBIND11_TRY_NEXT_OVERLOAD ((PyObject *) 1) // special failure return code
      |                                                  ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:989:30: note: in expansion of macro ‘PYBIND11_TRY_NEXT_OVERLOAD’
  989 |                     result = PYBIND11_TRY_NEXT_OVERLOAD;
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:385:50: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  385 | #define PYBIND11_TRY_NEXT_OVERLOAD ((PyObject *) 1) // special failure return code
      |                                                  ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:992:37: note: in expansion of macro ‘PYBIND11_TRY_NEXT_OVERLOAD’
  992 |                 if (result.ptr() != PYBIND11_TRY_NEXT_OVERLOAD) {
      |                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:385:50: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  385 | #define PYBIND11_TRY_NEXT_OVERLOAD ((PyObject *) 1) // special failure return code
      |                                                  ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1012:71: note: in expansion of macro ‘PYBIND11_TRY_NEXT_OVERLOAD’
 1012 |             if (overloaded && !second_pass.empty() && result.ptr() == PYBIND11_TRY_NEXT_OVERLOAD) {
      |                                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:385:50: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  385 | #define PYBIND11_TRY_NEXT_OVERLOAD ((PyObject *) 1) // special failure return code
      |                                                  ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1020:34: note: in expansion of macro ‘PYBIND11_TRY_NEXT_OVERLOAD’
 1020 |                         result = PYBIND11_TRY_NEXT_OVERLOAD;
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:385:50: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  385 | #define PYBIND11_TRY_NEXT_OVERLOAD ((PyObject *) 1) // special failure return code
      |                                                  ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1023:41: note: in expansion of macro ‘PYBIND11_TRY_NEXT_OVERLOAD’
 1023 |                     if (result.ptr() != PYBIND11_TRY_NEXT_OVERLOAD) {
      |                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:385:50: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
  385 | #define PYBIND11_TRY_NEXT_OVERLOAD ((PyObject *) 1) // special failure return code
      |                                                  ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1081:29: note: in expansion of macro ‘PYBIND11_TRY_NEXT_OVERLOAD’
 1081 |         if (result.ptr() == PYBIND11_TRY_NEXT_OVERLOAD) {
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In member function ‘bool pybind11::module_::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/moduleobject.h:12:28: note: in expansion of macro ‘PyObject_TypeCheck’
   12 | #define PyModule_Check(op) PyObject_TypeCheck((op), &PyModule_Type)
      |                            ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyModule_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1205:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1205 |     PYBIND11_OBJECT_DEFAULT(module_, object, PyModule_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In static member function ‘static bool pybind11::module_::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/moduleobject.h:12:28: note: in expansion of macro ‘PyObject_TypeCheck’
   12 | #define PyModule_Check(op) PyObject_TypeCheck((op), &PyModule_Type)
      |                            ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyModule_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1205:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1205 |     PYBIND11_OBJECT_DEFAULT(module_, object, PyModule_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:384:59: note: in expansion of macro ‘_PyObject_CAST’
  384 | #  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))
      |                                                           ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/moduleobject.h:12:28: note: in expansion of macro ‘PyObject_TypeCheck’
   12 | #define PyModule_Check(op) PyObject_TypeCheck((op), &PyModule_Type)
      |                            ^~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyModule_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1205:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1205 |     PYBIND11_OBJECT_DEFAULT(module_, object, PyModule_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In constructor ‘pybind11::module_::module_(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1205:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1205 |     PYBIND11_OBJECT_DEFAULT(module_, object, PyModule_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1205:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1205 |     PYBIND11_OBJECT_DEFAULT(module_, object, PyModule_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In constructor ‘pybind11::module_::module_(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1205:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1205 |     PYBIND11_OBJECT_DEFAULT(module_, object, PyModule_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1205:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1205 |     PYBIND11_OBJECT_DEFAULT(module_, object, PyModule_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In member function ‘bool pybind11::detail::generic_type::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyType_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1362:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1362 |     PYBIND11_OBJECT_DEFAULT(generic_type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In static member function ‘static bool pybind11::detail::generic_type::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyType_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1362:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1362 |     PYBIND11_OBJECT_DEFAULT(generic_type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyType_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1362:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1362 |     PYBIND11_OBJECT_DEFAULT(generic_type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In constructor ‘pybind11::detail::generic_type::generic_type(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1362:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1362 |     PYBIND11_OBJECT_DEFAULT(generic_type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1362:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1362 |     PYBIND11_OBJECT_DEFAULT(generic_type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In constructor ‘pybind11::detail::generic_type::generic_type(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1362:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1362 |     PYBIND11_OBJECT_DEFAULT(generic_type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1421:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1421 |     PYBIND11_OBJECT(Name, Parent, CheckFun)                                                       \
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1362:5: note: in expansion of macro ‘PYBIND11_OBJECT_DEFAULT’
 1362 |     PYBIND11_OBJECT_DEFAULT(generic_type, object, PyType_Check)
      |     ^~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h: In constructor ‘constexpr pybind11::detail::type_info::type_info()’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::type’ should be initialized in the member initialization list [-Weffc++]
  232 | struct type_info {
      |        ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::cpptype’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::type_size’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::type_align’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::holder_size_in_ptrs’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::operator_new’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::init_instance’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::dealloc’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::implicit_conversions’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::implicit_casts’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::direct_conversions’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::simple_type’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::simple_ancestors’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::default_holder’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:232:8: warning: ‘pybind11::detail::type_info::module_local’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In member function ‘void pybind11::detail::generic_type::initialize(const pybind11::detail::type_record&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1380:45: note: synthesized method ‘constexpr pybind11::detail::type_info::type_info()’ first required here
 1380 |         auto *tinfo = new detail::type_info();
      |                                             ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1381:40: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
 1381 |         tinfo->type = (PyTypeObject *) m_ptr;
      |                                        ^~~~~
      |                       ----------------------
      |                       reinterpret_cast<PyTypeObject *> ( m_ptr)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1402:56: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
 1402 |         internals.registered_types_py[(PyTypeObject *) m_ptr] = {tinfo};
      |                                                        ^~~~~
      |                                       ----------------------
      |                                       reinterpret_cast<PyTypeObject *> ( m_ptr)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1408:82: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
 1408 |             auto *parent_tinfo = get_type_info((PyTypeObject *) rec.bases[0].ptr());
      |                                                                                  ^
      |                                                ----------------
      |                                                reinterpret_cast<PyTypeObject *> ( )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In member function ‘void pybind11::detail::generic_type::mark_parents_nonsimple(PyTypeObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1427:65: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
 1427 |             auto *tinfo2 = get_type_info((PyTypeObject *) h.ptr());
      |                                                                 ^
      |                                          ------------------------
      |                                          reinterpret_cast<PyTypeObject *> ( h.ptr())
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1431:59: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
 1431 |             mark_parents_nonsimple((PyTypeObject *) h.ptr());
      |                                                           ^
      |                                    ------------------------
      |                                    reinterpret_cast<PyTypeObject *> ( h.ptr())
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In member function ‘void pybind11::detail::generic_type::install_buffer_funcs(pybind11::buffer_info* (*)(PyObject*, void*), void*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1437:43: warning: use of old-style cast to ‘PyHeapTypeObject*’ {aka ‘struct _heaptypeobject*’} [-Wold-style-cast]
 1437 |         auto *type = (PyHeapTypeObject *) m_ptr;
      |                                           ^~~~~
      |                      -
      |                      reinterpret_cast<  -
      |                                         > (    )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In member function ‘void pybind11::detail::generic_type::def_property_static_impl(const char*, pybind11::handle, pybind11::handle, pybind11::detail::function_record*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1460:94: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
 1460 |             (PyObject *) (is_static ? get_internals().static_property_type : &PyProperty_Type));
      |                                                                                              ^
      |             ------------
      |             reinterpret_cast<PyObject *> (                                                    )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In member function ‘bool pybind11::class_<type_, options>::check() const’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1377:54: note: in expansion of macro ‘PyType_Check’
 1377 |     bool check() const { return m_ptr != nullptr && (CheckFun(m_ptr) != 0); }                     \
      |                                                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1578:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1578 |     PYBIND11_OBJECT(class_, generic_type, PyType_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In static member function ‘static bool pybind11::class_<type_, options>::check_(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:977:41: note: in expansion of macro ‘_PyObject_CAST’
  977 | #  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))
      |                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1378:65: note: in expansion of macro ‘PyType_Check’
 1378 |     static bool check_(handle h) { return h.ptr() != nullptr && CheckFun(h.ptr()); }              \
      |                                                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1407:5: note: in expansion of macro ‘PYBIND11_OBJECT_COMMON’
 1407 |     PYBIND11_OBJECT_COMMON(Name, Parent, CheckFun)                                                \
      |     ^~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1578:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1578 |     PYBIND11_OBJECT(class_, generic_type, PyType_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In constructor ‘pybind11::class_<type_, options>::class_(const pybind11::object&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1412:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1412 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1578:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1578 |     PYBIND11_OBJECT(class_, generic_type, PyType_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In constructor ‘pybind11::class_<type_, options>::class_(pybind11::object&&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1403:78: note: in expansion of macro ‘Py_TYPE’
 1403 |                            + ::pybind11::detail::get_fully_qualified_tp_name(Py_TYPE(o_ptr))      \
      |                                                                              ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1417:19: note: in expansion of macro ‘PYBIND11_OBJECT_CHECK_FAILED’
 1417 |             throw PYBIND11_OBJECT_CHECK_FAILED(Name, m_ptr);                                      \
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1578:5: note: in expansion of macro ‘PYBIND11_OBJECT’
 1578 |     PYBIND11_OBJECT(class_, generic_type, PyType_Check)
      |     ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1702:37: warning: declaration of ‘ptr’ shadows a previous local [-Wshadow]
 1702 |             [](PyObject *obj, void *ptr) -> buffer_info * {
      |                               ~~~~~~^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1700:15: note: shadowed declaration is here
 1700 |         auto *ptr = new capture{std::forward<Func>(func)};
      |               ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1707:53: warning: use of old-style cast to ‘struct pybind11::class_<type_, options>::def_buffer(Func&&)::capture*’ [-Wold-style-cast]
 1707 |                 return new buffer_info(((capture *) ptr)->func(std::move(caster)));
      |                                                     ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In static member function ‘static void pybind11::class_<type_, options>::init_instance(pybind11::detail::instance*, const void*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1926:54: warning: use of old-style cast to ‘const pybind11::class_<type_, options>::holder_type*’ [-Wold-style-cast]
 1926 |         init_holder(inst, v_h, (const holder_type *) holder_ptr, v_h.value_ptr<type>());
      |                                                      ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In static member function ‘static pybind11::detail::function_record* pybind11::class_<type_, options>::get_function_record(pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/methodobject.h:52:57: note: in expansion of macro ‘_PyObject_CAST’
   52 | #define PyCFunction_GET_SELF(func) PyCFunction_GET_SELF(_PyObject_CAST(func))
      |                                                         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1954:28: note: in expansion of macro ‘PyCFunction_GET_SELF’
 1954 |         handle func_self = PyCFunction_GET_SELF(h.ptr());
      |                            ^~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In member function ‘void pybind11::detail::enum_base::init(bool, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2019:46: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
 2019 |         auto property = handle((PyObject *) &PyProperty_Type);
      |                                              ^~~~~~~~~~~~~~~
      |                                -----------------------------
      |                                reinterpret_cast<PyObject *> ( &PyProperty_Type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2020:68: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
 2020 |         auto static_property = handle((PyObject *) get_internals().static_property_type);
      |                                                                    ^~~~~~~~~~~~~~~~~~~~
      |                                       ------------
      |                                       reinterpret_cast<PyObject *> (                   )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2048:55: warning: use of old-style cast to ‘PyTypeObject*’ {aka ‘struct _typeobject*’} [-Wold-style-cast]
 2048 |                         if (((PyTypeObject *) arg.ptr())->tp_doc) {
      |                                                       ^
      |                              --------------------------
      |                              reinterpret_cast<PyTypeObject *> ( arg.ptr())
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In member function ‘void pybind11::detail::enum_base::value(const char*, pybind11::object, const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2166:78: warning: use of old-style cast to ‘std::string’ {aka ‘class std::__cxx11::basic_string<char>’} [-Wold-style-cast]
 2166 |             std::string type_name = (std::string) str(m_base.attr("__name__"));
      |                                                                              ^
      |                                     -
      |                                     static_cast<-
      |                                                 > (                           )
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2251:73: warning: use of old-style cast to ‘using Scalar = std::conditional_t<std::integral_constant<bool, (std::integral_constant<bool, (std::is_same<typename std::underlying_type<_Tp>::type, char>::value || (std::is_same<typename std::underlying_type<_Tp>::type, char8_t>::value || (std::is_same<typename std::underlying_type<_Tp>::type, char16_t>::value || (std::is_same<typename std::underlying_type<_Tp>::type, char32_t>::value || std::is_same<typename std::underlying_type<_Tp>::type, wchar_t>::value))))>::value || std::is_same<typename std::underlying_type<_Tp>::type, bool>::value)>::value, typename pybind11::detail::equivalent_integer<std::is_signed<typename std::underlying_type<_Tp>::type>::value, sizeof (typename std::underlying_type<_Tp>::type)>::type, typename std::underlying_type<_Tp>::type>’ [-Wold-style-cast]
 2251 |         def_property_readonly("value", [](Type value) { return (Scalar) value; });
      |                                                                         ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2252:57: warning: use of old-style cast to ‘using Scalar = std::conditional_t<std::integral_constant<bool, (std::integral_constant<bool, (std::is_same<typename std::underlying_type<_Tp>::type, char>::value || (std::is_same<typename std::underlying_type<_Tp>::type, char8_t>::value || (std::is_same<typename std::underlying_type<_Tp>::type, char16_t>::value || (std::is_same<typename std::underlying_type<_Tp>::type, char32_t>::value || std::is_same<typename std::underlying_type<_Tp>::type, wchar_t>::value))))>::value || std::is_same<typename std::underlying_type<_Tp>::type, bool>::value)>::value, typename pybind11::detail::equivalent_integer<std::is_signed<typename std::underlying_type<_Tp>::type>::value, sizeof (typename std::underlying_type<_Tp>::type)>::type, typename std::underlying_type<_Tp>::type>’ [-Wold-style-cast]
 2252 |         def("__int__", [](Type value) { return (Scalar) value; });
      |                                                         ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2253:59: warning: use of old-style cast to ‘using Scalar = std::conditional_t<std::integral_constant<bool, (std::integral_constant<bool, (std::is_same<typename std::underlying_type<_Tp>::type, char>::value || (std::is_same<typename std::underlying_type<_Tp>::type, char8_t>::value || (std::is_same<typename std::underlying_type<_Tp>::type, char16_t>::value || (std::is_same<typename std::underlying_type<_Tp>::type, char32_t>::value || std::is_same<typename std::underlying_type<_Tp>::type, wchar_t>::value))))>::value || std::is_same<typename std::underlying_type<_Tp>::type, bool>::value)>::value, typename pybind11::detail::equivalent_integer<std::is_signed<typename std::underlying_type<_Tp>::type>::value, sizeof (typename std::underlying_type<_Tp>::type)>::type, typename std::underlying_type<_Tp>::type>’ [-Wold-style-cast]
 2253 |         def("__index__", [](Type value) { return (Scalar) value; });
      |                                                           ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2257:50: note: in expansion of macro ‘Py_TYPE’
 2257 |                     v_h, static_cast<Type>(arg), Py_TYPE(v_h.inst) != v_h.type->type);
      |                                                  ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In function ‘void pybind11::detail::keep_alive_impl(pybind11::handle, pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2292:32: note: in expansion of macro ‘Py_TYPE’
 2292 |     auto tinfo = all_type_info(Py_TYPE(nurse.ptr()));
      |                                ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2292:32: note: in expansion of macro ‘Py_TYPE’
 2292 |     auto tinfo = all_type_info(Py_TYPE(nurse.ptr()));
      |                                ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In function ‘std::pair<std::__detail::_Node_iterator<std::pair<_typeobject* const, std::vector<pybind11::detail::type_info*> >, false, false>, bool> pybind11::detail::all_type_info_get_cache(PyTypeObject*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2343:30: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
 2343 |         weakref((PyObject *) type, cpp_function([type](handle wr) {
      |                              ^~~~
      |                 -----------------
      |                 reinterpret_cast<PyObject *> ( type)
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In lambda function:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2569:55: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
 2569 |         PyObject *result = PyObject_Call((PyObject *) type, args.ptr(), nullptr);
      |                                                       ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In function ‘pybind11::function pybind11::detail::get_type_override(const void*, const type_info*, const char*)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2772:46: warning: use of old-style cast to ‘std::string’ {aka ‘class std::__cxx11::basic_string<char>’} [-Wold-style-cast]
 2772 |         if ((std::string) str(f_code->co_name) == name && f_code->co_argcount > 0) {
      |                                              ^
      |             -
      |             static_cast<-
      |                         > (                   )
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:18: note: in expansion of macro ‘PyType_FastSubclass’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:13: note: in expansion of macro ‘PyTuple_Check’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2780:38: note: in expansion of macro ‘PyTuple_GET_ITEM’
 2780 |                 PyObject *self_arg = PyTuple_GET_ITEM(co_varnames, 0);
      |                                      ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:18: note: in expansion of macro ‘PyType_FastSubclass’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                  ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:223:31: note: in expansion of macro ‘_PyObject_CAST’
  223 | #  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))
      |                               ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/tupleobject.h:27:38: note: in expansion of macro ‘Py_TYPE’
   27 |                  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)
      |                                      ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:13: note: in expansion of macro ‘PyTuple_Check’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |             ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2780:38: note: in expansion of macro ‘PyTuple_GET_ITEM’
 2780 |                 PyObject *self_arg = PyTuple_GET_ITEM(co_varnames, 0);
      |                                      ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘struct PyTupleObject*’ [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:18:33: note: in expansion of macro ‘_Py_CAST’
   18 |     (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))
      |                                 ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/tupleobject.h:28:38: note: in expansion of macro ‘_PyTuple_CAST’
   28 | #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])
      |                                      ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2780:38: note: in expansion of macro ‘PyTuple_GET_ITEM’
 2780 |                 PyObject *self_arg = PyTuple_GET_ITEM(co_varnames, 0);
      |                                      ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2781:17: note: in expansion of macro ‘Py_DECREF’
 2781 |                 Py_DECREF(co_varnames);
      |                 ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:31: warning: useless cast to type ‘PyObject*’ {aka ‘struct _object*’} [-Wuseless-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                               ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2781:17: note: in expansion of macro ‘Py_DECREF’
 2781 |                 Py_DECREF(co_varnames);
      |                 ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2784:21: note: in expansion of macro ‘Py_DECREF’
 2784 |                     Py_DECREF(f_code);
      |                     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2785:21: note: in expansion of macro ‘Py_DECREF’
 2785 |                     Py_DECREF(frame);
      |                     ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2790:9: note: in expansion of macro ‘Py_DECREF’
 2790 |         Py_DECREF(f_code);
      |         ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2791:9: note: in expansion of macro ‘Py_DECREF’
 2791 |         Py_DECREF(frame);
      |         ^~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:190:42: warning: use of old-style cast to ‘int’ [-Wold-style-cast]
  190 | PYBIND11_UNARY_OPERATOR(int, int_, (int) l)
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:147:53: note: in definition of macro ‘PYBIND11_UNARY_OPERATOR’
  147 |         static auto execute(const L &l) -> decltype(expr) { return expr; }                        \
      |                                                     ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h: In static member function ‘static decltype ((int)(l)) pybind11::detail::op_impl<pybind11::detail::op_int, pybind11::detail::op_u, B, L, pybind11::detail::undefined_t>::execute(const L&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:190:42: warning: use of old-style cast to ‘int’ [-Wold-style-cast]
  190 | PYBIND11_UNARY_OPERATOR(int, int_, (int) l)
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:147:68: note: in definition of macro ‘PYBIND11_UNARY_OPERATOR’
  147 |         static auto execute(const L &l) -> decltype(expr) { return expr; }                        \
      |                                                                    ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h: In static member function ‘static B pybind11::detail::op_impl<pybind11::detail::op_int, pybind11::detail::op_u, B, L, pybind11::detail::undefined_t>::execute_cast(const L&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:190:42: warning: use of old-style cast to ‘int’ [-Wold-style-cast]
  190 | PYBIND11_UNARY_OPERATOR(int, int_, (int) l)
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:148:54: note: in definition of macro ‘PYBIND11_UNARY_OPERATOR’
  148 |         static B execute_cast(const L &l) { return B(expr); }                                     \
      |                                                      ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:191:49: warning: use of old-style cast to ‘double’ [-Wold-style-cast]
  191 | PYBIND11_UNARY_OPERATOR(float, float_, (double) l)
      |                                                 ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:147:53: note: in definition of macro ‘PYBIND11_UNARY_OPERATOR’
  147 |         static auto execute(const L &l) -> decltype(expr) { return expr; }                        \
      |                                                     ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h: In static member function ‘static decltype ((double)(l)) pybind11::detail::op_impl<pybind11::detail::op_float, pybind11::detail::op_u, B, L, pybind11::detail::undefined_t>::execute(const L&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:191:49: warning: use of old-style cast to ‘double’ [-Wold-style-cast]
  191 | PYBIND11_UNARY_OPERATOR(float, float_, (double) l)
      |                                                 ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:147:68: note: in definition of macro ‘PYBIND11_UNARY_OPERATOR’
  147 |         static auto execute(const L &l) -> decltype(expr) { return expr; }                        \
      |                                                                    ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h: In static member function ‘static B pybind11::detail::op_impl<pybind11::detail::op_float, pybind11::detail::op_u, B, L, pybind11::detail::undefined_t>::execute_cast(const L&)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:191:49: warning: use of old-style cast to ‘double’ [-Wold-style-cast]
  191 | PYBIND11_UNARY_OPERATOR(float, float_, (double) l)
      |                                                 ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/operators.h:148:54: note: in definition of macro ‘PYBIND11_UNARY_OPERATOR’
  148 |         static B execute_cast(const L &l) { return B(expr); }                                     \
      |                                                      ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: In static member function ‘static pybind11::handle pybind11::detail::list_caster<Type, Value>::cast(T&&, pybind11::return_value_policy, pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:47:21: note: in expansion of macro ‘_PyObject_CAST’
   47 |     PyList_SET_ITEM(_PyObject_CAST(op), (index), _PyObject_CAST(value))
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:206:13: note: in expansion of macro ‘PyList_SET_ITEM’
  206 |             PyList_SET_ITEM(l.ptr(), index++, value_.release().ptr()); // steals a reference
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:47:50: note: in expansion of macro ‘_PyObject_CAST’
   47 |     PyList_SET_ITEM(_PyObject_CAST(op), (index), _PyObject_CAST(value))
      |                                                  ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:206:13: note: in expansion of macro ‘PyList_SET_ITEM’
  206 |             PyList_SET_ITEM(l.ptr(), index++, value_.release().ptr()); // steals a reference
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: In static member function ‘static pybind11::handle pybind11::detail::array_caster<ArrayType, Value, Resizable, Size>::cast(T&&, pybind11::return_value_policy, pybind11::handle)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:47:21: note: in expansion of macro ‘_PyObject_CAST’
   47 |     PyList_SET_ITEM(_PyObject_CAST(op), (index), _PyObject_CAST(value))
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:270:13: note: in expansion of macro ‘PyList_SET_ITEM’
  270 |             PyList_SET_ITEM(l.ptr(), index++, value_.release().ptr()); // steals a reference
      |             ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/cpython/listobject.h:47:50: note: in expansion of macro ‘_PyObject_CAST’
   47 |     PyList_SET_ITEM(_PyObject_CAST(op), (index), _PyObject_CAST(value))
      |                                                  ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:270:13: note: in expansion of macro ‘PyList_SET_ITEM’
  270 |             PyList_SET_ITEM(l.ptr(), index++, value_.release().ptr()); // steals a reference
      |             ^~~~~~~~~~~~~~~
In file included from ../python_bindings/bindings.cpp:28:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:363:12: warning: padding struct to align ‘pybind11::detail::variant_caster_visitor::parent’ [-Wpadded]
  363 |     handle parent;
      |            ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl/filesystem.h: In member function ‘bool pybind11::detail::path_caster<T>::load(pybind11::handle, bool)’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:802:37: note: in expansion of macro ‘_PyObject_CAST’
  802 | #  define Py_XDECREF(op) Py_XDECREF(_PyObject_CAST(op))
      |                                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl/filesystem.h:92:9: note: in expansion of macro ‘Py_XDECREF’
   92 |         Py_XDECREF(native);
      |         ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/pyport.h:24:42: warning: use of old-style cast to ‘PyObject*’ {aka ‘struct _object*’} [-Wold-style-cast]
   24 | #define _Py_CAST(type, expr) ((type)(expr))
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:194:28: note: in expansion of macro ‘_Py_CAST’
  194 | #define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))
      |                            ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/python3.12/object.h:708:33: note: in expansion of macro ‘_PyObject_CAST’
  708 | #define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl/filesystem.h:93:9: note: in expansion of macro ‘Py_DECREF’
   93 |         Py_DECREF(buf);
      |         ^~~~~~~~~
../python_bindings/bindings.cpp: At global scope:
../python_bindings/bindings.cpp:37:6: warning: no previous declaration for ‘void run_simulation(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&)’ [-Wmissing-declarations]
   37 | void run_simulation(const std::optional<std::string> &config_file_path,
      |      ^~~~~~~~~~~~~~
../subprojects/seldon/include/config_parser.hpp: In constructor ‘constexpr Seldon::Config::SimulationOptions::SimulationOptions()’:
../subprojects/seldon/include/config_parser.hpp:99:8: warning: ‘Seldon::Config::SimulationOptions::model’ should be initialized in the member initialization list [-Weffc++]
   99 | struct SimulationOptions
      |        ^~~~~~~~~~~~~~~~~
../subprojects/seldon/include/config_parser.hpp:99:8: warning: ‘Seldon::Config::SimulationOptions::model_string’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/config_parser.hpp:99:8: warning: ‘Seldon::Config::SimulationOptions::output_settings’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/config_parser.hpp:99:8: warning: ‘Seldon::Config::SimulationOptions::model_settings’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/config_parser.hpp:99:8: warning: ‘Seldon::Config::SimulationOptions::network_settings’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/config_parser.hpp: In constructor ‘constexpr Seldon::Config::InitialNetworkSettings::InitialNetworkSettings()’:
../subprojects/seldon/include/config_parser.hpp:92:8: warning: ‘Seldon::Config::InitialNetworkSettings::file’ should be initialized in the member initialization list [-Weffc++]
   92 | struct InitialNetworkSettings
      |        ^~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/config_parser.hpp: In constructor ‘constexpr Seldon::Config::SimulationOptions::SimulationOptions()’:
../subprojects/seldon/include/config_parser.hpp:99:8: note: synthesized method ‘constexpr Seldon::Config::InitialNetworkSettings::InitialNetworkSettings()’ first required here
   99 | struct SimulationOptions
      |        ^~~~~~~~~~~~~~~~~
../python_bindings/bindings.cpp: In function ‘void run_simulation(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&)’:
../python_bindings/bindings.cpp:45:39: note: synthesized method ‘constexpr Seldon::Config::SimulationOptions::SimulationOptions()’ first required here
   45 |     Seldon::Config::SimulationOptions simulation_options;
      |                                       ^~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/network.hpp: In instantiation of ‘class Seldon::Network<Seldon::Agent<Seldon::SimpleAgentData> >’:
../subprojects/seldon/include/simulation.hpp:39:24:   required from ‘class Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >’
/usr/include/c++/12/type_traits:1467:45:   required by substitution of ‘template<class _From1, class _To1, class> static std::true_type std::__is_convertible_helper<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >*, Seldon::SimulationInterface*, false>::__test(int) [with _From1 = Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >*; _To1 = Seldon::SimulationInterface*; <template-parameter-1-3> = <missing>]’
/usr/include/c++/12/type_traits:1476:42:   required from ‘struct std::__is_convertible_helper<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >*, Seldon::SimulationInterface*, false>’
/usr/include/c++/12/type_traits:167:12:   recursively required from ‘struct std::__and_<std::is_convertible<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >*, Seldon::SimulationInterface*>, std::__not_<std::is_array<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> > > > >’
/usr/include/c++/12/type_traits:167:12:   required from ‘struct std::__and_<std::__and_<std::is_convertible<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >*, Seldon::SimulationInterface*>, std::__not_<std::is_array<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> > > > >, std::is_convertible<std::default_delete<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> > >, std::default_delete<Seldon::SimulationInterface> > >’
/usr/include/c++/12/type_traits:2244:11:   required by substitution of ‘template<class ... _Cond> using _Require = std::__enable_if_t<std::__and_< <template-parameter-1-1> >::value> [with _Cond = {std::__and_<std::is_convertible<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >*, Seldon::SimulationInterface*>, std::__not_<std::is_array<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> > > > >, std::is_convertible<std::default_delete<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> > >, std::default_delete<Seldon::SimulationInterface> >}]’
/usr/include/c++/12/bits/unique_ptr.h:366:44:   required by substitution of ‘template<class _Up, class _Ep, class> std::unique_ptr<Seldon::SimulationInterface>::unique_ptr(std::unique_ptr<_Tp, _Dp>&&) [with _Up = Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >; _Ep = std::default_delete<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> > >; <template-parameter-1-3> = <missing>]’
../python_bindings/bindings.cpp:61:133:   required from here
../subprojects/seldon/include/network.hpp:31:7: warning: padding struct size to alignment boundary [-Wpadded]
   31 | class Network
      |       ^~~~~~~
../subprojects/seldon/include/network.hpp: In instantiation of ‘class Seldon::Network<Seldon::Agent<Seldon::DiscreteVectorAgentData>, double>’:
../subprojects/seldon/include/simulation.hpp:39:24:   required from ‘class Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >’
/usr/include/c++/12/type_traits:1467:45:   required by substitution of ‘template<class _From1, class _To1, class> static std::true_type std::__is_convertible_helper<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >*, Seldon::SimulationInterface*, false>::__test(int) [with _From1 = Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >*; _To1 = Seldon::SimulationInterface*; <template-parameter-1-3> = <missing>]’
/usr/include/c++/12/type_traits:1476:42:   required from ‘struct std::__is_convertible_helper<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >*, Seldon::SimulationInterface*, false>’
/usr/include/c++/12/type_traits:167:12:   recursively required from ‘struct std::__and_<std::is_convertible<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >*, Seldon::SimulationInterface*>, std::__not_<std::is_array<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> > > > >’
/usr/include/c++/12/type_traits:167:12:   required from ‘struct std::__and_<std::__and_<std::is_convertible<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >*, Seldon::SimulationInterface*>, std::__not_<std::is_array<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> > > > >, std::is_convertible<std::default_delete<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> > >, std::default_delete<Seldon::SimulationInterface> > >’
/usr/include/c++/12/type_traits:2244:11:   required by substitution of ‘template<class ... _Cond> using _Require = std::__enable_if_t<std::__and_< <template-parameter-1-1> >::value> [with _Cond = {std::__and_<std::is_convertible<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >*, Seldon::SimulationInterface*>, std::__not_<std::is_array<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> > > > >, std::is_convertible<std::default_delete<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> > >, std::default_delete<Seldon::SimulationInterface> >}]’
/usr/include/c++/12/bits/unique_ptr.h:366:44:   required by substitution of ‘template<class _Up, class _Ep, class> std::unique_ptr<Seldon::SimulationInterface>::unique_ptr(std::unique_ptr<_Tp, _Dp>&&) [with _Up = Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >; _Ep = std::default_delete<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> > >; <template-parameter-1-3> = <missing>]’
../python_bindings/bindings.cpp:69:144:   required from here
../subprojects/seldon/include/network.hpp:31:7: warning: padding struct size to alignment boundary [-Wpadded]
../subprojects/seldon/include/config_parser.hpp: In constructor ‘constexpr Seldon::Config::DeGrootSettings::DeGrootSettings()’:
../subprojects/seldon/include/config_parser.hpp:44:8: warning: ‘Seldon::Config::DeGrootSettings::convergence_tol’ should be initialized in the member initialization list [-Weffc++]
   44 | struct DeGrootSettings
      |        ^~~~~~~~~~~~~~~
../python_bindings/bindings.cpp: In lambda function:
../python_bindings/bindings.cpp:218:50: note: synthesized method ‘constexpr Seldon::Config::DeGrootSettings::DeGrootSettings()’ first required here
  218 |                  Seldon::Config::DeGrootSettings degroot_settings;
      |                                                  ^~~~~~~~~~~~~~~~
../python_bindings/bindings.cpp: In lambda function:
../python_bindings/bindings.cpp:269:30: warning: declaration of ‘int m’ shadows a parameter [-Wshadow]
  269 |                          int m,
      |                          ~~~~^
../python_bindings/bindings.cpp:157:29: note: shadowed declaration is here
  157 | PYBIND11_MODULE(seldoncore, m) {
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:483:71: note: in definition of macro ‘PYBIND11_MODULE’
  483 |     void PYBIND11_CONCAT(pybind11_init_, name)(::pybind11::module_ & (variable))
      |                                                                       ^~~~~~~~
../python_bindings/bindings.cpp: In lambda function:
../python_bindings/bindings.cpp:382:30: warning: declaration of ‘int m’ shadows a parameter [-Wshadow]
  382 |                          int m,
      |                          ~~~~^
../python_bindings/bindings.cpp:157:29: note: shadowed declaration is here
  157 | PYBIND11_MODULE(seldoncore, m) {
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/common.h:483:71: note: in definition of macro ‘PYBIND11_MODULE’
  483 |     void PYBIND11_CONCAT(pybind11_init_, name)(::pybind11::module_ & (variable))
      |                                                                       ^~~~~~~~
../python_bindings/bindings.cpp: In lambda function:
../python_bindings/bindings.cpp:530:48: warning: conversion from ‘std::size_t’ {aka ‘long unsigned int’} to ‘int’ may change value [-Wconversion]
  530 |                  simulation_options.rng_seed = rng_seed;
      |                                                ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘class fmt::v10::detail::format_string_checker<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:47:   required from ‘consteval fmt::v10::basic_format_string<Char, Args>::basic_format_string(const S&) [with S = char [24]; typename std::enable_if<std::is_convertible<const S&, fmt::v10::basic_string_view<Char> >::value, int>::type <anonymous> = 0; Char = char; Args = {std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}]’
../python_bindings/bindings.cpp:542:58:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2649:22: warning: padding struct to align ‘fmt::v10::detail::format_string_checker<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::context_’ [-Wpadded]
 2649 |   parse_context_type context_;
      |                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>(const char*, const char*, format_string_checker<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::id_adapter’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2497:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_replacement_field(const Char*, const Char*, Handler&&) [with Char = char; Handler = format_string_checker<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   required from here
../python_bindings/bindings.cpp:542:58:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>("Invalid model string {}")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(((fmt::v10::basic_format_string<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>*)this)->fmt::v10::basic_format_string<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::str_, fmt::v10::detail::format_string_checker<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2488:10: warning: padding struct size to alignment boundary [-Wpadded]
 2488 |   struct id_adapter {
      |          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘constexpr void fmt::v10::detail::bigint::operator=(Int) [with Int = int]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2963:34:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2885:48: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 2885 |   template <typename Int> FMT_CONSTEXPR20 void operator=(Int n) {
      |                                                ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘constexpr fmt::v10::basic_memory_buffer<T, SIZE, Allocator>::basic_memory_buffer(fmt::v10::basic_memory_buffer<T, SIZE, Allocator>&&) [with T = unsigned int; long unsigned int SIZE = 32; Allocator = std::allocator<unsigned int>]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2983:69:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:958:19: warning: ‘fmt::v10::basic_memory_buffer<unsigned int, 32>::alloc_’ should be initialized in the member initialization list [-Weffc++]
  958 |   FMT_CONSTEXPR20 basic_memory_buffer(basic_memory_buffer&& other) noexcept {
      |                   ^~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘constexpr void fmt::v10::detail::bigint::operator=(Int) [with Int = __int128 unsigned]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3062:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2885:48: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 2885 |   template <typename Int> FMT_CONSTEXPR20 void operator=(Int n) {
      |                                                ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘constexpr void fmt::v10::detail::bigint::operator=(Int) [with Int = long long unsigned int]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3092:29:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2885:48: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘constexpr void fmt::v10::detail::fill_t<Char>::operator=(fmt::v10::basic_string_view<Char>) [with Char = char]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2475:18:   required from ‘constexpr const Char* fmt::v10::detail::parse_format_specs(const Char*, const Char*, dynamic_format_specs<Char>&, fmt::v10::basic_format_parse_context<Char>&, type) [with Char = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2745:35:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2036:22: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 2036 |   FMT_CONSTEXPR void operator=(basic_string_view<Char> s) {
      |                      ^~~~~~~~
../subprojects/seldon/include/util/misc.hpp: In instantiation of ‘void Seldon::parse_comma_separated_list(const std::string&, CallbackT&) [with CallbackT = agent_from_string<Agent<InertialAgentData> >(const std::string&)::<lambda(int, std::string&)>; std::string = std::__cxx11::basic_string<char>]’:
../subprojects/seldon/include/agents/inertial_agent.hpp:58:39:   required from here
../subprojects/seldon/include/util/misc.hpp:53:19: warning: conversion from ‘long unsigned int’ to ‘int’ may change value [-Wconversion]
   53 |         pos_cur = pos_next;
      |                   ^~~~~~~~
../subprojects/seldon/include/util/misc.hpp: In instantiation of ‘void Seldon::parse_comma_separated_list(const std::string&, CallbackT&) [with CallbackT = agent_from_string<Agent<DiscreteVectorAgentData> >(const std::string&)::<lambda(int, const auto:50&)>; std::string = std::__cxx11::basic_string<char>]’:
../subprojects/seldon/include/agents/discrete_vector_agent.hpp:48:31:   required from here
../subprojects/seldon/include/util/misc.hpp:53:19: warning: conversion from ‘long unsigned int’ to ‘int’ may change value [-Wconversion]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘pybind11::detail::accessor<Policy>::accessor(pybind11::handle, key_type) [with Policy = pybind11::detail::accessor_policies::sequence_item; key_type = long unsigned int]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1260:76:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:995:5: warning: ‘pybind11::detail::accessor<pybind11::detail::accessor_policies::sequence_item>::cache’ should be initialized in the member initialization list [-Weffc++]
  995 |     accessor(handle obj, key_type key) : obj(obj), key(std::move(key)) {}
      |     ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘pybind11::detail::accessor<Policy>::accessor(pybind11::handle, key_type) [with Policy = pybind11::detail::accessor_policies::tuple_item; key_type = long unsigned int]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2065:81:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:995:5: warning: ‘pybind11::detail::accessor<pybind11::detail::accessor_policies::tuple_item>::cache’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘pybind11::detail::generic_iterator<Policy>::generic_iterator(pybind11::handle, pybind11::ssize_t) [with Policy = pybind11::detail::iterator_policies::sequence_slow_readwrite; pybind11::ssize_t = long int]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2137:63:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1163:42: warning: declaration of ‘index’ shadows a member of ‘pybind11::detail::generic_iterator<pybind11::detail::iterator_policies::sequence_slow_readwrite>’ [-Wshadow]
 1163 |     generic_iterator(handle seq, ssize_t index) : Policy(seq, index) {}
      |                                  ~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1269:13: note: shadowed declaration is here
 1269 |     ssize_t index;
      |             ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1163:42: warning: declaration of ‘index’ shadows a member of ‘pybind11::detail::generic_iterator<pybind11::detail::iterator_policies::sequence_slow_readwrite>’ [-Wshadow]
 1163 |     generic_iterator(handle seq, ssize_t index) : Policy(seq, index) {}
      |                                  ~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1269:13: note: shadowed declaration is here
 1269 |     ssize_t index;
      |             ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1163:42: warning: declaration of ‘index’ shadows a member of ‘pybind11::detail::generic_iterator<pybind11::detail::iterator_policies::sequence_slow_readwrite>’ [-Wshadow]
 1163 |     generic_iterator(handle seq, ssize_t index) : Policy(seq, index) {}
      |                                  ~~~~~~~~^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1269:13: note: shadowed declaration is here
 1269 |     ssize_t index;
      |             ^~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘pybind11::detail::accessor<Policy>::accessor(pybind11::handle, key_type) [with Policy = pybind11::detail::accessor_policies::list_item; key_type = long unsigned int]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2154:80:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:995:5: warning: ‘pybind11::detail::accessor<pybind11::detail::accessor_policies::list_item>::cache’ should be initialized in the member initialization list [-Weffc++]
  995 |     accessor(handle obj, key_type key) : obj(obj), key(std::move(key)) {}
      |     ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = pybind11::capsule; Policy = pybind11::detail::accessor_policies::generic_item]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:540:65:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 1005 |     void operator=(T &&value) && {
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = _object*&; Policy = pybind11::detail::accessor_policies::tuple_item]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:944:45:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = pybind11::str; Policy = pybind11::detail::accessor_policies::str_attr]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1254:55:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = pybind11::module_&; Policy = pybind11::detail::accessor_policies::str_attr]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1256:22:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = pybind11::object; Policy = pybind11::detail::accessor_policies::str_attr]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1464:74:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = const pybind11::cpp_function&; Policy = pybind11::detail::accessor_policies::obj_attr]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1523:27:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = pybind11::none; Policy = pybind11::detail::accessor_policies::str_attr]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1525:37:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = pybind11::dict; Policy = pybind11::detail::accessor_policies::str_attr]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2018:41:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = pybind11::cpp_function; Policy = pybind11::detail::accessor_policies::str_attr]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2030:30:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = pybind11::detail::accessor<pybind11::detail::accessor_policies::generic_item>; Policy = pybind11::detail::accessor_policies::generic_item]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2077:97:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘class pybind11::detail::type_caster<char, void>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1380:40:   required from ‘pybind11::tuple pybind11::make_tuple(Args&& ...) [with return_value_policy policy = pybind11::return_value_policy::automatic_reference; Args = {object&, const char*&}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2171:45:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:531:8: warning: ‘pybind11::detail::type_caster<char, void>’ does not have the "cxx11" ABI tag that ‘pybind11::detail::type_caster<char, void>::StringCaster’ {aka ‘pybind11::detail::type_caster<std::__cxx11::basic_string<char>, void>’} (used in the type of ‘pybind11::detail::type_caster<char, void>::str_caster’) has [-Wabi-tag]
  531 | struct type_caster<CharT, enable_if_t<is_std_char_type<CharT>::value>> {
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:534:18: note: ‘pybind11::detail::type_caster<char, void>::str_caster’ declared here
  534 |     StringCaster str_caster;
      |                  ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:517:8: note: ‘pybind11::detail::type_caster<char, void>::StringCaster’ {aka ‘pybind11::detail::type_caster<std::__cxx11::basic_string<char>, void>’} declared here
  517 | struct type_caster<std::basic_string<CharT, Traits, Allocator>,
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  518 |                    enable_if_t<is_std_char_type<CharT>::value>>
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:531:8: warning: ‘pybind11::detail::type_caster<char, void>’ does not have the "cxx11" ABI tag that ‘pybind11::detail::type_caster<char, void>::StringCaster’ {aka ‘pybind11::detail::type_caster<std::__cxx11::basic_string<char>, void>’} (used in the type of ‘pybind11::detail::type_caster<char, void>::str_caster’) has [-Wabi-tag]
  531 | struct type_caster<CharT, enable_if_t<is_std_char_type<CharT>::value>> {
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:534:18: note: ‘pybind11::detail::type_caster<char, void>::str_caster’ declared here
  534 |     StringCaster str_caster;
      |                  ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:517:8: note: ‘pybind11::detail::type_caster<char, void>::StringCaster’ {aka ‘pybind11::detail::type_caster<std::__cxx11::basic_string<char>, void>’} declared here
  517 | struct type_caster<std::basic_string<CharT, Traits, Allocator>,
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  518 |                    enable_if_t<is_std_char_type<CharT>::value>>
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:531:8: warning: padding struct size to alignment boundary [-Wpadded]
  531 | struct type_caster<CharT, enable_if_t<is_std_char_type<CharT>::value>> {
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = pybind11::tuple; Policy = pybind11::detail::accessor_policies::generic_item]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2171:56:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 1005 |     void operator=(T &&value) && {
      |          ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = pybind11::object; Policy = pybind11::detail::accessor_policies::obj_attr]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2172:55:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = pybind11::detail::accessor<pybind11::detail::accessor_policies::generic_item>; Policy = pybind11::detail::accessor_policies::obj_attr]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2178:56:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = pybind11::str; Policy = pybind11::detail::accessor_policies::tuple_item]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2691:33:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘void pybind11::detail::accessor<Policy>::operator=(T&&) && [with T = const char (&)[38]; Policy = pybind11::detail::accessor_policies::str_attr]’:
../python_bindings/bindings.cpp:158:15:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:1005:10: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = std::optional<std::__cxx11::basic_string<char> >]’:
../python_bindings/bindings.cpp:169:59:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 1493 |     return {*this, std::forward<T>(value)};
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = std::optional<Seldon::Config::SimulationOptions>]’:
../python_bindings/bindings.cpp:173:72:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = std::optional<long unsigned int>]’:
../python_bindings/bindings.cpp:202:65:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = bool]’:
../python_bindings/bindings.cpp:204:42:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = int]’:
../python_bindings/bindings.cpp:206:40:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = double]’:
../python_bindings/bindings.cpp:228:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = std::vector<int>]’:
../python_bindings/bindings.cpp:347:44:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = std::vector<double>]’:
../python_bindings/bindings.cpp:348:54:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In instantiation of ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::InitialNetworkSettings; D = std::optional<std::__cxx11::basic_string<char> >; Extra = {}; type_ = Seldon::Config::InitialNetworkSettings; options = {}]’:
../python_bindings/bindings.cpp:514:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:27: warning: ‘pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(const pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&)>’ does not have the "cxx11" ABI tag that ‘std::optional<std::__cxx11::basic_string<char> >’ (used in the type of ‘pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(const pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&)>::<pm capture>’) has [-Wabi-tag]
 1732 |         cpp_function fget([pm](const type &c) -> const D & { return c.*pm; }, is_method(*this)),
      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:28: note: ‘pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(const pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&)>::<pm capture>’ declared here
 1732 |         cpp_function fget([pm](const type &c) -> const D & { return c.*pm; }, is_method(*this)),
      |                            ^~
/usr/include/c++/12/optional:705:11: note: ‘std::optional<std::__cxx11::basic_string<char> >’ declared here
  705 |     class optional
      |           ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:18: warning: ‘pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&, const std::optional<std::__cxx11::basic_string<char> >&)>’ does not have the "cxx11" ABI tag that ‘std::optional<std::__cxx11::basic_string<char> >’ (used in the type of ‘pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&, const std::optional<std::__cxx11::basic_string<char> >&)>::<pm capture>’) has [-Wabi-tag]
 1733 |             fset([pm](type &c, const D &value) { c.*pm = value; }, is_method(*this));
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:19: note: ‘pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&, const std::optional<std::__cxx11::basic_string<char> >&)>::<pm capture>’ declared here
 1733 |             fset([pm](type &c, const D &value) { c.*pm = value; }, is_method(*this));
      |                   ^~
/usr/include/c++/12/optional:705:11: note: ‘std::optional<std::__cxx11::basic_string<char> >’ declared here
  705 |     class optional
      |           ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = const char (&)[8]]’:
../python_bindings/bindings.cpp:553:33:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 1493 |     return {*this, std::forward<T>(value)};
      |                                          ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = unsigned int]’:
../python_bindings/bindings.cpp:554:50:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = Seldon::Config::OutputSettings]’:
../python_bindings/bindings.cpp:555:67:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = Seldon::Config::DeGrootSettings]’:
../python_bindings/bindings.cpp:556:67:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::arg_v pybind11::arg::operator=(T&&) const [with T = Seldon::Config::InitialNetworkSettings]’:
../python_bindings/bindings.cpp:557:76:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1493:42: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: In instantiation of ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = std::__cxx11::basic_string<char>; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’:
../python_bindings/bindings.cpp:558:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:27: warning: ‘pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(const pybind11::class_<Seldon::Config::SimulationOptions>::type&)>’ does not have the "cxx11" ABI tag that ‘std::__cxx11::basic_string<char>’ (used in the type of ‘pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(const pybind11::class_<Seldon::Config::SimulationOptions>::type&)>::<pm capture>’) has [-Wabi-tag]
 1732 |         cpp_function fget([pm](const type &c) -> const D & { return c.*pm; }, is_method(*this)),
      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:28: note: ‘pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(const pybind11::class_<Seldon::Config::SimulationOptions>::type&)>::<pm capture>’ declared here
 1732 |         cpp_function fget([pm](const type &c) -> const D & { return c.*pm; }, is_method(*this)),
      |                            ^~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::__cxx11::basic_string<char>’ declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:18: warning: ‘pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::__cxx11::basic_string<char>&)>’ does not have the "cxx11" ABI tag that ‘std::__cxx11::basic_string<char>’ (used in the type of ‘pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::__cxx11::basic_string<char>&)>::<pm capture>’) has [-Wabi-tag]
 1733 |             fset([pm](type &c, const D &value) { c.*pm = value; }, is_method(*this));
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:19: note: ‘pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::__cxx11::basic_string<char>&)>::<pm capture>’ declared here
 1733 |             fset([pm](type &c, const D &value) { c.*pm = value; }, is_method(*this));
      |                   ^~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::__cxx11::basic_string<char>’ declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
../subprojects/seldon/include/network.hpp: In instantiation of ‘class Seldon::Network<int, double>’:
/usr/include/c++/12/type_traits:787:38:   required from ‘struct std::is_polymorphic<Seldon::Network<int, double> >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1575:60:   required from ‘class pybind11::class_<Seldon::Network<int, double> >’
../python_bindings/bindings.cpp:83:9:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
../subprojects/seldon/include/network.hpp:31:7: warning: padding struct size to alignment boundary [-Wpadded]
   31 | class Network
      |       ^~~~~~~
../subprojects/seldon/include/network.hpp: In instantiation of ‘class Seldon::Network<double, double>’:
/usr/include/c++/12/type_traits:787:38:   required from ‘struct std::is_polymorphic<Seldon::Network<double, double> >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1575:60:   required from ‘class pybind11::class_<Seldon::Network<double, double> >’
../python_bindings/bindings.cpp:83:9:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
../subprojects/seldon/include/network.hpp:31:7: warning: padding struct size to alignment boundary [-Wpadded]
../subprojects/seldon/include/network.hpp: In instantiation of ‘class Seldon::Network<long double, double>’:
../subprojects/seldon/include/network_generation.hpp:78:20:   required by substitution of ‘template<class AgentType> Seldon::Network<AgentT> Seldon::NetworkGeneration::generate_fully_connected(size_t, typename Seldon::Network<AgentT>::WeightT) [with AgentType = long double]’
../python_bindings/bindings.cpp:128:11:   required from ‘void generate_network_generation_bindings(pybind11::module&) [with AgentType = long double; pybind11::module = pybind11::module_]’
../python_bindings/bindings.cpp:569:54:   required from here
../subprojects/seldon/include/network.hpp:31:7: warning: padding struct size to alignment boundary [-Wpadded]
../python_bindings/bindings.cpp: In instantiation of ‘void generate_network_generation_bindings(pybind11::module&) [with AgentType = long double; pybind11::module = pybind11::module_]’:
../python_bindings/bindings.cpp:569:54:   required from here
../python_bindings/bindings.cpp:128:11: error: invalid ‘static_cast’ from type ‘<unresolved overloaded function type>’ to type ‘Seldon::Network<long double, double> (*)(std::size_t)’ {aka ‘Seldon::Network<long double, double> (*)(long unsigned int)’}
  128 |           static_cast<Seldon::Network<AgentType> (*)(std::size_t)>(&Seldon::NetworkGeneration::generate_fully_connected<AgentType>),
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘pybind11::detail::accessor<Policy>::accessor(pybind11::handle, key_type) [with Policy = pybind11::detail::accessor_policies::generic_item; key_type = pybind11::object]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2473:42:   required from ‘pybind11::detail::item_accessor pybind11::detail::object_api<Derived>::operator[](const char*) const [with Derived = pybind11::handle; pybind11::detail::item_accessor = pybind11::detail::accessor<pybind11::detail::accessor_policies::generic_item>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/internals.h:540:41:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:995:5: warning: ‘pybind11::detail::accessor<pybind11::detail::accessor_policies::generic_item>::cache’ should be initialized in the member initialization list [-Weffc++]
  995 |     accessor(handle obj, key_type key) : obj(obj), key(std::move(key)) {}
      |     ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘pybind11::detail::accessor<Policy>::accessor(pybind11::handle, key_type) [with Policy = pybind11::detail::accessor_policies::str_attr; key_type = const char*]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2485:27:   required from ‘pybind11::detail::str_attr_accessor pybind11::detail::object_api<Derived>::attr(const char*) const [with Derived = pybind11::handle; pybind11::detail::str_attr_accessor = pybind11::detail::accessor<pybind11::detail::accessor_policies::str_attr>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:1211:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:995:5: warning: ‘pybind11::detail::accessor<pybind11::detail::accessor_policies::str_attr>::cache’ should be initialized in the member initialization list [-Weffc++]
In file included from /usr/include/c++/12/bits/stl_iterator.h:85,
                 from /usr/include/c++/12/bits/stl_algobase.h:67:
/usr/include/c++/12/bits/stl_construct.h: In instantiation of ‘constexpr decltype (::new(void*(0)) _Tp) std::construct_at(_Tp*, _Args&& ...) [with _Tp = pybind11::detail::argument_record; _Args = {const char (&)[5], std::nullptr_t, pybind11::handle, bool, bool}; decltype (::new(void*(0)) _Tp) = pybind11::detail::argument_record*]’:
/usr/include/c++/12/bits/alloc_traits.h:518:21:   required from ‘static constexpr void std::allocator_traits<std::allocator<_Up> >::construct(allocator_type&, _Up*, _Args&& ...) [with _Up = pybind11::detail::argument_record; _Args = {const char (&)[5], std::nullptr_t, pybind11::handle, bool, bool}; _Tp = pybind11::detail::argument_record; allocator_type = std::allocator<pybind11::detail::argument_record>]’
/usr/include/c++/12/bits/vector.tcc:117:30:   required from ‘constexpr std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {const char (&)[5], std::nullptr_t, pybind11::handle, bool, bool}; _Tp = pybind11::detail::argument_record; _Alloc = std::allocator<pybind11::detail::argument_record>; reference = pybind11::detail::argument_record&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:470:29:   required from here
/usr/include/c++/12/bits/stl_construct.h:95:14: warning: noexcept-expression evaluates to ‘false’ because of a call to ‘pybind11::detail::argument_record::argument_record(const char*, const char*, pybind11::handle, bool, bool)’ [-Wnoexcept]
   95 |     noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:5: note: but ‘pybind11::detail::argument_record::argument_record(const char*, const char*, pybind11::handle, bool, bool)’ does not throw; perhaps it should be declared ‘noexcept’
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |     ^~~~~~~~~~~~~~~
/usr/include/c++/12/bits/stl_construct.h: In instantiation of ‘constexpr decltype (::new(void*(0)) _Tp) std::construct_at(_Tp*, _Args&& ...) [with _Tp = pybind11::detail::argument_record; _Args = {const char* const&, std::nullptr_t, pybind11::handle, bool, const bool&}; decltype (::new(void*(0)) _Tp) = pybind11::detail::argument_record*]’:
/usr/include/c++/12/bits/alloc_traits.h:518:21:   required from ‘static constexpr void std::allocator_traits<std::allocator<_Up> >::construct(allocator_type&, _Up*, _Args&& ...) [with _Up = pybind11::detail::argument_record; _Args = {const char* const&, std::nullptr_t, pybind11::handle, bool, const bool&}; _Tp = pybind11::detail::argument_record; allocator_type = std::allocator<pybind11::detail::argument_record>]’
/usr/include/c++/12/bits/vector.tcc:117:30:   required from ‘constexpr std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {const char* const&, std::nullptr_t, pybind11::handle, bool, const bool&}; _Tp = pybind11::detail::argument_record; _Alloc = std::allocator<pybind11::detail::argument_record>; reference = pybind11::detail::argument_record&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:479:29:   required from here
/usr/include/c++/12/bits/stl_construct.h:95:14: warning: noexcept-expression evaluates to ‘false’ because of a call to ‘pybind11::detail::argument_record::argument_record(const char*, const char*, pybind11::handle, bool, bool)’ [-Wnoexcept]
   95 |     noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:5: note: but ‘pybind11::detail::argument_record::argument_record(const char*, const char*, pybind11::handle, bool, bool)’ does not throw; perhaps it should be declared ‘noexcept’
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |     ^~~~~~~~~~~~~~~
/usr/include/c++/12/bits/stl_construct.h: In instantiation of ‘constexpr decltype (::new(void*(0)) _Tp) std::construct_at(_Tp*, _Args&& ...) [with _Tp = pybind11::detail::argument_record; _Args = {const char* const&, const char* const&, const pybind11::handle&, bool, const bool&}; decltype (::new(void*(0)) _Tp) = pybind11::detail::argument_record*]’:
/usr/include/c++/12/bits/alloc_traits.h:518:21:   required from ‘static constexpr void std::allocator_traits<std::allocator<_Up> >::construct(allocator_type&, _Up*, _Args&& ...) [with _Up = pybind11::detail::argument_record; _Args = {const char* const&, const char* const&, const pybind11::handle&, bool, const bool&}; _Tp = pybind11::detail::argument_record; allocator_type = std::allocator<pybind11::detail::argument_record>]’
/usr/include/c++/12/bits/vector.tcc:117:30:   required from ‘constexpr std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {const char* const&, const char* const&, const pybind11::handle&, bool, const bool&}; _Tp = pybind11::detail::argument_record; _Alloc = std::allocator<pybind11::detail::argument_record>; reference = pybind11::detail::argument_record&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:520:29:   required from here
/usr/include/c++/12/bits/stl_construct.h:95:14: warning: noexcept-expression evaluates to ‘false’ because of a call to ‘pybind11::detail::argument_record::argument_record(const char*, const char*, pybind11::handle, bool, bool)’ [-Wnoexcept]
   95 |     noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../attr.h:185:5: note: but ‘pybind11::detail::argument_record::argument_record(const char*, const char*, pybind11::handle, bool, bool)’ does not throw; perhaps it should be declared ‘noexcept’
  185 |     argument_record(const char *name, const char *descr, handle value, bool convert, bool none)
      |     ^~~~~~~~~~~~~~~
/usr/include/c++/12/bits/stl_construct.h: In instantiation of ‘constexpr decltype (::new(void*(0)) _Tp) std::construct_at(_Tp*, _Args&& ...) [with _Tp = pybind11::handle; _Args = {_object*}; decltype (::new(void*(0)) _Tp) = pybind11::handle*]’:
/usr/include/c++/12/bits/alloc_traits.h:518:21:   required from ‘static constexpr void std::allocator_traits<std::allocator<_Up> >::construct(allocator_type&, _Up*, _Args&& ...) [with _Up = pybind11::handle; _Args = {_object*}; _Tp = pybind11::handle; allocator_type = std::allocator<pybind11::handle>]’
/usr/include/c++/12/bits/vector.tcc:117:30:   required from ‘constexpr std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {_object*}; _Tp = pybind11::handle; _Alloc = std::allocator<pybind11::handle>; reference = pybind11::handle&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:820:43:   required from here
/usr/include/c++/12/bits/stl_construct.h:95:14: warning: noexcept-expression evaluates to ‘false’ because of a call to ‘pybind11::handle::handle(T) [with T = _object*; typename std::enable_if<std::integral_constant<bool, (std::is_same<T, _object*>::value || (std::is_same<T, _object* const>::value || std::is_same<T, std::nullptr_t>::value))>::value, int>::type <anonymous> = 0]’ [-Wnoexcept]
   95 |     noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:228:5: note: but ‘pybind11::handle::handle(T) [with T = _object*; typename std::enable_if<std::integral_constant<bool, (std::is_same<T, _object*>::value || (std::is_same<T, _object* const>::value || std::is_same<T, std::nullptr_t>::value))>::value, int>::type <anonymous> = 0]’ does not throw; perhaps it should be declared ‘noexcept’
  228 |     handle(T ptr) : m_ptr(ptr) {}
      |     ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h: In instantiation of ‘pybind11::detail::accessor<Policy>::accessor(pybind11::handle, key_type) [with Policy = pybind11::detail::accessor_policies::obj_attr; key_type = pybind11::object]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:2481:38:   required from ‘pybind11::detail::obj_attr_accessor pybind11::detail::object_api<Derived>::attr(pybind11::object&&) const [with Derived = pybind11::handle; pybind11::detail::obj_attr_accessor = pybind11::detail::accessor<pybind11::detail::accessor_policies::obj_attr>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1523:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:995:5: warning: ‘pybind11::detail::accessor<pybind11::detail::accessor_policies::obj_attr>::cache’ should be initialized in the member initialization list [-Weffc++]
  995 |     accessor(handle obj, key_type key) : obj(obj), key(std::move(key)) {}
      |     ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::enum_base::init(bool, bool)::<lambda(const pybind11::object&)>; Return = pybind11::str; Args = {const pybind11::object&}; Extra = {pybind11::name, pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::enum_base::init(bool, bool)::<lambda(const pybind11::object&)>; Extra = {pybind11::name, pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2030:30:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const pybind11::object&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const pybind11::object&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::str (*&)(pybind11::handle); Return = pybind11::str; Args = {pybind11::handle}; Extra = {pybind11::name, pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:136:19:   required from ‘pybind11::cpp_function::cpp_function(Return (*)(Args ...), const Extra& ...) [with Return = pybind11::str; Args = {pybind11::handle}; Extra = {pybind11::name, pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2032:96:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::handle>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::handle>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 8; long unsigned int N2 = 8; Ts1 = {}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 8; Ts = {}; Args = {descr<8>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<const pybind11::object&, const pybind11::object&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<const pybind11::object&, const pybind11::object&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::enum_base::init(bool, bool)::<lambda(const pybind11::object&, const pybind11::object&)>; Return = bool; Args = {const pybind11::object&, const pybind11::object&}; Extra = {pybind11::name, pybind11::is_method, pybind11::arg}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::enum_base::init(bool, bool)::<lambda(const pybind11::object&, const pybind11::object&)>; Extra = {pybind11::name, pybind11::is_method, pybind11::arg}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2118:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<18> pybind11::detail::operator,(const descr<8>&, const descr<8>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::enum_base::init(bool, bool)::<lambda(const pybind11::object&, const pybind11::object&)>; Return = bool; Args = {const pybind11::object&, const pybind11::object&}; Extra = {pybind11::name, pybind11::is_method, pybind11::arg}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::enum_base::init(bool, bool)::<lambda(const pybind11::object&, const pybind11::object&)>; Extra = {pybind11::name, pybind11::is_method, pybind11::arg}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2118:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const pybind11::object&, const pybind11::object&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const pybind11::object&, const pybind11::object&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
../subprojects/seldon/include/simulation.hpp: In instantiation of ‘Seldon::Simulation<AgentType>::Simulation(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::SimpleAgentData>]’:
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >; _Args = {Seldon::Config::SimulationOptions&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> > >]’
../python_bindings/bindings.cpp:61:88:   required from here
../subprojects/seldon/include/simulation.hpp:96:5: warning: ‘Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >::gen’ should be initialized in the member initialization list [-Weffc++]
   96 |     Simulation(
      |     ^~~~~~~~~~
../subprojects/seldon/include/simulation.hpp:96:5: warning: ‘Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >::model’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/simulation.hpp:96:5: warning: ‘Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >::network’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/simulation.hpp: In instantiation of ‘Seldon::Simulation<AgentType>::Simulation(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::ActivityAgentData>]’:
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::Simulation<Seldon::Agent<Seldon::ActivityAgentData> >; _Args = {Seldon::Config::SimulationOptions&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::Simulation<Seldon::Agent<Seldon::ActivityAgentData> > >]’
../python_bindings/bindings.cpp:63:95:   required from here
../subprojects/seldon/include/simulation.hpp:96:5: warning: ‘Seldon::Simulation<Seldon::Agent<Seldon::ActivityAgentData> >::gen’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/simulation.hpp:96:5: warning: ‘Seldon::Simulation<Seldon::Agent<Seldon::ActivityAgentData> >::model’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/simulation.hpp:96:5: warning: ‘Seldon::Simulation<Seldon::Agent<Seldon::ActivityAgentData> >::network’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/simulation.hpp: In instantiation of ‘Seldon::Simulation<AgentType>::Simulation(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::InertialAgentData>]’:
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::Simulation<Seldon::Agent<Seldon::InertialAgentData> >; _Args = {Seldon::Config::SimulationOptions&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::Simulation<Seldon::Agent<Seldon::InertialAgentData> > >]’
../python_bindings/bindings.cpp:65:89:   required from here
../subprojects/seldon/include/simulation.hpp:96:5: warning: ‘Seldon::Simulation<Seldon::Agent<Seldon::InertialAgentData> >::gen’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/simulation.hpp:96:5: warning: ‘Seldon::Simulation<Seldon::Agent<Seldon::InertialAgentData> >::model’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/simulation.hpp:96:5: warning: ‘Seldon::Simulation<Seldon::Agent<Seldon::InertialAgentData> >::network’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/simulation.hpp: In instantiation of ‘Seldon::Simulation<AgentType>::Simulation(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’:
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >; _Args = {Seldon::Config::SimulationOptions&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> > >]’
../python_bindings/bindings.cpp:69:99:   required from here
../subprojects/seldon/include/simulation.hpp:96:5: warning: ‘Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >::gen’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/simulation.hpp:96:5: warning: ‘Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >::model’ should be initialized in the member initialization list [-Weffc++]
../subprojects/seldon/include/simulation.hpp:96:5: warning: ‘Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >::network’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::detail::make_caster<T> pybind11::detail::load_type(const pybind11::handle&) [with T = std::__cxx11::basic_string<char>; make_caster<T> = type_caster<std::__cxx11::basic_string<char>, void>]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1177:35:   required from ‘T pybind11::cast(const handle&) [with T = std::__cxx11::basic_string<char>; typename std::enable_if<((! std::is_base_of<detail::pyobject_tag, typename std::remove_reference<_Tp>::type>::value) && (! std::is_same<typename std::remove_cvref<_Tp>::type, _object*>::value)), int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1235:29:   required from ‘T pybind11::handle::cast() const [with T = std::__cxx11::basic_string<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:658:72:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:377:8: warning: ‘pybind11::detail::string_caster<std::__cxx11::basic_string<char>, false>::value’ should be initialized in the member initialization list [-Weffc++]
  377 | struct string_caster {
      |        ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:517:8: note: synthesized method ‘constexpr pybind11::detail::string_caster<std::__cxx11::basic_string<char>, false>::string_caster()’ first required here
  517 | struct type_caster<std::basic_string<CharT, Traits, Allocator>,
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  518 |                    enable_if_t<is_std_char_type<CharT>::value>>
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1160:20: note: synthesized method ‘constexpr pybind11::detail::type_caster<std::__cxx11::basic_string<char>, void>::type_caster()’ first required here
 1160 |     make_caster<T> conv;
      |                    ^~~~
../subprojects/seldon/include/simulation.hpp: In instantiation of ‘void Seldon::Simulation<AgentType>::create_network(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::SimpleAgentData>]’:
../subprojects/seldon/include/simulation.hpp:104:9:   required from ‘Seldon::Simulation<AgentType>::Simulation(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::SimpleAgentData>]’
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >; _Args = {Seldon::Config::SimulationOptions&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> > >]’
../python_bindings/bindings.cpp:61:88:   required from here
../subprojects/seldon/include/simulation.hpp:57:59: warning: conversion from ‘size_t’ {aka ‘long unsigned int’} to ‘int’ may change value [-Wconversion]
   57 |             int n_agents       = options.network_settings.n_agents;
      |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~
../subprojects/seldon/include/simulation.hpp: In instantiation of ‘void Seldon::Simulation<AgentType>::create_network(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::ActivityAgentData>]’:
../subprojects/seldon/include/simulation.hpp:104:9:   required from ‘Seldon::Simulation<AgentType>::Simulation(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::ActivityAgentData>]’
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::Simulation<Seldon::Agent<Seldon::ActivityAgentData> >; _Args = {Seldon::Config::SimulationOptions&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::Simulation<Seldon::Agent<Seldon::ActivityAgentData> > >]’
../python_bindings/bindings.cpp:63:95:   required from here
../subprojects/seldon/include/simulation.hpp:57:59: warning: conversion from ‘size_t’ {aka ‘long unsigned int’} to ‘int’ may change value [-Wconversion]
../subprojects/seldon/include/simulation.hpp: In instantiation of ‘void Seldon::Simulation<AgentType>::create_network(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::InertialAgentData>]’:
../subprojects/seldon/include/simulation.hpp:104:9:   required from ‘Seldon::Simulation<AgentType>::Simulation(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::InertialAgentData>]’
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::Simulation<Seldon::Agent<Seldon::InertialAgentData> >; _Args = {Seldon::Config::SimulationOptions&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::Simulation<Seldon::Agent<Seldon::InertialAgentData> > >]’
../python_bindings/bindings.cpp:65:89:   required from here
../subprojects/seldon/include/simulation.hpp:57:59: warning: conversion from ‘size_t’ {aka ‘long unsigned int’} to ‘int’ may change value [-Wconversion]
../subprojects/seldon/include/simulation.hpp: In instantiation of ‘void Seldon::Simulation<AgentType>::create_network(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’:
../subprojects/seldon/include/simulation.hpp:104:9:   required from ‘Seldon::Simulation<AgentType>::Simulation(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >; _Args = {Seldon::Config::SimulationOptions&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> > >]’
../python_bindings/bindings.cpp:69:99:   required from here
../subprojects/seldon/include/simulation.hpp:57:59: warning: conversion from ‘size_t’ {aka ‘long unsigned int’} to ‘int’ may change value [-Wconversion]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 15; long unsigned int N2 = 15; Ts1 = {}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 15; Ts = {}; Args = {descr<15>, descr<15>, descr<15>, descr<13, Seldon::Config::SimulationOptions>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Return = void; Args = {const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1220:22:   required from ‘pybind11::module_& pybind11::module_::def(const char*, Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
../python_bindings/bindings.cpp:160:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<32> pybind11::detail::operator,(const descr<15>&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 32; long unsigned int N2 = 15; Ts1 = {}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 15; Ts = {}; Args = {descr<15>, descr<15>, descr<15>, descr<13, Seldon::Config::SimulationOptions>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Return = void; Args = {const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1220:22:   required from ‘pybind11::module_& pybind11::module_::def(const char*, Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
../python_bindings/bindings.cpp:160:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<49> pybind11::detail::operator,(const descr<32>&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 49; long unsigned int N2 = 15; Ts1 = {}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 15; Ts = {}; Args = {descr<15>, descr<15>, descr<15>, descr<13, Seldon::Config::SimulationOptions>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Return = void; Args = {const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1220:22:   required from ‘pybind11::module_& pybind11::module_::def(const char*, Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
../python_bindings/bindings.cpp:160:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<66> pybind11::detail::operator,(const descr<49>&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 66; long unsigned int N2 = 13; Ts1 = {}; Ts2 = {Seldon::Config::SimulationOptions}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 15; Ts = {}; Args = {descr<15>, descr<15>, descr<15>, descr<13, Seldon::Config::SimulationOptions>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Return = void; Args = {const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1220:22:   required from ‘pybind11::module_& pybind11::module_::def(const char*, Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
../python_bindings/bindings.cpp:160:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<81, Seldon::Config::SimulationOptions> pybind11::detail::operator,(const descr<66>&, const descr<13, Seldon::Config::SimulationOptions>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Return = void; Args = {const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1220:22:   required from ‘pybind11::module_& pybind11::module_::def(const char*, Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
../python_bindings/bindings.cpp:160:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: In instantiation of ‘constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 4; _Head = pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void>]’:
/usr/include/c++/12/tuple:431:15:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Return = void; Args = {const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1220:22:   required from ‘pybind11::module_& pybind11::module_::def(const char*, Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
../python_bindings/bindings.cpp:160:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21:   in ‘constexpr’ expansion of ‘args_converter.pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>::argument_loader()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7:   in ‘constexpr’ expansion of ‘((pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>*)this)->pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>::argcasters.std::tuple<pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::tuple<>()’
/usr/include/c++/12/tuple:715:15:   in ‘constexpr’ expansion of ‘((std::tuple<pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >*)this)->std::tuple<pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::<anonymous>.std::_Tuple_impl<0, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::_Tuple_impl()’
/usr/include/c++/12/tuple:280:29:   in ‘constexpr’ expansion of ‘((std::_Tuple_impl<0, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >*)this)->std::_Tuple_impl<0, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::<anonymous>.std::_Tuple_impl<1, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::_Tuple_impl()’
/usr/include/c++/12/tuple:280:29:   in ‘constexpr’ expansion of ‘((std::_Tuple_impl<1, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >*)this)->std::_Tuple_impl<1, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::<anonymous>.std::_Tuple_impl<2, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::_Tuple_impl()’
/usr/include/c++/12/tuple:280:29:   in ‘constexpr’ expansion of ‘((std::_Tuple_impl<2, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >*)this)->std::_Tuple_impl<2, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::<anonymous>.std::_Tuple_impl<3, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::_Tuple_impl()’
/usr/include/c++/12/tuple:280:29:   in ‘constexpr’ expansion of ‘((std::_Tuple_impl<3, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >*)this)->std::_Tuple_impl<3, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::<anonymous>.std::_Tuple_impl<4, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::_Tuple_impl()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:308:8: warning: ‘pybind11::detail::optional_caster<std::optional<Seldon::Config::SimulationOptions>, Seldon::Config::SimulationOptions>::value’ should be initialized in the member initialization list [-Weffc++]
  308 | struct optional_caster {
      |        ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:344:8: note: synthesized method ‘constexpr pybind11::detail::optional_caster<std::optional<Seldon::Config::SimulationOptions>, Seldon::Config::SimulationOptions>::optional_caster()’ first required here
  344 | struct type_caster<std::optional<T>> : public optional_caster<std::optional<T>> {};
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/12/bits/unique_ptr.h:36:
/usr/include/c++/12/tuple:190:9: note: synthesized method ‘constexpr pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void>::type_caster()’ first required here
  190 |       : _M_head_impl() { }
      |         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: In instantiation of ‘constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 3; _Head = pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char> >, void>]’:
/usr/include/c++/12/tuple:280:29:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Return = void; Args = {const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1220:22:   required from ‘pybind11::module_& pybind11::module_::def(const char*, Func&&, const Extra& ...) [with Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<Seldon::Config::SimulationOptions>&)>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
../python_bindings/bindings.cpp:160:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21:   in ‘constexpr’ expansion of ‘args_converter.pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>::argument_loader()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7:   in ‘constexpr’ expansion of ‘((pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>*)this)->pybind11::detail::argument_loader<const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::optional<Seldon::Config::SimulationOptions>&>::argcasters.std::tuple<pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::tuple<>()’
/usr/include/c++/12/tuple:715:15:   in ‘constexpr’ expansion of ‘((std::tuple<pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >*)this)->std::tuple<pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::<anonymous>.std::_Tuple_impl<0, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::_Tuple_impl()’
/usr/include/c++/12/tuple:280:29:   in ‘constexpr’ expansion of ‘((std::_Tuple_impl<0, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >*)this)->std::_Tuple_impl<0, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::<anonymous>.std::_Tuple_impl<1, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::_Tuple_impl()’
/usr/include/c++/12/tuple:280:29:   in ‘constexpr’ expansion of ‘((std::_Tuple_impl<1, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >*)this)->std::_Tuple_impl<1, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::<anonymous>.std::_Tuple_impl<2, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::_Tuple_impl()’
/usr/include/c++/12/tuple:280:29:   in ‘constexpr’ expansion of ‘((std::_Tuple_impl<2, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >*)this)->std::_Tuple_impl<2, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::<anonymous>.std::_Tuple_impl<3, pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>, pybind11::detail::type_caster<std::optional<Seldon::Config::SimulationOptions>, void> >::_Tuple_impl()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:308:8: warning: ‘pybind11::detail::optional_caster<std::optional<std::__cxx11::basic_string<char> >, std::__cxx11::basic_string<char> >::value’ should be initialized in the member initialization list [-Weffc++]
  308 | struct optional_caster {
      |        ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:344:8: note: synthesized method ‘constexpr pybind11::detail::optional_caster<std::optional<std::__cxx11::basic_string<char> >, std::__cxx11::basic_string<char> >::optional_caster()’ first required here
  344 | struct type_caster<std::optional<T>> : public optional_caster<std::optional<T>> {};
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/tuple:190:9: note: synthesized method ‘constexpr pybind11::detail::type_caster<std::optional<std::__cxx11::basic_string<char> >, void>::type_caster()’ first required here
  190 |       : _M_head_impl() { }
      |         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, std::optional<long unsigned int>, char [27]>(const char*, std::optional<long unsigned int> Seldon::Config::OutputSettings::*, const char (&)[27])::<lambda(const pybind11::class_<Seldon::Config::OutputSettings>::type&)>; Return = const std::optional<long unsigned int>&; Args = {const Seldon::Config::OutputSettings&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, std::optional<long unsigned int>, char [27]>(const char*, std::optional<long unsigned int> Seldon::Config::OutputSettings::*, const char (&)[27])::<lambda(const pybind11::class_<Seldon::Config::OutputSettings>::type&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::OutputSettings; D = std::optional<long unsigned int>; Extra = {char [27]}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:208:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Config::OutputSettings&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Config::OutputSettings&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 15; Ts1 = {Seldon::Config::OutputSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::OutputSettings}; Args = {descr<15>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const std::optional<long unsigned int>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const std::optional<long unsigned int>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, std::optional<long unsigned int>, char [27]>(const char*, std::optional<long unsigned int> Seldon::Config::OutputSettings::*, const char (&)[27])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const std::optional<long unsigned int>&)>; Return = void; Args = {Seldon::Config::OutputSettings&, const std::optional<long unsigned int>&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, std::optional<long unsigned int>, char [27]>(const char*, std::optional<long unsigned int> Seldon::Config::OutputSettings::*, const char (&)[27])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const std::optional<long unsigned int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::OutputSettings; D = std::optional<long unsigned int>; Extra = {char [27]}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:208:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<20, Seldon::Config::OutputSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::OutputSettings>&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, std::optional<long unsigned int>, char [27]>(const char*, std::optional<long unsigned int> Seldon::Config::OutputSettings::*, const char (&)[27])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const std::optional<long unsigned int>&)>; Return = void; Args = {Seldon::Config::OutputSettings&, const std::optional<long unsigned int>&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, std::optional<long unsigned int>, char [27]>(const char*, std::optional<long unsigned int> Seldon::Config::OutputSettings::*, const char (&)[27])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const std::optional<long unsigned int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::OutputSettings; D = std::optional<long unsigned int>; Extra = {char [27]}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:208:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const std::optional<long unsigned int>&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const std::optional<long unsigned int>&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: In instantiation of ‘constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 1; _Head = pybind11::detail::type_caster<std::optional<long unsigned int>, void>]’:
/usr/include/c++/12/tuple:431:15:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, std::optional<long unsigned int>, char [27]>(const char*, std::optional<long unsigned int> Seldon::Config::OutputSettings::*, const char (&)[27])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const std::optional<long unsigned int>&)>; Return = void; Args = {Seldon::Config::OutputSettings&, const std::optional<long unsigned int>&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, std::optional<long unsigned int>, char [27]>(const char*, std::optional<long unsigned int> Seldon::Config::OutputSettings::*, const char (&)[27])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const std::optional<long unsigned int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::OutputSettings; D = std::optional<long unsigned int>; Extra = {char [27]}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:208:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21:   in ‘constexpr’ expansion of ‘args_converter.pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const std::optional<long unsigned int>&>::argument_loader()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7:   in ‘constexpr’ expansion of ‘((pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const std::optional<long unsigned int>&>*)this)->pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const std::optional<long unsigned int>&>::argcasters.std::tuple<pybind11::detail::type_caster<Seldon::Config::OutputSettings, void>, pybind11::detail::type_caster<std::optional<long unsigned int>, void> >::tuple<>()’
/usr/include/c++/12/tuple:1051:15:   in ‘constexpr’ expansion of ‘((std::tuple<pybind11::detail::type_caster<Seldon::Config::OutputSettings, void>, pybind11::detail::type_caster<std::optional<long unsigned int>, void> >*)this)->std::tuple<pybind11::detail::type_caster<Seldon::Config::OutputSettings, void>, pybind11::detail::type_caster<std::optional<long unsigned int>, void> >::<anonymous>.std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::OutputSettings, void>, pybind11::detail::type_caster<std::optional<long unsigned int>, void> >::_Tuple_impl()’
/usr/include/c++/12/tuple:280:29:   in ‘constexpr’ expansion of ‘((std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::OutputSettings, void>, pybind11::detail::type_caster<std::optional<long unsigned int>, void> >*)this)->std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::OutputSettings, void>, pybind11::detail::type_caster<std::optional<long unsigned int>, void> >::<anonymous>.std::_Tuple_impl<1, pybind11::detail::type_caster<std::optional<long unsigned int>, void> >::_Tuple_impl()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:308:8: warning: ‘pybind11::detail::optional_caster<std::optional<long unsigned int>, long unsigned int>::value’ should be initialized in the member initialization list [-Weffc++]
  308 | struct optional_caster {
      |        ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:344:8: note: synthesized method ‘constexpr pybind11::detail::optional_caster<std::optional<long unsigned int>, long unsigned int>::optional_caster()’ first required here
  344 | struct type_caster<std::optional<T>> : public optional_caster<std::optional<T>> {};
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/tuple:190:9: note: synthesized method ‘constexpr pybind11::detail::type_caster<std::optional<long unsigned int>, void>::type_caster()’ first required here
  190 |       : _M_head_impl() { }
      |         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 6; Ts1 = {Seldon::Config::OutputSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::OutputSettings}; Args = {descr<6>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const bool&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const bool&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, bool, char [16]>(const char*, bool Seldon::Config::OutputSettings::*, const char (&)[16])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const bool&)>; Return = void; Args = {Seldon::Config::OutputSettings&, const bool&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, bool, char [16]>(const char*, bool Seldon::Config::OutputSettings::*, const char (&)[16])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const bool&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::OutputSettings; D = bool; Extra = {char [16]}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:210:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<11, Seldon::Config::OutputSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::OutputSettings>&, const descr<6>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, bool, char [16]>(const char*, bool Seldon::Config::OutputSettings::*, const char (&)[16])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const bool&)>; Return = void; Args = {Seldon::Config::OutputSettings&, const bool&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, bool, char [16]>(const char*, bool Seldon::Config::OutputSettings::*, const char (&)[16])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const bool&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::OutputSettings; D = bool; Extra = {char [16]}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:210:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const bool&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const bool&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 5; Ts1 = {Seldon::Config::OutputSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::OutputSettings}; Args = {descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const long unsigned int&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const long unsigned int&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, long unsigned int, char [13]>(const char*, long unsigned int Seldon::Config::OutputSettings::*, const char (&)[13])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const long unsigned int&)>; Return = void; Args = {Seldon::Config::OutputSettings&, const long unsigned int&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, long unsigned int, char [13]>(const char*, long unsigned int Seldon::Config::OutputSettings::*, const char (&)[13])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const long unsigned int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::OutputSettings; D = long unsigned int; Extra = {char [13]}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:212:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<10, Seldon::Config::OutputSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::OutputSettings>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, long unsigned int, char [13]>(const char*, long unsigned int Seldon::Config::OutputSettings::*, const char (&)[13])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const long unsigned int&)>; Return = void; Args = {Seldon::Config::OutputSettings&, const long unsigned int&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::OutputSettings>::def_readwrite<Seldon::Config::OutputSettings, long unsigned int, char [13]>(const char*, long unsigned int Seldon::Config::OutputSettings::*, const char (&)[13])::<lambda(pybind11::class_<Seldon::Config::OutputSettings>::type&, const long unsigned int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::OutputSettings; D = long unsigned int; Extra = {char [13]}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:212:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const long unsigned int&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::OutputSettings&, const long unsigned int&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeGrootSettings::*, const char (&)[29])::<lambda(const pybind11::class_<Seldon::Config::DeGrootSettings>::type&)>; Return = const std::optional<int>&; Args = {const Seldon::Config::DeGrootSettings&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeGrootSettings::*, const char (&)[29])::<lambda(const pybind11::class_<Seldon::Config::DeGrootSettings>::type&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeGrootSettings; D = std::optional<int>; Extra = {char [29]}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
../python_bindings/bindings.cpp:229:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Config::DeGrootSettings&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Config::DeGrootSettings&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 15; Ts1 = {Seldon::Config::DeGrootSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::DeGrootSettings}; Args = {descr<15>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::DeGrootSettings&, const std::optional<int>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::DeGrootSettings&, const std::optional<int>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeGrootSettings::*, const char (&)[29])::<lambda(pybind11::class_<Seldon::Config::DeGrootSettings>::type&, const std::optional<int>&)>; Return = void; Args = {Seldon::Config::DeGrootSettings&, const std::optional<int>&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeGrootSettings::*, const char (&)[29])::<lambda(pybind11::class_<Seldon::Config::DeGrootSettings>::type&, const std::optional<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeGrootSettings; D = std::optional<int>; Extra = {char [29]}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
../python_bindings/bindings.cpp:229:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<20, Seldon::Config::DeGrootSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::DeGrootSettings>&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeGrootSettings::*, const char (&)[29])::<lambda(pybind11::class_<Seldon::Config::DeGrootSettings>::type&, const std::optional<int>&)>; Return = void; Args = {Seldon::Config::DeGrootSettings&, const std::optional<int>&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeGrootSettings::*, const char (&)[29])::<lambda(pybind11::class_<Seldon::Config::DeGrootSettings>::type&, const std::optional<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeGrootSettings; D = std::optional<int>; Extra = {char [29]}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
../python_bindings/bindings.cpp:229:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::DeGrootSettings&, const std::optional<int>&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::DeGrootSettings&, const std::optional<int>&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: In instantiation of ‘constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 1; _Head = pybind11::detail::type_caster<std::optional<int>, void>]’:
/usr/include/c++/12/tuple:431:15:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeGrootSettings::*, const char (&)[29])::<lambda(pybind11::class_<Seldon::Config::DeGrootSettings>::type&, const std::optional<int>&)>; Return = void; Args = {Seldon::Config::DeGrootSettings&, const std::optional<int>&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeGrootSettings::*, const char (&)[29])::<lambda(pybind11::class_<Seldon::Config::DeGrootSettings>::type&, const std::optional<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeGrootSettings; D = std::optional<int>; Extra = {char [29]}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
../python_bindings/bindings.cpp:229:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21:   in ‘constexpr’ expansion of ‘args_converter.pybind11::detail::argument_loader<Seldon::Config::DeGrootSettings&, const std::optional<int>&>::argument_loader()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7:   in ‘constexpr’ expansion of ‘((pybind11::detail::argument_loader<Seldon::Config::DeGrootSettings&, const std::optional<int>&>*)this)->pybind11::detail::argument_loader<Seldon::Config::DeGrootSettings&, const std::optional<int>&>::argcasters.std::tuple<pybind11::detail::type_caster<Seldon::Config::DeGrootSettings, void>, pybind11::detail::type_caster<std::optional<int>, void> >::tuple<>()’
/usr/include/c++/12/tuple:1051:15:   in ‘constexpr’ expansion of ‘((std::tuple<pybind11::detail::type_caster<Seldon::Config::DeGrootSettings, void>, pybind11::detail::type_caster<std::optional<int>, void> >*)this)->std::tuple<pybind11::detail::type_caster<Seldon::Config::DeGrootSettings, void>, pybind11::detail::type_caster<std::optional<int>, void> >::<anonymous>.std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::DeGrootSettings, void>, pybind11::detail::type_caster<std::optional<int>, void> >::_Tuple_impl()’
/usr/include/c++/12/tuple:280:29:   in ‘constexpr’ expansion of ‘((std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::DeGrootSettings, void>, pybind11::detail::type_caster<std::optional<int>, void> >*)this)->std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::DeGrootSettings, void>, pybind11::detail::type_caster<std::optional<int>, void> >::<anonymous>.std::_Tuple_impl<1, pybind11::detail::type_caster<std::optional<int>, void> >::_Tuple_impl()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:308:8: warning: ‘pybind11::detail::optional_caster<std::optional<int>, int>::value’ should be initialized in the member initialization list [-Weffc++]
  308 | struct optional_caster {
      |        ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:344:8: note: synthesized method ‘constexpr pybind11::detail::optional_caster<std::optional<int>, int>::optional_caster()’ first required here
  344 | struct type_caster<std::optional<T>> : public optional_caster<std::optional<T>> {};
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/tuple:190:9: note: synthesized method ‘constexpr pybind11::detail::type_caster<std::optional<int>, void>::type_caster()’ first required here
  190 |       : _M_head_impl() { }
      |         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 7; Ts1 = {Seldon::Config::DeGrootSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::DeGrootSettings}; Args = {descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::DeGrootSettings&, const double&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::DeGrootSettings&, const double&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, double, char [22]>(const char*, double Seldon::Config::DeGrootSettings::*, const char (&)[22])::<lambda(pybind11::class_<Seldon::Config::DeGrootSettings>::type&, const double&)>; Return = void; Args = {Seldon::Config::DeGrootSettings&, const double&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, double, char [22]>(const char*, double Seldon::Config::DeGrootSettings::*, const char (&)[22])::<lambda(pybind11::class_<Seldon::Config::DeGrootSettings>::type&, const double&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeGrootSettings; D = double; Extra = {char [22]}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
../python_bindings/bindings.cpp:230:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<12, Seldon::Config::DeGrootSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::DeGrootSettings>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, double, char [22]>(const char*, double Seldon::Config::DeGrootSettings::*, const char (&)[22])::<lambda(pybind11::class_<Seldon::Config::DeGrootSettings>::type&, const double&)>; Return = void; Args = {Seldon::Config::DeGrootSettings&, const double&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, double, char [22]>(const char*, double Seldon::Config::DeGrootSettings::*, const char (&)[22])::<lambda(pybind11::class_<Seldon::Config::DeGrootSettings>::type&, const double&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeGrootSettings; D = double; Extra = {char [22]}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
../python_bindings/bindings.cpp:230:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::DeGrootSettings&, const double&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::DeGrootSettings&, const double&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeffuantSettings::*, const char (&)[29])::<lambda(const pybind11::class_<Seldon::Config::DeffuantSettings>::type&)>; Return = const std::optional<int>&; Args = {const Seldon::Config::DeffuantSettings&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeffuantSettings::*, const char (&)[29])::<lambda(const pybind11::class_<Seldon::Config::DeffuantSettings>::type&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeffuantSettings; D = std::optional<int>; Extra = {char [29]}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:258:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Config::DeffuantSettings&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Config::DeffuantSettings&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 15; Ts1 = {Seldon::Config::DeffuantSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::DeffuantSettings}; Args = {descr<15>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const std::optional<int>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const std::optional<int>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeffuantSettings::*, const char (&)[29])::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const std::optional<int>&)>; Return = void; Args = {Seldon::Config::DeffuantSettings&, const std::optional<int>&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeffuantSettings::*, const char (&)[29])::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const std::optional<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeffuantSettings; D = std::optional<int>; Extra = {char [29]}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:258:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<20, Seldon::Config::DeffuantSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::DeffuantSettings>&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeffuantSettings::*, const char (&)[29])::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const std::optional<int>&)>; Return = void; Args = {Seldon::Config::DeffuantSettings&, const std::optional<int>&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, std::optional<int>, char [29]>(const char*, std::optional<int> Seldon::Config::DeffuantSettings::*, const char (&)[29])::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const std::optional<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeffuantSettings; D = std::optional<int>; Extra = {char [29]}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:258:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const std::optional<int>&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const std::optional<int>&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 7; Ts1 = {Seldon::Config::DeffuantSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::DeffuantSettings}; Args = {descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const double&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const double&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, double, char [20]>(const char*, double Seldon::Config::DeffuantSettings::*, const char (&)[20])::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const double&)>; Return = void; Args = {Seldon::Config::DeffuantSettings&, const double&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, double, char [20]>(const char*, double Seldon::Config::DeffuantSettings::*, const char (&)[20])::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const double&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeffuantSettings; D = double; Extra = {char [20]}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:259:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<12, Seldon::Config::DeffuantSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::DeffuantSettings>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, double, char [20]>(const char*, double Seldon::Config::DeffuantSettings::*, const char (&)[20])::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const double&)>; Return = void; Args = {Seldon::Config::DeffuantSettings&, const double&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, double, char [20]>(const char*, double Seldon::Config::DeffuantSettings::*, const char (&)[20])::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const double&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeffuantSettings; D = double; Extra = {char [20]}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:259:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const double&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const double&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 6; Ts1 = {Seldon::Config::DeffuantSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::DeffuantSettings}; Args = {descr<6>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const bool&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const bool&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, bool, char [13]>(const char*, bool Seldon::Config::DeffuantSettings::*, const char (&)[13])::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const bool&)>; Return = void; Args = {Seldon::Config::DeffuantSettings&, const bool&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, bool, char [13]>(const char*, bool Seldon::Config::DeffuantSettings::*, const char (&)[13])::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const bool&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeffuantSettings; D = bool; Extra = {char [13]}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:261:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<11, Seldon::Config::DeffuantSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::DeffuantSettings>&, const descr<6>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, bool, char [13]>(const char*, bool Seldon::Config::DeffuantSettings::*, const char (&)[13])::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const bool&)>; Return = void; Args = {Seldon::Config::DeffuantSettings&, const bool&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, bool, char [13]>(const char*, bool Seldon::Config::DeffuantSettings::*, const char (&)[13])::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const bool&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeffuantSettings; D = bool; Extra = {char [13]}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:261:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const bool&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const bool&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 5; Ts1 = {Seldon::Config::DeffuantSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::DeffuantSettings}; Args = {descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const long unsigned int&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const long unsigned int&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, long unsigned int>(const char*, long unsigned int Seldon::Config::DeffuantSettings::*)::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const long unsigned int&)>; Return = void; Args = {Seldon::Config::DeffuantSettings&, const long unsigned int&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, long unsigned int>(const char*, long unsigned int Seldon::Config::DeffuantSettings::*)::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const long unsigned int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeffuantSettings; D = long unsigned int; Extra = {}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:263:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<10, Seldon::Config::DeffuantSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::DeffuantSettings>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, long unsigned int>(const char*, long unsigned int Seldon::Config::DeffuantSettings::*)::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const long unsigned int&)>; Return = void; Args = {Seldon::Config::DeffuantSettings&, const long unsigned int&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeffuantSettings>::def_readwrite<Seldon::Config::DeffuantSettings, long unsigned int>(const char*, long unsigned int Seldon::Config::DeffuantSettings::*)::<lambda(pybind11::class_<Seldon::Config::DeffuantSettings>::type&, const long unsigned int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeffuantSettings; D = long unsigned int; Extra = {}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:263:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const long unsigned int&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::DeffuantSettings&, const long unsigned int&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::optional<int> >(const char*, std::optional<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(const pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&)>; Return = const std::optional<int>&; Args = {const Seldon::Config::ActivityDrivenSettings&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::optional<int> >(const char*, std::optional<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(const pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::optional<int>; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:356:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Config::ActivityDrivenSettings&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Config::ActivityDrivenSettings&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 15; Ts1 = {Seldon::Config::ActivityDrivenSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::ActivityDrivenSettings}; Args = {descr<15>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::optional<int>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::optional<int>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::optional<int> >(const char*, std::optional<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::optional<int>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const std::optional<int>&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::optional<int> >(const char*, std::optional<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::optional<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::optional<int>; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:356:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<20, Seldon::Config::ActivityDrivenSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::ActivityDrivenSettings>&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::optional<int> >(const char*, std::optional<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::optional<int>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const std::optional<int>&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::optional<int> >(const char*, std::optional<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::optional<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::optional<int>; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:356:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::optional<int>&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::optional<int>&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 7; Ts1 = {Seldon::Config::ActivityDrivenSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::ActivityDrivenSettings}; Args = {descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const double&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const double&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, double>(const char*, double Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const double&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const double&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, double>(const char*, double Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const double&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = double; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:357:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<12, Seldon::Config::ActivityDrivenSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::ActivityDrivenSettings>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, double>(const char*, double Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const double&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const double&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, double>(const char*, double Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const double&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = double; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:357:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const double&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const double&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 5; Ts1 = {Seldon::Config::ActivityDrivenSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::ActivityDrivenSettings}; Args = {descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const int&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const int&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, int>(const char*, int Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const int&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const int&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, int>(const char*, int Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = int; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:358:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<10, Seldon::Config::ActivityDrivenSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::ActivityDrivenSettings>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, int>(const char*, int Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const int&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const int&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, int>(const char*, int Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = int; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:358:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const int&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const int&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 6; Ts1 = {Seldon::Config::ActivityDrivenSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::ActivityDrivenSettings}; Args = {descr<6>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const bool&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const bool&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, bool>(const char*, bool Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const bool&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const bool&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, bool>(const char*, bool Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const bool&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = bool; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:365:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<11, Seldon::Config::ActivityDrivenSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::ActivityDrivenSettings>&, const descr<6>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, bool>(const char*, bool Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const bool&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const bool&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, bool>(const char*, bool Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const bool&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = bool; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:365:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const bool&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const bool&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, long unsigned int>(const char*, long unsigned int Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const long unsigned int&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const long unsigned int&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, long unsigned int>(const char*, long unsigned int Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const long unsigned int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = long unsigned int; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:367:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const long unsigned int&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const long unsigned int&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 11; Ts1 = {Seldon::Config::ActivityDrivenSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::ActivityDrivenSettings}; Args = {descr<11>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<int, std::allocator<int> >&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<int, std::allocator<int> >&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<int> >(const char*, std::vector<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::vector<int>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const std::vector<int, std::allocator<int> >&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<int> >(const char*, std::vector<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::vector<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::vector<int>; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:368:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<16, Seldon::Config::ActivityDrivenSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::ActivityDrivenSettings>&, const descr<11>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<int> >(const char*, std::vector<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::vector<int>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const std::vector<int, std::allocator<int> >&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<int> >(const char*, std::vector<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::vector<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::vector<int>; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:368:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<int, std::allocator<int> >&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<int, std::allocator<int> >&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: In instantiation of ‘constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 1; _Head = pybind11::detail::type_caster<std::vector<int>, void>]’:
/usr/include/c++/12/tuple:431:15:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<int> >(const char*, std::vector<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::vector<int>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const std::vector<int, std::allocator<int> >&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<int> >(const char*, std::vector<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::vector<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::vector<int>; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:368:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21:   in ‘constexpr’ expansion of ‘args_converter.pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<int, std::allocator<int> >&>::argument_loader()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7:   in ‘constexpr’ expansion of ‘((pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<int, std::allocator<int> >&>*)this)->pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<int, std::allocator<int> >&>::argcasters.std::tuple<pybind11::detail::type_caster<Seldon::Config::ActivityDrivenSettings, void>, pybind11::detail::type_caster<std::vector<int, std::allocator<int> >, void> >::tuple<>()’
/usr/include/c++/12/tuple:1051:15:   in ‘constexpr’ expansion of ‘((std::tuple<pybind11::detail::type_caster<Seldon::Config::ActivityDrivenSettings, void>, pybind11::detail::type_caster<std::vector<int, std::allocator<int> >, void> >*)this)->std::tuple<pybind11::detail::type_caster<Seldon::Config::ActivityDrivenSettings, void>, pybind11::detail::type_caster<std::vector<int, std::allocator<int> >, void> >::<anonymous>.std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::ActivityDrivenSettings, void>, pybind11::detail::type_caster<std::vector<int, std::allocator<int> >, void> >::_Tuple_impl()’
/usr/include/c++/12/tuple:280:29:   in ‘constexpr’ expansion of ‘((std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::ActivityDrivenSettings, void>, pybind11::detail::type_caster<std::vector<int, std::allocator<int> >, void> >*)this)->std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::ActivityDrivenSettings, void>, pybind11::detail::type_caster<std::vector<int, std::allocator<int> >, void> >::<anonymous>.std::_Tuple_impl<1, pybind11::detail::type_caster<std::vector<int, std::allocator<int> >, void> >::_Tuple_impl()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:165:8: warning: ‘pybind11::detail::list_caster<std::vector<int>, int>::value’ should be initialized in the member initialization list [-Weffc++]
  165 | struct list_caster {
      |        ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:215:8: note: synthesized method ‘constexpr pybind11::detail::list_caster<std::vector<int>, int>::list_caster()’ first required here
  215 | struct type_caster<std::vector<Type, Alloc>> : list_caster<std::vector<Type, Alloc>, Type> {};
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/tuple:190:9: note: synthesized method ‘constexpr pybind11::detail::type_caster<std::vector<int>, void>::type_caster()’ first required here
  190 |       : _M_head_impl() { }
      |         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 13; Ts1 = {Seldon::Config::ActivityDrivenSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::ActivityDrivenSettings}; Args = {descr<13>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<double, std::allocator<double> >&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<double, std::allocator<double> >&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<double> >(const char*, std::vector<double> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::vector<double>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const std::vector<double, std::allocator<double> >&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<double> >(const char*, std::vector<double> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::vector<double>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::vector<double>; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:369:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<18, Seldon::Config::ActivityDrivenSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::ActivityDrivenSettings>&, const descr<13>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<double> >(const char*, std::vector<double> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::vector<double>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const std::vector<double, std::allocator<double> >&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<double> >(const char*, std::vector<double> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::vector<double>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::vector<double>; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:369:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<double, std::allocator<double> >&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<double, std::allocator<double> >&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: In instantiation of ‘constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 1; _Head = pybind11::detail::type_caster<std::vector<double>, void>]’:
/usr/include/c++/12/tuple:431:15:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<double> >(const char*, std::vector<double> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::vector<double>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenSettings&, const std::vector<double, std::allocator<double> >&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<double> >(const char*, std::vector<double> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenSettings>::type&, const std::vector<double>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::vector<double>; Extra = {}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:369:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21:   in ‘constexpr’ expansion of ‘args_converter.pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<double, std::allocator<double> >&>::argument_loader()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7:   in ‘constexpr’ expansion of ‘((pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<double, std::allocator<double> >&>*)this)->pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenSettings&, const std::vector<double, std::allocator<double> >&>::argcasters.std::tuple<pybind11::detail::type_caster<Seldon::Config::ActivityDrivenSettings, void>, pybind11::detail::type_caster<std::vector<double, std::allocator<double> >, void> >::tuple<>()’
/usr/include/c++/12/tuple:1051:15:   in ‘constexpr’ expansion of ‘((std::tuple<pybind11::detail::type_caster<Seldon::Config::ActivityDrivenSettings, void>, pybind11::detail::type_caster<std::vector<double, std::allocator<double> >, void> >*)this)->std::tuple<pybind11::detail::type_caster<Seldon::Config::ActivityDrivenSettings, void>, pybind11::detail::type_caster<std::vector<double, std::allocator<double> >, void> >::<anonymous>.std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::ActivityDrivenSettings, void>, pybind11::detail::type_caster<std::vector<double, std::allocator<double> >, void> >::_Tuple_impl()’
/usr/include/c++/12/tuple:280:29:   in ‘constexpr’ expansion of ‘((std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::ActivityDrivenSettings, void>, pybind11::detail::type_caster<std::vector<double, std::allocator<double> >, void> >*)this)->std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::ActivityDrivenSettings, void>, pybind11::detail::type_caster<std::vector<double, std::allocator<double> >, void> >::<anonymous>.std::_Tuple_impl<1, pybind11::detail::type_caster<std::vector<double, std::allocator<double> >, void> >::_Tuple_impl()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:165:8: warning: ‘pybind11::detail::list_caster<std::vector<double>, double>::value’ should be initialized in the member initialization list [-Weffc++]
  165 | struct list_caster {
      |        ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:215:8: note: synthesized method ‘constexpr pybind11::detail::list_caster<std::vector<double>, double>::list_caster()’ first required here
  215 | struct type_caster<std::vector<Type, Alloc>> : list_caster<std::vector<Type, Alloc>, Type> {};
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/tuple:190:9: note: synthesized method ‘constexpr pybind11::detail::type_caster<std::vector<double>, void>::type_caster()’ first required here
  190 |       : _M_head_impl() { }
      |         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenInertialSettings, double>(const char*, double Seldon::Config::ActivityDrivenInertialSettings::*)::<lambda(const pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&)>; Return = const double&; Args = {const Seldon::Config::ActivityDrivenInertialSettings&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenInertialSettings, double>(const char*, double Seldon::Config::ActivityDrivenInertialSettings::*)::<lambda(const pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenInertialSettings; D = double; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:472:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Config::ActivityDrivenInertialSettings&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Config::ActivityDrivenInertialSettings&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 7; Ts1 = {Seldon::Config::ActivityDrivenInertialSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::ActivityDrivenInertialSettings}; Args = {descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const double&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const double&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenInertialSettings, double>(const char*, double Seldon::Config::ActivityDrivenInertialSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const double&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const double&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenInertialSettings, double>(const char*, double Seldon::Config::ActivityDrivenInertialSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const double&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenInertialSettings; D = double; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:472:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<12, Seldon::Config::ActivityDrivenInertialSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::ActivityDrivenInertialSettings>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenInertialSettings, double>(const char*, double Seldon::Config::ActivityDrivenInertialSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const double&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const double&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenInertialSettings, double>(const char*, double Seldon::Config::ActivityDrivenInertialSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const double&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenInertialSettings; D = double; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:472:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const double&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const double&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 15; Ts1 = {Seldon::Config::ActivityDrivenInertialSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::ActivityDrivenInertialSettings}; Args = {descr<15>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const std::optional<int>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const std::optional<int>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::optional<int> >(const char*, std::optional<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const std::optional<int>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const std::optional<int>&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::optional<int> >(const char*, std::optional<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const std::optional<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::optional<int>; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:473:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<20, Seldon::Config::ActivityDrivenInertialSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::ActivityDrivenInertialSettings>&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::optional<int> >(const char*, std::optional<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const std::optional<int>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const std::optional<int>&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::optional<int> >(const char*, std::optional<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const std::optional<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::optional<int>; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:473:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const std::optional<int>&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const std::optional<int>&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 5; Ts1 = {Seldon::Config::ActivityDrivenInertialSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::ActivityDrivenInertialSettings}; Args = {descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const int&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const int&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, int>(const char*, int Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const int&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const int&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, int>(const char*, int Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = int; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:475:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<10, Seldon::Config::ActivityDrivenInertialSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::ActivityDrivenInertialSettings>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, int>(const char*, int Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const int&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const int&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, int>(const char*, int Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = int; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:475:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const int&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const int&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 6; Ts1 = {Seldon::Config::ActivityDrivenInertialSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::ActivityDrivenInertialSettings}; Args = {descr<6>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const bool&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const bool&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, bool>(const char*, bool Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const bool&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const bool&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, bool>(const char*, bool Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const bool&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = bool; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:482:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<11, Seldon::Config::ActivityDrivenInertialSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::ActivityDrivenInertialSettings>&, const descr<6>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, bool>(const char*, bool Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const bool&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const bool&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, bool>(const char*, bool Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const bool&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = bool; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:482:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const bool&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const bool&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, long unsigned int>(const char*, long unsigned int Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const long unsigned int&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const long unsigned int&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, long unsigned int>(const char*, long unsigned int Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const long unsigned int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = long unsigned int; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:484:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const long unsigned int&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const long unsigned int&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 11; Ts1 = {Seldon::Config::ActivityDrivenInertialSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::ActivityDrivenInertialSettings}; Args = {descr<11>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const std::vector<int, std::allocator<int> >&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const std::vector<int, std::allocator<int> >&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<int> >(const char*, std::vector<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const std::vector<int>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const std::vector<int, std::allocator<int> >&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<int> >(const char*, std::vector<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const std::vector<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::vector<int>; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:485:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<16, Seldon::Config::ActivityDrivenInertialSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::ActivityDrivenInertialSettings>&, const descr<11>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<int> >(const char*, std::vector<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const std::vector<int>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const std::vector<int, std::allocator<int> >&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<int> >(const char*, std::vector<int> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const std::vector<int>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::vector<int>; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:485:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const std::vector<int, std::allocator<int> >&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const std::vector<int, std::allocator<int> >&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 13; Ts1 = {Seldon::Config::ActivityDrivenInertialSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::ActivityDrivenInertialSettings}; Args = {descr<13>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const std::vector<double, std::allocator<double> >&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const std::vector<double, std::allocator<double> >&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<double> >(const char*, std::vector<double> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const std::vector<double>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const std::vector<double, std::allocator<double> >&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<double> >(const char*, std::vector<double> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const std::vector<double>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::vector<double>; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:486:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<18, Seldon::Config::ActivityDrivenInertialSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::ActivityDrivenInertialSettings>&, const descr<13>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<double> >(const char*, std::vector<double> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const std::vector<double>&)>; Return = void; Args = {Seldon::Config::ActivityDrivenInertialSettings&, const std::vector<double, std::allocator<double> >&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::def_readwrite<Seldon::Config::ActivityDrivenSettings, std::vector<double> >(const char*, std::vector<double> Seldon::Config::ActivityDrivenSettings::*)::<lambda(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>::type&, const std::vector<double>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::ActivityDrivenSettings; D = std::vector<double>; Extra = {}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:486:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const std::vector<double, std::allocator<double> >&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::ActivityDrivenInertialSettings&, const std::vector<double, std::allocator<double> >&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(const pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&)>; Return = const std::optional<std::__cxx11::basic_string<char> >&; Args = {const Seldon::Config::InitialNetworkSettings&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(const pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::InitialNetworkSettings; D = std::optional<std::__cxx11::basic_string<char> >; Extra = {}; type_ = Seldon::Config::InitialNetworkSettings; options = {}]’
../python_bindings/bindings.cpp:514:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Config::InitialNetworkSettings&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Config::InitialNetworkSettings&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 15; Ts1 = {Seldon::Config::InitialNetworkSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::InitialNetworkSettings}; Args = {descr<15>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::InitialNetworkSettings&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::InitialNetworkSettings&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&, const std::optional<std::__cxx11::basic_string<char> >&)>; Return = void; Args = {Seldon::Config::InitialNetworkSettings&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&, const std::optional<std::__cxx11::basic_string<char> >&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::InitialNetworkSettings; D = std::optional<std::__cxx11::basic_string<char> >; Extra = {}; type_ = Seldon::Config::InitialNetworkSettings; options = {}]’
../python_bindings/bindings.cpp:514:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<20, Seldon::Config::InitialNetworkSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::InitialNetworkSettings>&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&, const std::optional<std::__cxx11::basic_string<char> >&)>; Return = void; Args = {Seldon::Config::InitialNetworkSettings&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&, const std::optional<std::__cxx11::basic_string<char> >&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::InitialNetworkSettings; D = std::optional<std::__cxx11::basic_string<char> >; Extra = {}; type_ = Seldon::Config::InitialNetworkSettings; options = {}]’
../python_bindings/bindings.cpp:514:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::InitialNetworkSettings&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::InitialNetworkSettings&, const std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 5; Ts1 = {Seldon::Config::InitialNetworkSettings}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::InitialNetworkSettings}; Args = {descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::InitialNetworkSettings&, const long unsigned int&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::InitialNetworkSettings&, const long unsigned int&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, long unsigned int>(const char*, long unsigned int Seldon::Config::InitialNetworkSettings::*)::<lambda(pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&, const long unsigned int&)>; Return = void; Args = {Seldon::Config::InitialNetworkSettings&, const long unsigned int&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, long unsigned int>(const char*, long unsigned int Seldon::Config::InitialNetworkSettings::*)::<lambda(pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&, const long unsigned int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::InitialNetworkSettings; D = long unsigned int; Extra = {}; type_ = Seldon::Config::InitialNetworkSettings; options = {}]’
../python_bindings/bindings.cpp:515:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<10, Seldon::Config::InitialNetworkSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::InitialNetworkSettings>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, long unsigned int>(const char*, long unsigned int Seldon::Config::InitialNetworkSettings::*)::<lambda(pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&, const long unsigned int&)>; Return = void; Args = {Seldon::Config::InitialNetworkSettings&, const long unsigned int&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, long unsigned int>(const char*, long unsigned int Seldon::Config::InitialNetworkSettings::*)::<lambda(pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&, const long unsigned int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::InitialNetworkSettings; D = long unsigned int; Extra = {}; type_ = Seldon::Config::InitialNetworkSettings; options = {}]’
../python_bindings/bindings.cpp:515:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::InitialNetworkSettings&, const long unsigned int&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::InitialNetworkSettings&, const long unsigned int&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(const pybind11::class_<Seldon::Config::SimulationOptions>::type&)>; Return = const std::__cxx11::basic_string<char>&; Args = {const Seldon::Config::SimulationOptions&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(const pybind11::class_<Seldon::Config::SimulationOptions>::type&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = std::__cxx11::basic_string<char>; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:558:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Config::SimulationOptions&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Config::SimulationOptions&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 5; Ts1 = {Seldon::Config::SimulationOptions}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::SimulationOptions}; Args = {descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::__cxx11::basic_string<char>&)>; Return = void; Args = {Seldon::Config::SimulationOptions&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::__cxx11::basic_string<char>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = std::__cxx11::basic_string<char>; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:558:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<10, Seldon::Config::SimulationOptions> pybind11::detail::operator,(const descr<3, Seldon::Config::SimulationOptions>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::__cxx11::basic_string<char>&)>; Return = void; Args = {Seldon::Config::SimulationOptions&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::__cxx11::basic_string<char>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = std::__cxx11::basic_string<char>; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:558:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, int>(const char*, int Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const int&)>; Return = void; Args = {Seldon::Config::SimulationOptions&, const int&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, int>(const char*, int Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const int&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = int; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:559:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const int&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const int&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 3; Ts1 = {Seldon::Config::SimulationOptions}; Ts2 = {Seldon::Config::OutputSettings}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::SimulationOptions}; Args = {descr<3, Seldon::Config::OutputSettings>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const Seldon::Config::OutputSettings&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const Seldon::Config::OutputSettings&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, Seldon::Config::OutputSettings>(const char*, Seldon::Config::OutputSettings Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const Seldon::Config::OutputSettings&)>; Return = void; Args = {Seldon::Config::SimulationOptions&, const Seldon::Config::OutputSettings&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, Seldon::Config::OutputSettings>(const char*, Seldon::Config::OutputSettings Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const Seldon::Config::OutputSettings&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = Seldon::Config::OutputSettings; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:560:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<8, Seldon::Config::SimulationOptions, Seldon::Config::OutputSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::SimulationOptions>&, const descr<3, Seldon::Config::OutputSettings>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, Seldon::Config::OutputSettings>(const char*, Seldon::Config::OutputSettings Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const Seldon::Config::OutputSettings&)>; Return = void; Args = {Seldon::Config::SimulationOptions&, const Seldon::Config::OutputSettings&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, Seldon::Config::OutputSettings>(const char*, Seldon::Config::OutputSettings Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const Seldon::Config::OutputSettings&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = Seldon::Config::OutputSettings; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:560:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const Seldon::Config::OutputSettings&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const Seldon::Config::OutputSettings&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 1; long unsigned int N2 = 1; Ts1 = {Seldon::Config::DeGrootSettings}; Ts2 = {Seldon::Config::ActivityDrivenSettings}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 1; Ts = {Seldon::Config::DeGrootSettings}; Args = {descr<1, Seldon::Config::ActivityDrivenSettings>, descr<1, Seldon::Config::ActivityDrivenInertialSettings>, descr<1, Seldon::Config::DeffuantSettings>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:423:5:   required from ‘constexpr const auto pybind11::detail::variant_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >::name’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:423:5:   required from ‘struct pybind11::detail::variant_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:431:8:   required from ‘class pybind11::detail::type_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, void>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:285:63:   recursively required by substitution of ‘template<class Return> struct pybind11::detail::return_value_policy_override<Return, typename std::enable_if<std::is_base_of<pybind11::detail::type_caster_generic, pybind11::detail::type_caster<typename pybind11::detail::intrinsic_type<T>::type> >::value, void>::type> [with Return = const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:285:63:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >(const char*, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> Seldon::Config::SimulationOptions::*)::<lambda(const pybind11::class_<Seldon::Config::SimulationOptions>::type&)>; Return = const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&; Args = {const Seldon::Config::SimulationOptions&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >(const char*, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> Seldon::Config::SimulationOptions::*)::<lambda(const pybind11::class_<Seldon::Config::SimulationOptions>::type&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:561:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<4, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings> pybind11::detail::operator,(const descr<1, Seldon::Config::DeGrootSettings>&, const descr<1, Seldon::Config::ActivityDrivenSettings>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 4; long unsigned int N2 = 1; Ts1 = {Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings}; Ts2 = {Seldon::Config::ActivityDrivenInertialSettings}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 1; Ts = {Seldon::Config::DeGrootSettings}; Args = {descr<1, Seldon::Config::ActivityDrivenSettings>, descr<1, Seldon::Config::ActivityDrivenInertialSettings>, descr<1, Seldon::Config::DeffuantSettings>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:423:5:   required from ‘constexpr const auto pybind11::detail::variant_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >::name’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:423:5:   required from ‘struct pybind11::detail::variant_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:431:8:   required from ‘class pybind11::detail::type_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, void>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:285:63:   recursively required by substitution of ‘template<class Return> struct pybind11::detail::return_value_policy_override<Return, typename std::enable_if<std::is_base_of<pybind11::detail::type_caster_generic, pybind11::detail::type_caster<typename pybind11::detail::intrinsic_type<T>::type> >::value, void>::type> [with Return = const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:285:63:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >(const char*, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> Seldon::Config::SimulationOptions::*)::<lambda(const pybind11::class_<Seldon::Config::SimulationOptions>::type&)>; Return = const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&; Args = {const Seldon::Config::SimulationOptions&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >(const char*, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> Seldon::Config::SimulationOptions::*)::<lambda(const pybind11::class_<Seldon::Config::SimulationOptions>::type&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:561:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<7, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings> pybind11::detail::operator,(const descr<4, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings>&, const descr<1, Seldon::Config::ActivityDrivenInertialSettings>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 7; long unsigned int N2 = 1; Ts1 = {Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings}; Ts2 = {Seldon::Config::DeffuantSettings}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 1; Ts = {Seldon::Config::DeGrootSettings}; Args = {descr<1, Seldon::Config::ActivityDrivenSettings>, descr<1, Seldon::Config::ActivityDrivenInertialSettings>, descr<1, Seldon::Config::DeffuantSettings>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:423:5:   required from ‘constexpr const auto pybind11::detail::variant_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >::name’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:423:5:   required from ‘struct pybind11::detail::variant_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:431:8:   required from ‘class pybind11::detail::type_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, void>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:285:63:   recursively required by substitution of ‘template<class Return> struct pybind11::detail::return_value_policy_override<Return, typename std::enable_if<std::is_base_of<pybind11::detail::type_caster_generic, pybind11::detail::type_caster<typename pybind11::detail::intrinsic_type<T>::type> >::value, void>::type> [with Return = const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:285:63:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >(const char*, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> Seldon::Config::SimulationOptions::*)::<lambda(const pybind11::class_<Seldon::Config::SimulationOptions>::type&)>; Return = const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&; Args = {const Seldon::Config::SimulationOptions&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >(const char*, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> Seldon::Config::SimulationOptions::*)::<lambda(const pybind11::class_<Seldon::Config::SimulationOptions>::type&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:561:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<10, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> pybind11::detail::operator,(const descr<7, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings>&, const descr<1, Seldon::Config::DeffuantSettings>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 19; Ts1 = {Seldon::Config::SimulationOptions}; Ts2 = {Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::SimulationOptions}; Args = {descr<19, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >(const char*, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&)>; Return = void; Args = {Seldon::Config::SimulationOptions&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >(const char*, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:561:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<24, Seldon::Config::SimulationOptions, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::SimulationOptions>&, const descr<19, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >(const char*, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&)>; Return = void; Args = {Seldon::Config::SimulationOptions&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >(const char*, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:561:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: In instantiation of ‘constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 1; _Head = pybind11::detail::type_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, void>]’:
/usr/include/c++/12/tuple:431:15:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >(const char*, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&)>; Return = void; Args = {Seldon::Config::SimulationOptions&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >(const char*, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:561:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21:   in ‘constexpr’ expansion of ‘args_converter.pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&>::argument_loader()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7:   in ‘constexpr’ expansion of ‘((pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&>*)this)->pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&>::argcasters.std::tuple<pybind11::detail::type_caster<Seldon::Config::SimulationOptions, void>, pybind11::detail::type_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, void> >::tuple<>()’
/usr/include/c++/12/tuple:1051:15:   in ‘constexpr’ expansion of ‘((std::tuple<pybind11::detail::type_caster<Seldon::Config::SimulationOptions, void>, pybind11::detail::type_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, void> >*)this)->std::tuple<pybind11::detail::type_caster<Seldon::Config::SimulationOptions, void>, pybind11::detail::type_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, void> >::<anonymous>.std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::SimulationOptions, void>, pybind11::detail::type_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, void> >::_Tuple_impl()’
/usr/include/c++/12/tuple:280:29:   in ‘constexpr’ expansion of ‘((std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::SimulationOptions, void>, pybind11::detail::type_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, void> >*)this)->std::_Tuple_impl<0, pybind11::detail::type_caster<Seldon::Config::SimulationOptions, void>, pybind11::detail::type_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, void> >::<anonymous>.std::_Tuple_impl<1, pybind11::detail::type_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, void> >::_Tuple_impl()’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:390:8: warning: ‘pybind11::detail::variant_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >::value’ should be initialized in the member initialization list [-Weffc++]
  390 | struct variant_caster<V<Ts...>> {
      |        ^~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:431:8: note: synthesized method ‘constexpr pybind11::detail::variant_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> >::variant_caster()’ first required here
  431 | struct type_caster<std::variant<Ts...>> : variant_caster<std::variant<Ts...>> {};
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/tuple:190:9: note: synthesized method ‘constexpr pybind11::detail::type_caster<std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, void>::type_caster()’ first required here
  190 |       : _M_head_impl() { }
      |         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 3; Ts1 = {Seldon::Config::SimulationOptions}; Ts2 = {Seldon::Config::InitialNetworkSettings}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Config::SimulationOptions}; Args = {descr<3, Seldon::Config::InitialNetworkSettings>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const Seldon::Config::InitialNetworkSettings&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const Seldon::Config::InitialNetworkSettings&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, Seldon::Config::InitialNetworkSettings>(const char*, Seldon::Config::InitialNetworkSettings Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const Seldon::Config::InitialNetworkSettings&)>; Return = void; Args = {Seldon::Config::SimulationOptions&, const Seldon::Config::InitialNetworkSettings&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, Seldon::Config::InitialNetworkSettings>(const char*, Seldon::Config::InitialNetworkSettings Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const Seldon::Config::InitialNetworkSettings&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = Seldon::Config::InitialNetworkSettings; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:562:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<8, Seldon::Config::SimulationOptions, Seldon::Config::InitialNetworkSettings> pybind11::detail::operator,(const descr<3, Seldon::Config::SimulationOptions>&, const descr<3, Seldon::Config::InitialNetworkSettings>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, Seldon::Config::InitialNetworkSettings>(const char*, Seldon::Config::InitialNetworkSettings Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const Seldon::Config::InitialNetworkSettings&)>; Return = void; Args = {Seldon::Config::SimulationOptions&, const Seldon::Config::InitialNetworkSettings&}; Extra = {pybind11::is_method}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, Seldon::Config::InitialNetworkSettings>(const char*, Seldon::Config::InitialNetworkSettings Seldon::Config::SimulationOptions::*)::<lambda(pybind11::class_<Seldon::Config::SimulationOptions>::type&, const Seldon::Config::InitialNetworkSettings&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::SimulationOptions; D = Seldon::Config::InitialNetworkSettings; Extra = {}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:562:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const Seldon::Config::InitialNetworkSettings&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Config::SimulationOptions&, const Seldon::Config::InitialNetworkSettings&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘pybind11::detail::make_caster<T> pybind11::detail::load_type(const pybind11::handle&) [with T = std::basic_string_view<char>; make_caster<T> = type_caster<std::basic_string_view<char>, void>]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1177:35:   required from ‘T pybind11::cast(const handle&) [with T = std::basic_string_view<char>; typename std::enable_if<((! std::is_base_of<detail::pyobject_tag, typename std::remove_reference<_Tp>::type>::value) && (! std::is_same<typename std::remove_cvref<_Tp>::type, _object*>::value)), int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1276:23:   required from ‘std::enable_if_t<((! std::is_base_of<pybind11::detail::pyobject_tag, typename std::remove_reference<_Tp>::type>::value) && pybind11::detail::move_if_unreferenced<T>::value), T> pybind11::cast(object&&) [with T = std::basic_string_view<char>; std::enable_if_t<((! std::is_base_of<detail::pyobject_tag, typename std::remove_reference<_Tp>::type>::value) && detail::move_if_unreferenced<T>::value), T> = std::basic_string_view<char>; typename std::remove_reference<_Tp>::type = std::basic_string_view<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1298:29:   required from ‘T pybind11::object::cast() && [with T = std::basic_string_view<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:441:42:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:377:8: warning: ‘pybind11::detail::string_caster<std::basic_string_view<char>, true>::value’ should be initialized in the member initialization list [-Weffc++]
  377 | struct string_caster {
      |        ^~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:523:8: note: synthesized method ‘constexpr pybind11::detail::string_caster<std::basic_string_view<char>, true>::string_caster()’ first required here
  523 | struct type_caster<std::basic_string_view<CharT, Traits>,
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  524 |                    enable_if_t<is_std_char_type<CharT>::value>>
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1160:20: note: synthesized method ‘constexpr pybind11::detail::type_caster<std::basic_string_view<char>, void>::type_caster()’ first required here
 1160 |     make_caster<T> conv;
      |                    ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<long unsigned int, Seldon::Network<int, double>, pybind11::name, pybind11::is_method, pybind11::sibling>(long unsigned int (Seldon::Network<int, double>::*)() const, const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(const Seldon::Network<int, double>*)>; Return = long unsigned int; Args = {const Seldon::Network<int, double>*}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:175:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) const, const Extra& ...) [with Return = long unsigned int; Class = Seldon::Network<int, double>; Arg = {}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = long unsigned int (Seldon::Network<int, double>::*)() const; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:90:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Network<int, double>*>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Network<int, double>*>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 15; Ts1 = {Seldon::Network<int, double>}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<int, double>}; Args = {descr<15>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<const Seldon::Network<int, double>*, std::optional<long unsigned int> >::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<const Seldon::Network<int, double>*, std::optional<long unsigned int> >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<long unsigned int, Seldon::Network<int, double>, std::optional<long unsigned int>, pybind11::name, pybind11::is_method, pybind11::sibling>(long unsigned int (Seldon::Network<int, double>::*)(std::optional<long unsigned int>) const, const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(const Seldon::Network<int, double>*, std::optional<long unsigned int>)>; Return = long unsigned int; Args = {const Seldon::Network<int, double>*, std::optional<long unsigned int>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:175:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) const, const Extra& ...) [with Return = long unsigned int; Class = Seldon::Network<int, double>; Arg = {std::optional<long unsigned int>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = long unsigned int (Seldon::Network<int, double>::*)(std::optional<long unsigned int>) const; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:91:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<20, Seldon::Network<int, double> > pybind11::detail::operator,(const descr<3, Seldon::Network<int, double> >&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<long unsigned int, Seldon::Network<int, double>, std::optional<long unsigned int>, pybind11::name, pybind11::is_method, pybind11::sibling>(long unsigned int (Seldon::Network<int, double>::*)(std::optional<long unsigned int>) const, const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(const Seldon::Network<int, double>*, std::optional<long unsigned int>)>; Return = long unsigned int; Args = {const Seldon::Network<int, double>*, std::optional<long unsigned int>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:175:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) const, const Extra& ...) [with Return = long unsigned int; Class = Seldon::Network<int, double>; Arg = {std::optional<long unsigned int>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = long unsigned int (Seldon::Network<int, double>::*)(std::optional<long unsigned int>) const; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:91:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Network<int, double>*, std::optional<long unsigned int> >::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Network<int, double>*, std::optional<long unsigned int> >::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 5; Ts1 = {Seldon::Network<int, double>}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<int, double>}; Args = {descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<const Seldon::Network<int, double>*, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<const Seldon::Network<int, double>*, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<std::span<const long unsigned int>, Seldon::Network<int, double>, long unsigned int, pybind11::name, pybind11::is_method, pybind11::sibling>(std::span<const long unsigned int> (Seldon::Network<int, double>::*)(long unsigned int) const, const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(const Seldon::Network<int, double>*, long unsigned int)>; Return = std::span<const long unsigned int>; Args = {const Seldon::Network<int, double>*, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:175:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) const, const Extra& ...) [with Return = std::span<const long unsigned int>; Class = Seldon::Network<int, double>; Arg = {long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = std::span<const long unsigned int> (Seldon::Network<int, double>::*)(long unsigned int) const; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:97:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<10, Seldon::Network<int, double> > pybind11::detail::operator,(const descr<3, Seldon::Network<int, double> >&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<std::span<const long unsigned int>, Seldon::Network<int, double>, long unsigned int, pybind11::name, pybind11::is_method, pybind11::sibling>(std::span<const long unsigned int> (Seldon::Network<int, double>::*)(long unsigned int) const, const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(const Seldon::Network<int, double>*, long unsigned int)>; Return = std::span<const long unsigned int>; Args = {const Seldon::Network<int, double>*, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:175:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) const, const Extra& ...) [with Return = std::span<const long unsigned int>; Class = Seldon::Network<int, double>; Arg = {long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = std::span<const long unsigned int> (Seldon::Network<int, double>::*)(long unsigned int) const; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:97:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Network<int, double>*, long unsigned int>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Network<int, double>*, long unsigned int>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<std::span<long unsigned int>, Seldon::Network<int, double>, long unsigned int, pybind11::name, pybind11::is_method, pybind11::sibling>(std::span<long unsigned int> (Seldon::Network<int, double>::*)(long unsigned int), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<int, double>*, long unsigned int)>; Return = std::span<long unsigned int>; Args = {Seldon::Network<int, double>*, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = std::span<long unsigned int>; Class = Seldon::Network<int, double>; Arg = {long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = std::span<long unsigned int> (Seldon::Network<int, double>::*)(long unsigned int); Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:100:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 10; long unsigned int N2 = 3; Ts1 = {Seldon::Network<int, double>}; Ts2 = {std::span<const double, 18446744073709551615>}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<int, double>}; Args = {descr<5>, descr<3, std::span<const double, 18446744073709551615> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const double, 18446744073709551615> >::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const double, 18446744073709551615> >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<int, double>, long unsigned int, std::span<const double, 18446744073709551615>, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const double, 18446744073709551615>), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<int, double>*, long unsigned int, std::span<const double, 18446744073709551615>)>; Return = void; Args = {Seldon::Network<int, double>*, long unsigned int, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<int, double>; Arg = {long unsigned int, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const double, 18446744073709551615>); Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:107:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<15, Seldon::Network<int, double>, std::span<const double, 18446744073709551615> > pybind11::detail::operator,(const descr<10, Seldon::Network<int, double> >&, const descr<3, std::span<const double, 18446744073709551615> >&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<int, double>, long unsigned int, std::span<const double, 18446744073709551615>, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const double, 18446744073709551615>), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<int, double>*, long unsigned int, std::span<const double, 18446744073709551615>)>; Return = void; Args = {Seldon::Network<int, double>*, long unsigned int, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<int, double>; Arg = {long unsigned int, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const double, 18446744073709551615>); Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:107:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const double, 18446744073709551615> >::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const double, 18446744073709551615> >::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 10; long unsigned int N2 = 3; Ts1 = {Seldon::Network<int, double>}; Ts2 = {std::span<const long unsigned int, 18446744073709551615>}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<int, double>}; Args = {descr<5>, descr<3, std::span<const long unsigned int, 18446744073709551615> >, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<int, double>, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const long unsigned int>, const double&), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int>, const double&)>; Return = void; Args = {Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<int, double>; Arg = {long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const long unsigned int>, const double&); Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:108:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<15, Seldon::Network<int, double>, std::span<const long unsigned int, 18446744073709551615> > pybind11::detail::operator,(const descr<10, Seldon::Network<int, double> >&, const descr<3, std::span<const long unsigned int, 18446744073709551615> >&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 15; long unsigned int N2 = 7; Ts1 = {Seldon::Network<int, double>, std::span<const long unsigned int, 18446744073709551615>}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<int, double>}; Args = {descr<5>, descr<3, std::span<const long unsigned int, 18446744073709551615> >, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<int, double>, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const long unsigned int>, const double&), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int>, const double&)>; Return = void; Args = {Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<int, double>; Arg = {long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const long unsigned int>, const double&); Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:108:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<24, Seldon::Network<int, double>, std::span<const long unsigned int, 18446744073709551615> > pybind11::detail::operator,(const descr<15, Seldon::Network<int, double>, std::span<const long unsigned int, 18446744073709551615> >&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<int, double>, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const long unsigned int>, const double&), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int>, const double&)>; Return = void; Args = {Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<int, double>; Arg = {long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const long unsigned int>, const double&); Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:108:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 15; long unsigned int N2 = 3; Ts1 = {Seldon::Network<int, double>, std::span<const long unsigned int, 18446744073709551615>}; Ts2 = {std::span<const double, 18446744073709551615>}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<int, double>}; Args = {descr<5>, descr<3, std::span<const long unsigned int, 18446744073709551615> >, descr<3, std::span<const double, 18446744073709551615> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615> >::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615> >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<int, double>, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615>, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const long unsigned int>, std::span<const double, 18446744073709551615>), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int>, std::span<const double, 18446744073709551615>)>; Return = void; Args = {Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<int, double>; Arg = {long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const long unsigned int>, std::span<const double, 18446744073709551615>); Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:111:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<20, Seldon::Network<int, double>, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615> > pybind11::detail::operator,(const descr<15, Seldon::Network<int, double>, std::span<const long unsigned int, 18446744073709551615> >&, const descr<3, std::span<const double, 18446744073709551615> >&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<int, double>, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615>, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const long unsigned int>, std::span<const double, 18446744073709551615>), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int>, std::span<const double, 18446744073709551615>)>; Return = void; Args = {Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<int, double>; Arg = {long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<int, double>::*)(long unsigned int, std::span<const long unsigned int>, std::span<const double, 18446744073709551615>); Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:111:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615> >::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615> >::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 10; long unsigned int N2 = 5; Ts1 = {Seldon::Network<int, double>}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<int, double>}; Args = {descr<5>, descr<5>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, long unsigned int, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, long unsigned int, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<int, double>, long unsigned int, long unsigned int, double, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<int, double>::*)(long unsigned int, long unsigned int, double), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<int, double>*, long unsigned int, long unsigned int, double)>; Return = void; Args = {Seldon::Network<int, double>*, long unsigned int, long unsigned int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<int, double>; Arg = {long unsigned int, long unsigned int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<int, double>::*)(long unsigned int, long unsigned int, double); Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:114:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<17, Seldon::Network<int, double> > pybind11::detail::operator,(const descr<10, Seldon::Network<int, double> >&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 17; long unsigned int N2 = 7; Ts1 = {Seldon::Network<int, double>}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<int, double>}; Args = {descr<5>, descr<5>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, long unsigned int, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, long unsigned int, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<int, double>, long unsigned int, long unsigned int, double, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<int, double>::*)(long unsigned int, long unsigned int, double), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<int, double>*, long unsigned int, long unsigned int, double)>; Return = void; Args = {Seldon::Network<int, double>*, long unsigned int, long unsigned int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<int, double>; Arg = {long unsigned int, long unsigned int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<int, double>::*)(long unsigned int, long unsigned int, double); Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:114:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<26, Seldon::Network<int, double> > pybind11::detail::operator,(const descr<17, Seldon::Network<int, double> >&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<int, double>, long unsigned int, long unsigned int, double, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<int, double>::*)(long unsigned int, long unsigned int, double), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<int, double>*, long unsigned int, long unsigned int, double)>; Return = void; Args = {Seldon::Network<int, double>*, long unsigned int, long unsigned int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<int, double>; Arg = {long unsigned int, long unsigned int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<int, double>::*)(long unsigned int, long unsigned int, double); Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:114:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, long unsigned int, double>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Network<int, double>*, long unsigned int, long unsigned int, double>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<int, double>, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<int, double>::*)(), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<int, double>*)>; Return = void; Args = {Seldon::Network<int, double>*}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<int, double>; Arg = {}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<int, double>::*)(); Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:115:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Network<int, double>*>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Network<int, double>*>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<long unsigned int, Seldon::Network<double, double>, pybind11::name, pybind11::is_method, pybind11::sibling>(long unsigned int (Seldon::Network<double, double>::*)() const, const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(const Seldon::Network<double, double>*)>; Return = long unsigned int; Args = {const Seldon::Network<double, double>*}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:175:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) const, const Extra& ...) [with Return = long unsigned int; Class = Seldon::Network<double, double>; Arg = {}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = long unsigned int (Seldon::Network<double, double>::*)() const; Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:90:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Network<double, double>*>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Network<double, double>*>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 15; Ts1 = {Seldon::Network<double, double>}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<double, double>}; Args = {descr<15>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<const Seldon::Network<double, double>*, std::optional<long unsigned int> >::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<const Seldon::Network<double, double>*, std::optional<long unsigned int> >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<long unsigned int, Seldon::Network<double, double>, std::optional<long unsigned int>, pybind11::name, pybind11::is_method, pybind11::sibling>(long unsigned int (Seldon::Network<double, double>::*)(std::optional<long unsigned int>) const, const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(const Seldon::Network<double, double>*, std::optional<long unsigned int>)>; Return = long unsigned int; Args = {const Seldon::Network<double, double>*, std::optional<long unsigned int>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:175:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) const, const Extra& ...) [with Return = long unsigned int; Class = Seldon::Network<double, double>; Arg = {std::optional<long unsigned int>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = long unsigned int (Seldon::Network<double, double>::*)(std::optional<long unsigned int>) const; Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:91:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<20, Seldon::Network<double, double> > pybind11::detail::operator,(const descr<3, Seldon::Network<double, double> >&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<long unsigned int, Seldon::Network<double, double>, std::optional<long unsigned int>, pybind11::name, pybind11::is_method, pybind11::sibling>(long unsigned int (Seldon::Network<double, double>::*)(std::optional<long unsigned int>) const, const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(const Seldon::Network<double, double>*, std::optional<long unsigned int>)>; Return = long unsigned int; Args = {const Seldon::Network<double, double>*, std::optional<long unsigned int>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:175:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) const, const Extra& ...) [with Return = long unsigned int; Class = Seldon::Network<double, double>; Arg = {std::optional<long unsigned int>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = long unsigned int (Seldon::Network<double, double>::*)(std::optional<long unsigned int>) const; Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:91:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Network<double, double>*, std::optional<long unsigned int> >::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Network<double, double>*, std::optional<long unsigned int> >::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 5; Ts1 = {Seldon::Network<double, double>}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<double, double>}; Args = {descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<const Seldon::Network<double, double>*, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<const Seldon::Network<double, double>*, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<std::span<const long unsigned int>, Seldon::Network<double, double>, long unsigned int, pybind11::name, pybind11::is_method, pybind11::sibling>(std::span<const long unsigned int> (Seldon::Network<double, double>::*)(long unsigned int) const, const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(const Seldon::Network<double, double>*, long unsigned int)>; Return = std::span<const long unsigned int>; Args = {const Seldon::Network<double, double>*, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:175:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) const, const Extra& ...) [with Return = std::span<const long unsigned int>; Class = Seldon::Network<double, double>; Arg = {long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = std::span<const long unsigned int> (Seldon::Network<double, double>::*)(long unsigned int) const; Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:97:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<10, Seldon::Network<double, double> > pybind11::detail::operator,(const descr<3, Seldon::Network<double, double> >&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<std::span<const long unsigned int>, Seldon::Network<double, double>, long unsigned int, pybind11::name, pybind11::is_method, pybind11::sibling>(std::span<const long unsigned int> (Seldon::Network<double, double>::*)(long unsigned int) const, const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(const Seldon::Network<double, double>*, long unsigned int)>; Return = std::span<const long unsigned int>; Args = {const Seldon::Network<double, double>*, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:175:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...) const, const Extra& ...) [with Return = std::span<const long unsigned int>; Class = Seldon::Network<double, double>; Arg = {long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = std::span<const long unsigned int> (Seldon::Network<double, double>::*)(long unsigned int) const; Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:97:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<const Seldon::Network<double, double>*, long unsigned int>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<const Seldon::Network<double, double>*, long unsigned int>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<std::span<long unsigned int>, Seldon::Network<double, double>, long unsigned int, pybind11::name, pybind11::is_method, pybind11::sibling>(std::span<long unsigned int> (Seldon::Network<double, double>::*)(long unsigned int), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<double, double>*, long unsigned int)>; Return = std::span<long unsigned int>; Args = {Seldon::Network<double, double>*, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = std::span<long unsigned int>; Class = Seldon::Network<double, double>; Arg = {long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = std::span<long unsigned int> (Seldon::Network<double, double>::*)(long unsigned int); Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:100:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 10; long unsigned int N2 = 3; Ts1 = {Seldon::Network<double, double>}; Ts2 = {std::span<const double, 18446744073709551615>}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<double, double>}; Args = {descr<5>, descr<3, std::span<const double, 18446744073709551615> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const double, 18446744073709551615> >::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const double, 18446744073709551615> >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<double, double>, long unsigned int, std::span<const double, 18446744073709551615>, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const double, 18446744073709551615>), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<double, double>*, long unsigned int, std::span<const double, 18446744073709551615>)>; Return = void; Args = {Seldon::Network<double, double>*, long unsigned int, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<double, double>; Arg = {long unsigned int, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const double, 18446744073709551615>); Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:107:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<15, Seldon::Network<double, double>, std::span<const double, 18446744073709551615> > pybind11::detail::operator,(const descr<10, Seldon::Network<double, double> >&, const descr<3, std::span<const double, 18446744073709551615> >&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<double, double>, long unsigned int, std::span<const double, 18446744073709551615>, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const double, 18446744073709551615>), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<double, double>*, long unsigned int, std::span<const double, 18446744073709551615>)>; Return = void; Args = {Seldon::Network<double, double>*, long unsigned int, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<double, double>; Arg = {long unsigned int, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const double, 18446744073709551615>); Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:107:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const double, 18446744073709551615> >::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const double, 18446744073709551615> >::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 10; long unsigned int N2 = 3; Ts1 = {Seldon::Network<double, double>}; Ts2 = {std::span<const long unsigned int, 18446744073709551615>}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<double, double>}; Args = {descr<5>, descr<3, std::span<const long unsigned int, 18446744073709551615> >, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<double, double>, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const long unsigned int>, const double&), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int>, const double&)>; Return = void; Args = {Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<double, double>; Arg = {long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const long unsigned int>, const double&); Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:108:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<15, Seldon::Network<double, double>, std::span<const long unsigned int, 18446744073709551615> > pybind11::detail::operator,(const descr<10, Seldon::Network<double, double> >&, const descr<3, std::span<const long unsigned int, 18446744073709551615> >&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 15; long unsigned int N2 = 7; Ts1 = {Seldon::Network<double, double>, std::span<const long unsigned int, 18446744073709551615>}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<double, double>}; Args = {descr<5>, descr<3, std::span<const long unsigned int, 18446744073709551615> >, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<double, double>, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const long unsigned int>, const double&), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int>, const double&)>; Return = void; Args = {Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<double, double>; Arg = {long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const long unsigned int>, const double&); Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:108:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<24, Seldon::Network<double, double>, std::span<const long unsigned int, 18446744073709551615> > pybind11::detail::operator,(const descr<15, Seldon::Network<double, double>, std::span<const long unsigned int, 18446744073709551615> >&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<double, double>, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const long unsigned int>, const double&), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int>, const double&)>; Return = void; Args = {Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<double, double>; Arg = {long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const long unsigned int>, const double&); Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:108:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, const double&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 15; long unsigned int N2 = 3; Ts1 = {Seldon::Network<double, double>, std::span<const long unsigned int, 18446744073709551615>}; Ts2 = {std::span<const double, 18446744073709551615>}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<double, double>}; Args = {descr<5>, descr<3, std::span<const long unsigned int, 18446744073709551615> >, descr<3, std::span<const double, 18446744073709551615> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615> >::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615> >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<double, double>, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615>, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const long unsigned int>, std::span<const double, 18446744073709551615>), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int>, std::span<const double, 18446744073709551615>)>; Return = void; Args = {Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<double, double>; Arg = {long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const long unsigned int>, std::span<const double, 18446744073709551615>); Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:111:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<20, Seldon::Network<double, double>, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615> > pybind11::detail::operator,(const descr<15, Seldon::Network<double, double>, std::span<const long unsigned int, 18446744073709551615> >&, const descr<3, std::span<const double, 18446744073709551615> >&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<double, double>, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615>, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const long unsigned int>, std::span<const double, 18446744073709551615>), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int>, std::span<const double, 18446744073709551615>)>; Return = void; Args = {Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<double, double>; Arg = {long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615>}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<double, double>::*)(long unsigned int, std::span<const long unsigned int>, std::span<const double, 18446744073709551615>); Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:111:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615> >::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, std::span<const long unsigned int, 18446744073709551615>, std::span<const double, 18446744073709551615> >::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 10; long unsigned int N2 = 5; Ts1 = {Seldon::Network<double, double>}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<double, double>}; Args = {descr<5>, descr<5>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, long unsigned int, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, long unsigned int, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<double, double>, long unsigned int, long unsigned int, double, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<double, double>::*)(long unsigned int, long unsigned int, double), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<double, double>*, long unsigned int, long unsigned int, double)>; Return = void; Args = {Seldon::Network<double, double>*, long unsigned int, long unsigned int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<double, double>; Arg = {long unsigned int, long unsigned int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<double, double>::*)(long unsigned int, long unsigned int, double); Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:114:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<17, Seldon::Network<double, double> > pybind11::detail::operator,(const descr<10, Seldon::Network<double, double> >&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 17; long unsigned int N2 = 7; Ts1 = {Seldon::Network<double, double>}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {Seldon::Network<double, double>}; Args = {descr<5>, descr<5>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, long unsigned int, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, long unsigned int, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<double, double>, long unsigned int, long unsigned int, double, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<double, double>::*)(long unsigned int, long unsigned int, double), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<double, double>*, long unsigned int, long unsigned int, double)>; Return = void; Args = {Seldon::Network<double, double>*, long unsigned int, long unsigned int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<double, double>; Arg = {long unsigned int, long unsigned int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<double, double>::*)(long unsigned int, long unsigned int, double); Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:114:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<26, Seldon::Network<double, double> > pybind11::detail::operator,(const descr<17, Seldon::Network<double, double> >&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<double, double>, long unsigned int, long unsigned int, double, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<double, double>::*)(long unsigned int, long unsigned int, double), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<double, double>*, long unsigned int, long unsigned int, double)>; Return = void; Args = {Seldon::Network<double, double>*, long unsigned int, long unsigned int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<double, double>; Arg = {long unsigned int, long unsigned int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<double, double>::*)(long unsigned int, long unsigned int, double); Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:114:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, long unsigned int, double>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Network<double, double>*, long unsigned int, long unsigned int, double>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::cpp_function::cpp_function<void, Seldon::Network<double, double>, pybind11::name, pybind11::is_method, pybind11::sibling>(void (Seldon::Network<double, double>::*)(), const pybind11::name&, const pybind11::is_method&, const pybind11::sibling&)::<lambda(Seldon::Network<double, double>*)>; Return = void; Args = {Seldon::Network<double, double>*}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:153:19:   required from ‘pybind11::cpp_function::cpp_function(Return (Class::*)(Arg ...), const Extra& ...) [with Return = void; Class = Seldon::Network<double, double>; Arg = {}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = void (Seldon::Network<double, double>::*)(); Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:115:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<Seldon::Network<double, double>*>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<Seldon::Network<double, double>*>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 5; long unsigned int N2 = 5; Ts1 = {}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 5; Ts = {}; Args = {descr<5>, descr<6>, descr<3, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = Seldon::Network<long double, double> (*&)(long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&); Return = Seldon::Network<long double, double>; Args = {long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:136:19:   required from ‘pybind11::cpp_function::cpp_function(Return (*)(Args ...), const Extra& ...) [with Return = Seldon::Network<long double, double>; Args = {long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1220:22:   required from ‘pybind11::module_& pybind11::module_::def(const char*, Func&&, const Extra& ...) [with Func = Seldon::Network<long double, double> (*)(long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&); Extra = {}]’
../python_bindings/bindings.cpp:125:10:   required from ‘void generate_network_generation_bindings(pybind11::module&) [with AgentType = long double; pybind11::module = pybind11::module_]’
../python_bindings/bindings.cpp:569:54:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<12> pybind11::detail::operator,(const descr<5>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 12; long unsigned int N2 = 6; Ts1 = {}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 5; Ts = {}; Args = {descr<5>, descr<6>, descr<3, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = Seldon::Network<long double, double> (*&)(long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&); Return = Seldon::Network<long double, double>; Args = {long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:136:19:   required from ‘pybind11::cpp_function::cpp_function(Return (*)(Args ...), const Extra& ...) [with Return = Seldon::Network<long double, double>; Args = {long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1220:22:   required from ‘pybind11::module_& pybind11::module_::def(const char*, Func&&, const Extra& ...) [with Func = Seldon::Network<long double, double> (*)(long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&); Extra = {}]’
../python_bindings/bindings.cpp:125:10:   required from ‘void generate_network_generation_bindings(pybind11::module&) [with AgentType = long double; pybind11::module = pybind11::module_]’
../python_bindings/bindings.cpp:569:54:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<20> pybind11::detail::operator,(const descr<12>&, const descr<6>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 20; long unsigned int N2 = 3; Ts1 = {}; Ts2 = {std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 5; Ts = {}; Args = {descr<5>, descr<6>, descr<3, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = Seldon::Network<long double, double> (*&)(long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&); Return = Seldon::Network<long double, double>; Args = {long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:136:19:   required from ‘pybind11::cpp_function::cpp_function(Return (*)(Args ...), const Extra& ...) [with Return = Seldon::Network<long double, double>; Args = {long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1220:22:   required from ‘pybind11::module_& pybind11::module_::def(const char*, Func&&, const Extra& ...) [with Func = Seldon::Network<long double, double> (*)(long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&); Extra = {}]’
../python_bindings/bindings.cpp:125:10:   required from ‘void generate_network_generation_bindings(pybind11::module&) [with AgentType = long double; pybind11::module = pybind11::module_]’
../python_bindings/bindings.cpp:569:54:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<25, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> > pybind11::detail::operator,(const descr<20>&, const descr<3, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> >&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = Seldon::Network<long double, double> (*&)(long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&); Return = Seldon::Network<long double, double>; Args = {long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:136:19:   required from ‘pybind11::cpp_function::cpp_function(Return (*)(Args ...), const Extra& ...) [with Return = Seldon::Network<long double, double>; Args = {long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&}; Extra = {pybind11::name, pybind11::scope, pybind11::sibling}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1220:22:   required from ‘pybind11::module_& pybind11::module_::def(const char*, Func&&, const Extra& ...) [with Func = Seldon::Network<long double, double> (*)(long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&); Extra = {}]’
../python_bindings/bindings.cpp:125:10:   required from ‘void generate_network_generation_bindings(pybind11::module&) [with AgentType = long double; pybind11::module = pybind11::module_]’
../python_bindings/bindings.cpp:569:54:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<long unsigned int, long unsigned int, bool, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
../subprojects/seldon/include/models/DeffuantModel.hpp: In instantiation of ‘Seldon::DeffuantModelAbstract<AgentT_>::DeffuantModelAbstract(const Seldon::Config::DeffuantSettings&, NetworkT&, std::mt19937&) [with AgentT_ = Seldon::Agent<Seldon::SimpleAgentData>; NetworkT = Seldon::Network<Seldon::Agent<Seldon::SimpleAgentData> >; std::mt19937 = std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>]’:
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::DeffuantModelAbstract<Seldon::Agent<Seldon::SimpleAgentData> >; _Args = {Seldon::Config::DeffuantSettings&, Seldon::Network<Seldon::Agent<Seldon::SimpleAgentData>, double>&, mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::DeffuantModelAbstract<Seldon::Agent<Seldon::SimpleAgentData> > >]’
../subprojects/seldon/include/model_factory.hpp:89:65:   required from ‘auto Seldon::ModelFactory::create_model_deffuant(Seldon::Network<AgentT>&, const ModelVariantT&, std::mt19937&) [with AgentT = Seldon::Agent<Seldon::SimpleAgentData>; ModelVariantT = std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>; std::mt19937 = std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>]’
../subprojects/seldon/include/simulation.hpp:86:60:   required from ‘void Seldon::Simulation<AgentType>::create_model(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::SimpleAgentData>]’
../subprojects/seldon/include/simulation.hpp:105:9:   required from ‘Seldon::Simulation<AgentType>::Simulation(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::SimpleAgentData>]’
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> >; _Args = {Seldon::Config::SimulationOptions&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::Simulation<Seldon::Agent<Seldon::SimpleAgentData> > >]’
../python_bindings/bindings.cpp:61:88:   required from here
../subprojects/seldon/include/models/DeffuantModel.hpp:37:38: warning: conversion from ‘__gnu_cxx::__enable_if<true, double>::__type’ {aka ‘double’} to ‘size_t’ {aka ‘long unsigned int’} may change value [-Wfloat-conversion]
   37 |             size_t n_edge = std::sqrt( network.n_agents() );
      |                             ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/models/DeffuantModel.hpp: In instantiation of ‘Seldon::DeffuantModelAbstract<AgentT_>::DeffuantModelAbstract(const Seldon::Config::DeffuantSettings&, NetworkT&, std::mt19937&) [with AgentT_ = Seldon::Agent<Seldon::DiscreteVectorAgentData>; NetworkT = Seldon::Network<Seldon::Agent<Seldon::DiscreteVectorAgentData>, double>; std::mt19937 = std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>]’:
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::DeffuantModelAbstract<Seldon::Agent<Seldon::DiscreteVectorAgentData> >; _Args = {Seldon::Config::DeffuantSettings&, Seldon::Network<Seldon::Agent<Seldon::DiscreteVectorAgentData>, double>&, mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::DeffuantModelAbstract<Seldon::Agent<Seldon::DiscreteVectorAgentData> > >]’
../subprojects/seldon/include/model_factory.hpp:107:71:   required from ‘auto Seldon::ModelFactory::create_model_deffuant_vector(Seldon::Network<AgentT>&, const ModelVariantT&, std::mt19937&) [with AgentT = Seldon::Agent<Seldon::DiscreteVectorAgentData>; ModelVariantT = std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>; std::mt19937 = std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>]’
../subprojects/seldon/include/simulation.hpp:82:67:   required from ‘void Seldon::Simulation<AgentType>::create_model(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:105:9:   required from ‘Seldon::Simulation<AgentType>::Simulation(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> >; _Args = {Seldon::Config::SimulationOptions&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::Simulation<Seldon::Agent<Seldon::DiscreteVectorAgentData> > >]’
../python_bindings/bindings.cpp:69:99:   required from here
../subprojects/seldon/include/models/DeffuantModel.hpp:37:38: warning: conversion from ‘__gnu_cxx::__enable_if<true, double>::__type’ {aka ‘double’} to ‘size_t’ {aka ‘long unsigned int’} may change value [-Wfloat-conversion]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 15; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<15>, descr<15>, descr<6>, descr<6>, descr<5>, descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::OutputSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>; Return = Seldon::Config::OutputSettings; Args = {std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:178:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<20, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<3, value_and_holder>&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 20; long unsigned int N2 = 15; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<15>, descr<15>, descr<6>, descr<6>, descr<5>, descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::OutputSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>; Return = Seldon::Config::OutputSettings; Args = {std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:178:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<37, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<20, value_and_holder>&, const descr<15>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 37; long unsigned int N2 = 6; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<15>, descr<15>, descr<6>, descr<6>, descr<5>, descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::OutputSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>; Return = Seldon::Config::OutputSettings; Args = {std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:178:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<45, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<37, value_and_holder>&, const descr<6>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 45; long unsigned int N2 = 6; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<15>, descr<15>, descr<6>, descr<6>, descr<5>, descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::OutputSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>; Return = Seldon::Config::OutputSettings; Args = {std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:178:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<53, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<45, value_and_holder>&, const descr<6>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 53; long unsigned int N2 = 5; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<15>, descr<15>, descr<6>, descr<6>, descr<5>, descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::OutputSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>; Return = Seldon::Config::OutputSettings; Args = {std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:178:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<60, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<53, value_and_holder>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 60; long unsigned int N2 = 5; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<15>, descr<15>, descr<6>, descr<6>, descr<5>, descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::OutputSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>; Return = Seldon::Config::OutputSettings; Args = {std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:178:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<67, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<60, value_and_holder>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::OutputSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::OutputSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::OutputSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>; Return = Seldon::Config::OutputSettings; Args = {std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::OutputSettings(std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::OutputSettings; options = {}]’
../python_bindings/bindings.cpp:178:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<long unsigned int>, std::optional<long unsigned int>, bool, bool, long unsigned int, long unsigned int>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 5; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>, pybind11::detail::void_type (*)(), Seldon::Config::DeGrootSettings(int, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeGrootSettings>, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeGrootSettings>&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>, pybind11::detail::void_type (*)(), Seldon::Config::DeGrootSettings(int, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeGrootSettings>, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeGrootSettings>&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>, pybind11::detail::void_type (*)(), Seldon::Config::DeGrootSettings(int, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeGrootSettings>, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeGrootSettings>&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::DeGrootSettings>; Extra = {pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>; Return = Seldon::Config::DeGrootSettings; Args = {int, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>, pybind11::detail::void_type (*)(), Seldon::Config::DeGrootSettings(int, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
../python_bindings/bindings.cpp:217:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<10, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<3, value_and_holder>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 10; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>, pybind11::detail::void_type (*)(), Seldon::Config::DeGrootSettings(int, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeGrootSettings>, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeGrootSettings>&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>, pybind11::detail::void_type (*)(), Seldon::Config::DeGrootSettings(int, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeGrootSettings>, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeGrootSettings>&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>, pybind11::detail::void_type (*)(), Seldon::Config::DeGrootSettings(int, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeGrootSettings>, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeGrootSettings>&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::DeGrootSettings>; Extra = {pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>; Return = Seldon::Config::DeGrootSettings; Args = {int, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>, pybind11::detail::void_type (*)(), Seldon::Config::DeGrootSettings(int, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
../python_bindings/bindings.cpp:217:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<19, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<10, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>, pybind11::detail::void_type (*)(), Seldon::Config::DeGrootSettings(int, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeGrootSettings>, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeGrootSettings>&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>, pybind11::detail::void_type (*)(), Seldon::Config::DeGrootSettings(int, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeGrootSettings>, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeGrootSettings>&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>, pybind11::detail::void_type (*)(), Seldon::Config::DeGrootSettings(int, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeGrootSettings>, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeGrootSettings>&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::DeGrootSettings>; Extra = {pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>; Return = Seldon::Config::DeGrootSettings; Args = {int, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double)>, pybind11::detail::void_type (*)(), Seldon::Config::DeGrootSettings(int, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
../python_bindings/bindings.cpp:217:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 19; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::DeffuantSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>; Return = Seldon::Config::DeffuantSettings; Args = {int, double, double, bool, bool, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:234:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<28, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<19, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 28; long unsigned int N2 = 6; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::DeffuantSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>; Return = Seldon::Config::DeffuantSettings; Args = {int, double, double, bool, bool, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:234:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<36, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<28, value_and_holder>&, const descr<6>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 36; long unsigned int N2 = 6; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::DeffuantSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>; Return = Seldon::Config::DeffuantSettings; Args = {int, double, double, bool, bool, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:234:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<44, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<36, value_and_holder>&, const descr<6>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 44; long unsigned int N2 = 5; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::DeffuantSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>; Return = Seldon::Config::DeffuantSettings; Args = {int, double, double, bool, bool, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:234:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<51, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<44, value_and_holder>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::DeffuantSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::DeffuantSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::DeffuantSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>; Return = Seldon::Config::DeffuantSettings; Args = {int, double, double, bool, bool, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, double, bool, bool, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::DeffuantSettings(int, double, double, bool, bool, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::DeffuantSettings; options = {}]’
../python_bindings/bindings.cpp:234:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, double, bool, bool, long unsigned int>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 19; long unsigned int N2 = 5; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<26, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<19, value_and_holder>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 26; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<35, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<26, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 35; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<44, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<35, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 44; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<53, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<44, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 53; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<62, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<53, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 62; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<71, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<62, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 71; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<80, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<71, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 80; long unsigned int N2 = 6; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<88, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<80, value_and_holder>&, const descr<6>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 88; long unsigned int N2 = 6; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<96, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<88, value_and_holder>&, const descr<6>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 96; long unsigned int N2 = 5; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<103, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<96, value_and_holder>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 103; long unsigned int N2 = 11; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<116, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<103, value_and_holder>&, const descr<11>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 116; long unsigned int N2 = 13; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<131, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<116, value_and_holder>&, const descr<13>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 131; long unsigned int N2 = 13; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<146, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<131, value_and_holder>&, const descr<13>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 146; long unsigned int N2 = 13; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<161, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<146, value_and_holder>&, const descr<13>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 161; long unsigned int N2 = 6; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<169, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<161, value_and_holder>&, const descr<6>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 169; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<178, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<169, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 178; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<187, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<178, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 187; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<196, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<187, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 196; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<205, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<196, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenSettings; options = {}]’
../python_bindings/bindings.cpp:267:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 205; long unsigned int N2 = 7; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<7>, descr<5>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>, descr<6>, descr<6>, descr<5>, descr<11>, descr<13>, descr<13>, descr<13>, descr<6>, descr<7>, descr<7>, descr<7>, descr<7>, descr<7>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double, double>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double, double>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenInertialSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenInertialSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenInertialSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenInertialSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenInertialSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:380:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<214, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<205, value_and_holder>&, const descr<7>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenInertialSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>; Return = void; Args = {pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double, double}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenInertialSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenInertialSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::ActivityDrivenInertialSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int>, std::vector<double>, std::vector<double>, std::vector<double>, bool, double, double, double, double, double)>; Return = Seldon::Config::ActivityDrivenInertialSettings; Args = {int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double, double}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(int, double, int, double, double, double, double, double, double, bool, bool, size_t, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double, double)>, pybind11::detail::void_type (*)(), Seldon::Config::ActivityDrivenInertialSettings(int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double, double), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::ActivityDrivenInertialSettings; options = {}]’
../python_bindings/bindings.cpp:380:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double, double>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, int, double, int, double, double, double, double, double, double, bool, bool, long unsigned int, std::vector<int, std::allocator<int> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, std::vector<double, std::allocator<double> >, bool, double, double, double, double, double>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 20; long unsigned int N2 = 5; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<15>, descr<5>, descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char> >, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::InitialNetworkSettings(std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::InitialNetworkSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::InitialNetworkSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char> >, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::InitialNetworkSettings(std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::InitialNetworkSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::InitialNetworkSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char> >, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::InitialNetworkSettings(std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::InitialNetworkSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::InitialNetworkSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::InitialNetworkSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::InitialNetworkSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char> >, size_t, size_t)>; Return = Seldon::Config::InitialNetworkSettings; Args = {std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::InitialNetworkSettings(std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::InitialNetworkSettings; options = {}]’
../python_bindings/bindings.cpp:497:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<27, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<20, value_and_holder>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 27; long unsigned int N2 = 5; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<15>, descr<5>, descr<5>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char> >, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::InitialNetworkSettings(std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::InitialNetworkSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::InitialNetworkSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char> >, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::InitialNetworkSettings(std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::InitialNetworkSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::InitialNetworkSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char> >, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::InitialNetworkSettings(std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::InitialNetworkSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::InitialNetworkSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::InitialNetworkSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::InitialNetworkSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char> >, size_t, size_t)>; Return = Seldon::Config::InitialNetworkSettings; Args = {std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::InitialNetworkSettings(std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::InitialNetworkSettings; options = {}]’
../python_bindings/bindings.cpp:497:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<34, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<27, value_and_holder>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char> >, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::InitialNetworkSettings(std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::InitialNetworkSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::InitialNetworkSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char> >, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::InitialNetworkSettings(std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::InitialNetworkSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::InitialNetworkSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char> >, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::InitialNetworkSettings(std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::InitialNetworkSettings>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::InitialNetworkSettings>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char> >, long unsigned int, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::InitialNetworkSettings; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::InitialNetworkSettings>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char> >, size_t, size_t)>; Return = Seldon::Config::InitialNetworkSettings; Args = {std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, size_t, size_t)>, pybind11::detail::void_type (*)(), Seldon::Config::InitialNetworkSettings(std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::InitialNetworkSettings; options = {}]’
../python_bindings/bindings.cpp:497:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, long unsigned int, long unsigned int>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 10; long unsigned int N2 = 5; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<5>, descr<3, Seldon::Config::OutputSettings>, descr<19, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, descr<3, Seldon::Config::InitialNetworkSettings>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::SimulationOptions; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::SimulationOptions>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Return = Seldon::Config::SimulationOptions; Args = {std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:519:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<17, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<10, value_and_holder>&, const descr<5>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 17; long unsigned int N2 = 3; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {Seldon::Config::OutputSettings}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<5>, descr<3, Seldon::Config::OutputSettings>, descr<19, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, descr<3, Seldon::Config::InitialNetworkSettings>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::SimulationOptions; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::SimulationOptions>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Return = Seldon::Config::SimulationOptions; Args = {std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:519:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<22, pybind11::detail::value_and_holder, Seldon::Config::OutputSettings> pybind11::detail::operator,(const descr<17, value_and_holder>&, const descr<3, Seldon::Config::OutputSettings>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 22; long unsigned int N2 = 19; Ts1 = {pybind11::detail::value_and_holder, Seldon::Config::OutputSettings}; Ts2 = {Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<5>, descr<3, Seldon::Config::OutputSettings>, descr<19, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, descr<3, Seldon::Config::InitialNetworkSettings>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::SimulationOptions; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::SimulationOptions>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Return = Seldon::Config::SimulationOptions; Args = {std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:519:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<43, pybind11::detail::value_and_holder, Seldon::Config::OutputSettings, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings> pybind11::detail::operator,(const descr<22, value_and_holder, Seldon::Config::OutputSettings>&, const descr<19, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 43; long unsigned int N2 = 3; Ts1 = {pybind11::detail::value_and_holder, Seldon::Config::OutputSettings, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings}; Ts2 = {Seldon::Config::InitialNetworkSettings}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<5>, descr<5>, descr<3, Seldon::Config::OutputSettings>, descr<19, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, descr<3, Seldon::Config::InitialNetworkSettings>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::SimulationOptions; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::SimulationOptions>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Return = Seldon::Config::SimulationOptions; Args = {std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:519:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<48, pybind11::detail::value_and_holder, Seldon::Config::OutputSettings, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings, Seldon::Config::InitialNetworkSettings> pybind11::detail::operator,(const descr<43, value_and_holder, Seldon::Config::OutputSettings, Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>&, const descr<3, Seldon::Config::InitialNetworkSettings>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::factory<pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()>::execute<pybind11::class_<Seldon::Config::SimulationOptions>, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v>(pybind11::class_<Seldon::Config::SimulationOptions>&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&, const pybind11::arg_v&) &&::<lambda(pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char>, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Extra = {pybind11::detail::is_new_style_constructor, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::SimulationOptions; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:293:15:   required from ‘void pybind11::detail::initimpl::factory<Func, pybind11::detail::void_type (*)(), Return(Args ...)>::execute(Class&, const Extra& ...) && [with Class = pybind11::class_<Seldon::Config::SimulationOptions>; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; Func = pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>; Return = Seldon::Config::SimulationOptions; Args = {std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1685:32:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(pybind11::detail::initimpl::factory<Args ...>&&, const Extra& ...) [with Args = {pybind11_init_seldoncore(pybind11::module_&)::<lambda(std::string, std::size_t, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings)>, pybind11::detail::void_type (*)(), Seldon::Config::SimulationOptions(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings), pybind11::detail::void_type()}; Extra = {pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v}; type_ = Seldon::Config::SimulationOptions; options = {}]’
../python_bindings/bindings.cpp:519:13:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, Seldon::Config::OutputSettings, std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>, Seldon::Config::InitialNetworkSettings>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘bool pybind11::detail::type_caster<T, typename std::enable_if<(std::is_arithmetic<_Tp>::value && (! std::integral_constant<bool, (std::is_same<Char, char>::value || (std::is_same<T, char8_t>::value || (std::is_same<T, char16_t>::value || (std::is_same<T, char32_t>::value || std::is_same<T, wchar_t>::value))))>::value)), void>::type>::load(pybind11::handle, bool) [with T = double; typename std::enable_if<(std::is_arithmetic<_Tp>::value && (! std::integral_constant<bool, (std::is_same<Char, char>::value || (std::is_same<T, char8_t>::value || (std::is_same<T, char16_t>::value || (std::is_same<T, char32_t>::value || std::is_same<T, wchar_t>::value))))>::value)), void>::type = void]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1598:51:   required from ‘bool pybind11::detail::argument_loader<Args>::load_impl_sequence(pybind11::detail::function_call&, std::index_sequence<Is ...>) [with long unsigned int ...Is = {0, 1}; Args = {Seldon::Config::DeGrootSettings&, const double&}; std::index_sequence<Is ...> = std::integer_sequence<long unsigned int, 0, 1>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1576:68:   required from ‘bool pybind11::detail::argument_loader<Args>::load_args(pybind11::detail::function_call&) [with Args = {Seldon::Config::DeGrootSettings&, const double&}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:271:42:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, double, char [22]>(const char*, double Seldon::Config::DeGrootSettings::*, const char (&)[22])::<lambda(pybind11::class_<Seldon::Config::DeGrootSettings>::type&, const double&)>; Return = void; Args = {Seldon::Config::DeGrootSettings&, const double&}; Extra = {pybind11::is_method}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::class_<Seldon::Config::DeGrootSettings>::def_readwrite<Seldon::Config::DeGrootSettings, double, char [22]>(const char*, double Seldon::Config::DeGrootSettings::*, const char (&)[22])::<lambda(pybind11::class_<Seldon::Config::DeGrootSettings>::type&, const double&)>; Extra = {pybind11::is_method}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1733:13:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def_readwrite(const char*, D C::*, const Extra& ...) [with C = Seldon::Config::DeGrootSettings; D = double; Extra = {char [22]}; type_ = Seldon::Config::DeGrootSettings; options = {}]’
../python_bindings/bindings.cpp:230:23:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:184:32: warning: comparing floating-point with ‘==’ or ‘!=’ is unsafe [-Wfloat-equal]
  184 |         bool py_err = py_value == (py_type) -1 && PyErr_Occurred();
      |                       ~~~~~~~~~^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:190:29: warning: comparing floating-point with ‘==’ or ‘!=’ is unsafe [-Wfloat-equal]
  190 |                 && py_value != (py_type) (T) py_value)) {
      |                    ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&)>; Return = void; Args = {pybind11::detail::value_and_holder&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<int, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<int, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {}; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:84:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const long unsigned int>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, long unsigned int)>; Return = void; Args = {pybind11::detail::value_and_holder&, long unsigned int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const long unsigned int>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, long unsigned int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const long unsigned int>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, long unsigned int)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<int, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<int, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {const long unsigned int}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {const long unsigned int}; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:85:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, long unsigned int>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, long unsigned int>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 11; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<11>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, const std::vector<int, std::allocator<int> >&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, const std::vector<int, std::allocator<int> >&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const std::vector<int, std::allocator<int> >&>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, const std::vector<int>&)>; Return = void; Args = {pybind11::detail::value_and_holder&, const std::vector<int, std::allocator<int> >&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const std::vector<int, std::allocator<int> >&>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, const std::vector<int>&)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const std::vector<int, std::allocator<int> >&>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, const std::vector<int>&)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<int, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<int, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {const std::vector<int, std::allocator<int> >&}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {const std::vector<int, std::allocator<int> >&}; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:86:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<16, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<3, value_and_holder>&, const descr<11>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const std::vector<int, std::allocator<int> >&>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, const std::vector<int>&)>; Return = void; Args = {pybind11::detail::value_and_holder&, const std::vector<int, std::allocator<int> >&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const std::vector<int, std::allocator<int> >&>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, const std::vector<int>&)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const std::vector<int, std::allocator<int> >&>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, const std::vector<int>&)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<int, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<int, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {const std::vector<int, std::allocator<int> >&}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {const std::vector<int, std::allocator<int> >&}; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:86:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, const std::vector<int, std::allocator<int> >&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, const std::vector<int, std::allocator<int> >&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 17; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<17>, descr<19>, descr<3, Seldon::Network<int, double>::EdgeDirection>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<int, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<int, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:87:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<22, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<3, value_and_holder>&, const descr<17>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 22; long unsigned int N2 = 19; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<17>, descr<19>, descr<3, Seldon::Network<int, double>::EdgeDirection>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<int, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<int, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:87:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<43, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<22, value_and_holder>&, const descr<19>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 43; long unsigned int N2 = 3; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {Seldon::Network<int, double>::EdgeDirection}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<17>, descr<19>, descr<3, Seldon::Network<int, double>::EdgeDirection>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<int, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<int, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:87:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<48, pybind11::detail::value_and_holder, Seldon::Network<int, double>::EdgeDirection> pybind11::detail::operator,(const descr<43, value_and_holder>&, const descr<3, Seldon::Network<int, double>::EdgeDirection>&)’ always evaluates both arguments [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<int, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<int, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:87:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 3; long unsigned int N2 = 13; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<13>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, const std::vector<double, std::allocator<double> >&>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, const std::vector<double, std::allocator<double> >&>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const std::vector<double, std::allocator<double> >&>::execute<pybind11::class_<Seldon::Network<double, double> > >(pybind11::class_<Seldon::Network<double, double> >&)::<lambda(pybind11::detail::value_and_holder&, const std::vector<double>&)>; Return = void; Args = {pybind11::detail::value_and_holder&, const std::vector<double, std::allocator<double> >&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const std::vector<double, std::allocator<double> >&>::execute<pybind11::class_<Seldon::Network<double, double> > >(pybind11::class_<Seldon::Network<double, double> >&)::<lambda(pybind11::detail::value_and_holder&, const std::vector<double>&)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const std::vector<double, std::allocator<double> >&>::execute<pybind11::class_<Seldon::Network<double, double> > >(pybind11::class_<Seldon::Network<double, double> >&)::<lambda(pybind11::detail::value_and_holder&, const std::vector<double>&)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<double, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<double, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {const std::vector<double, std::allocator<double> >&}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {const std::vector<double, std::allocator<double> >&}; Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:86:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<18, pybind11::detail::value_and_holder> pybind11::detail::operator,(const descr<3, value_and_holder>&, const descr<13>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const std::vector<double, std::allocator<double> >&>::execute<pybind11::class_<Seldon::Network<double, double> > >(pybind11::class_<Seldon::Network<double, double> >&)::<lambda(pybind11::detail::value_and_holder&, const std::vector<double>&)>; Return = void; Args = {pybind11::detail::value_and_holder&, const std::vector<double, std::allocator<double> >&}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const std::vector<double, std::allocator<double> >&>::execute<pybind11::class_<Seldon::Network<double, double> > >(pybind11::class_<Seldon::Network<double, double> >&)::<lambda(pybind11::detail::value_and_holder&, const std::vector<double>&)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<const std::vector<double, std::allocator<double> >&>::execute<pybind11::class_<Seldon::Network<double, double> > >(pybind11::class_<Seldon::Network<double, double> >&)::<lambda(pybind11::detail::value_and_holder&, const std::vector<double>&)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<double, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<double, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {const std::vector<double, std::allocator<double> >&}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {const std::vector<double, std::allocator<double> >&}; Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:86:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, const std::vector<double, std::allocator<double> >&>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, const std::vector<double, std::allocator<double> >&>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h: In substitution of ‘template<long unsigned int N1, long unsigned int N2, class ... Ts1, class ... Ts2> constexpr pybind11::detail::descr<((N1 + N2) + 2), Ts1 ..., Ts2 ...> pybind11::detail::operator,(const descr<N1, Ts1 ...>&, const descr<N2, Ts2 ...>&) [with long unsigned int N1 = 43; long unsigned int N2 = 3; Ts1 = {pybind11::detail::value_and_holder}; Ts2 = {Seldon::Network<double, double>::EdgeDirection}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:155:21:   required from ‘constexpr auto pybind11::detail::concat(const descr<N, Ts ...>&, const Args& ...) [with long unsigned int N = 3; Ts = {value_and_holder}; Args = {descr<17>, descr<19>, descr<3, Seldon::Network<double, double>::EdgeDirection>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1574:37:   required from ‘constexpr const auto pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection>::arg_names’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1573:27:   required from ‘class pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection>’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:263:43:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<double, double> > >(pybind11::class_<Seldon::Network<double, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<double, double>::EdgeDirection)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<double, double> > >(pybind11::class_<Seldon::Network<double, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<double, double>::EdgeDirection)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<double, double> > >(pybind11::class_<Seldon::Network<double, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<double, double>::EdgeDirection)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<double, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<double, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection}; Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:87:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/descr.h:148:46: warning: user-defined ‘constexpr pybind11::detail::descr<48, pybind11::detail::value_and_holder, Seldon::Network<double, double>::EdgeDirection> pybind11::detail::operator,(const descr<43, value_and_holder>&, const descr<3, Seldon::Network<double, double>::EdgeDirection>&)’ always evaluates both arguments [-Weffc++]
  148 | constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h: In instantiation of ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<double, double> > >(pybind11::class_<Seldon::Network<double, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<double, double>::EdgeDirection)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<double, double> > >(pybind11::class_<Seldon::Network<double, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<double, double>::EdgeDirection)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<double, double> > >(pybind11::class_<Seldon::Network<double, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<double, double>::EdgeDirection)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<double, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<double, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection}; Extra = {}; type_ = Seldon::Network<double, double>; options = {}]’
../python_bindings/bindings.cpp:87:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = double; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:567:39:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1551:7: warning: ‘pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection>::argcasters’ should be initialized in the member initialization list [-Weffc++]
 1551 | class argument_loader {
      |       ^~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:268:21: note: synthesized method ‘constexpr pybind11::detail::argument_loader<pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<double, double>::EdgeDirection>::argument_loader()’ first required here
  268 |             cast_in args_converter;
      |                     ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: In instantiation of ‘constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 1; _Head = pybind11::detail::type_caster<std::vector<std::vector<long unsigned int> >, void>]’:
/usr/include/c++/12/tuple:280:29:   recursively required from ‘constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl() [with long unsigned int _Idx = 1; _Head = pybind11::detail::type_caster<std::vector<std::vector<long unsigned int> >, void>; _Tail = {pybind11::detail::type_caster<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >, void>, pybind11::detail::type_caster<Seldon::Network<int, double>::EdgeDirection, void>}]’
/usr/include/c++/12/tuple:280:29:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<int, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<int, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:87:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:165:8: warning: ‘pybind11::detail::list_caster<std::vector<std::vector<long unsigned int> >, std::vector<long unsigned int> >::value’ should be initialized in the member initialization list [-Weffc++]
  165 | struct list_caster {
      |        ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:215:8: note: synthesized method ‘constexpr pybind11::detail::list_caster<std::vector<std::vector<long unsigned int> >, std::vector<long unsigned int> >::list_caster()’ first required here
  215 | struct type_caster<std::vector<Type, Alloc>> : list_caster<std::vector<Type, Alloc>, Type> {};
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/tuple:190:9: note: synthesized method ‘constexpr pybind11::detail::type_caster<std::vector<std::vector<long unsigned int> >, void>::type_caster()’ first required here
  190 |       : _M_head_impl() { }
      |         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: In instantiation of ‘constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 2; _Head = pybind11::detail::type_caster<std::vector<std::vector<double>, std::allocator<std::vector<double> > >, void>]’:
/usr/include/c++/12/tuple:280:29:   recursively required from ‘constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl() [with long unsigned int _Idx = 2; _Head = pybind11::detail::type_caster<std::vector<std::vector<double>, std::allocator<std::vector<double> > >, void>; _Tail = {pybind11::detail::type_caster<Seldon::Network<int, double>::EdgeDirection, void>}]’
/usr/include/c++/12/tuple:280:29:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<int, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<int, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:87:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:165:8: warning: ‘pybind11::detail::list_caster<std::vector<std::vector<double>, std::allocator<std::vector<double> > >, std::vector<double> >::value’ should be initialized in the member initialization list [-Weffc++]
  165 | struct list_caster {
      |        ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:215:8: note: synthesized method ‘constexpr pybind11::detail::list_caster<std::vector<std::vector<double>, std::allocator<std::vector<double> > >, std::vector<double> >::list_caster()’ first required here
  215 | struct type_caster<std::vector<Type, Alloc>> : list_caster<std::vector<Type, Alloc>, Type> {};
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/tuple:190:9: note: synthesized method ‘constexpr pybind11::detail::type_caster<std::vector<std::vector<double>, std::allocator<std::vector<double> > >, void>::type_caster()’ first required here
  190 |       : _M_head_impl() { }
      |         ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h: In instantiation of ‘bool pybind11::detail::list_caster<Type, Value>::load(pybind11::handle, bool) [with Type = std::vector<std::vector<long unsigned int> >; Value = std::vector<long unsigned int>]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1598:51:   required from ‘bool pybind11::detail::argument_loader<Args>::load_impl_sequence(pybind11::detail::function_call&, std::index_sequence<Is ...>) [with long unsigned int ...Is = {0, 1, 2, 3}; Args = {pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; std::index_sequence<Is ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../cast.h:1576:68:   required from ‘bool pybind11::detail::argument_loader<Args>::load_args(pybind11::detail::function_call&) [with Args = {pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:271:42:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Return = void; Args = {pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:145:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1634:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection>::execute<pybind11::class_<Seldon::Network<int, double> > >(pybind11::class_<Seldon::Network<int, double> >&)::<lambda(pybind11::detail::value_and_holder&, std::vector<std::vector<long unsigned int> >&&, std::vector<std::vector<double>, std::allocator<std::vector<double> > >&&, Seldon::Network<int, double>::EdgeDirection)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Seldon::Network<int, double>; options = {}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/init.h:203:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Seldon::Network<int, double> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1672:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {std::vector<std::vector<long unsigned int, std::allocator<long unsigned int> >, std::allocator<std::vector<long unsigned int, std::allocator<long unsigned int> > > >&&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&&, Seldon::Network<int, double>::EdgeDirection}; Extra = {}; type_ = Seldon::Network<int, double>; options = {}]’
../python_bindings/bindings.cpp:87:13:   required from ‘void generate_networks_bindings(pybind11::module&, std::string) [with AgentT = int; WeightT = double; pybind11::module = pybind11::module_; std::string = std::__cxx11::basic_string<char>]’
../python_bindings/bindings.cpp:566:36:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:165:8: warning: ‘pybind11::detail::list_caster<std::vector<long unsigned int>, long unsigned int>::value’ should be initialized in the member initialization list [-Weffc++]
  165 | struct list_caster {
      |        ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:215:8: note: synthesized method ‘constexpr pybind11::detail::list_caster<std::vector<long unsigned int>, long unsigned int>::list_caster()’ first required here
  215 | struct type_caster<std::vector<Type, Alloc>> : list_caster<std::vector<Type, Alloc>, Type> {};
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/stl.h:176:24: note: synthesized method ‘constexpr pybind11::detail::type_caster<std::vector<long unsigned int>, void>::type_caster()’ first required here
  176 |             value_conv conv;
      |                        ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘constexpr void fmt::v10::detail::handle_dynamic_spec(int&, arg_ref<typename Context::char_type>, Context&) [with Handler = width_checker; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::char_type = char]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:4519:53:   required from ‘constexpr decltype (ctx.out()) fmt::v10::formatter<T, Char, typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type>::format(const T&, FormatContext&) const [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = fmt::v10::basic_string_view<char>; Char = char; typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type = void; decltype (ctx.out()) = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:151:60:   required from ‘OutputIt fmt::v10::basic_ostream_formatter<Char>::format(const T&, fmt::v10::basic_format_context<OutputIt, Char>&) const [with T = std::filesystem::__cxx11::path; OutputIt = fmt::v10::appender; Char = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:164:49:   required from ‘OutputIt fmt::v10::formatter<fmt::v10::detail::streamed_view<T>, Char>::format(fmt::v10::detail::streamed_view<T>, fmt::v10::basic_format_context<OutputIt, Char>&) const [with OutputIt = fmt::v10::appender; T = std::filesystem::__cxx11::path; Char = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1328:28:   required from ‘static void fmt::v10::detail::value<Context>::format_custom_arg(void*, typename Context::parse_context_type&, Context&) [with T = fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>; Formatter = fmt::v10::formatter<fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>, char, void>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::parse_context_type = fmt::v10::basic_format_parse_context<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1310:19:   required from ‘constexpr fmt::v10::detail::value<Context>::value(T&) [with T = fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = streamed_view<std::filesystem::__cxx11::path>; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2835:44:   required from ‘std::string fmt::v10::format(format_string<T ...>, T&& ...) [with T = {detail::streamed_view<std::filesystem::__cxx11::path>}; std::string = std::__cxx11::basic_string<char>; format_string<T ...> = basic_format_string<char, detail::streamed_view<std::filesystem::__cxx11::path> >]’
../subprojects/seldon/include/util/misc.hpp:17:46:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3852:3: warning: switch missing default case [-Wswitch-default]
 3852 |   switch (ref.kind) {
      |   ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘constexpr void fmt::v10::detail::handle_dynamic_spec(int&, arg_ref<typename Context::char_type>, Context&) [with Handler = precision_checker; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::char_type = char]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:4521:57:   required from ‘constexpr decltype (ctx.out()) fmt::v10::formatter<T, Char, typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type>::format(const T&, FormatContext&) const [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = fmt::v10::basic_string_view<char>; Char = char; typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type = void; decltype (ctx.out()) = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:151:60:   required from ‘OutputIt fmt::v10::basic_ostream_formatter<Char>::format(const T&, fmt::v10::basic_format_context<OutputIt, Char>&) const [with T = std::filesystem::__cxx11::path; OutputIt = fmt::v10::appender; Char = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:164:49:   required from ‘OutputIt fmt::v10::formatter<fmt::v10::detail::streamed_view<T>, Char>::format(fmt::v10::detail::streamed_view<T>, fmt::v10::basic_format_context<OutputIt, Char>&) const [with OutputIt = fmt::v10::appender; T = std::filesystem::__cxx11::path; Char = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1328:28:   required from ‘static void fmt::v10::detail::value<Context>::format_custom_arg(void*, typename Context::parse_context_type&, Context&) [with T = fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>; Formatter = fmt::v10::formatter<fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>, char, void>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::parse_context_type = fmt::v10::basic_format_parse_context<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1310:19:   required from ‘constexpr fmt::v10::detail::value<Context>::value(T&) [with T = fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = streamed_view<std::filesystem::__cxx11::path>; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2835:44:   required from ‘std::string fmt::v10::format(format_string<T ...>, T&& ...) [with T = {detail::streamed_view<std::filesystem::__cxx11::path>}; std::string = std::__cxx11::basic_string<char>; format_string<T ...> = basic_format_string<char, detail::streamed_view<std::filesystem::__cxx11::path> >]’
../subprojects/seldon/include/util/misc.hpp:17:46:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3852:3: warning: switch missing default case [-Wswitch-default]
In file included from ../subprojects/seldon/include/util/math.hpp:3:
../subprojects/seldon/include/util/erfinv.hpp: In instantiation of ‘T Seldon::Math::erfinv(T) [with T = double]’:
../subprojects/seldon/include/util/math.hpp:173:28:   required from ‘ScalarT Seldon::truncated_normal_distribution<ScalarT>::inverse_cdf_gauss(ScalarT) [with ScalarT = double]’
../subprojects/seldon/include/util/math.hpp:200:16:   required from ‘ScalarT Seldon::truncated_normal_distribution<ScalarT>::inverse_cdf(ScalarT) [with ScalarT = double]’
../subprojects/seldon/include/util/math.hpp:275:89:   required from ‘std::array<ScalarT, 2> Seldon::bivariate_gaussian_copula<ScalarT, dist1T, dist2T>::operator()(Generator&) [with Generator = std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>; ScalarT = double; dist1T = Seldon::power_law_distribution<>; dist2T = Seldon::truncated_normal_distribution<>]’
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:127:53:   required from ‘void Seldon::ActivityDrivenModelAbstract<AgentT_>::get_agents_from_power_law() [with AgentT_ = Seldon::Agent<Seldon::ActivityAgentData>]’
../subprojects/seldon/include/models/ActivityDrivenModel.hpp:54:9:   required from ‘Seldon::ActivityDrivenModelAbstract<AgentT_>::ActivityDrivenModelAbstract(const Seldon::Config::ActivityDrivenSettings&, NetworkT&, std::mt19937&) [with AgentT_ = Seldon::Agent<Seldon::ActivityAgentData>; NetworkT = Seldon::Network<Seldon::Agent<Seldon::ActivityAgentData>, double>; std::mt19937 = std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>]’
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::ActivityDrivenModelAbstract<Seldon::Agent<Seldon::ActivityAgentData> >; _Args = {Seldon::Config::ActivityDrivenSettings&, Seldon::Network<Seldon::Agent<Seldon::ActivityAgentData>, double>&, mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::ActivityDrivenModelAbstract<Seldon::Agent<Seldon::ActivityAgentData> > >]’
../subprojects/seldon/include/model_factory.hpp:56:77:   required from ‘auto Seldon::ModelFactory::create_model_activity_driven(Seldon::Network<AgentT>&, const ModelVariantT&, std::mt19937&) [with AgentT = Seldon::Agent<Seldon::ActivityAgentData>; ModelVariantT = std::variant<Seldon::Config::DeGrootSettings, Seldon::Config::ActivityDrivenSettings, Seldon::Config::ActivityDrivenInertialSettings, Seldon::Config::DeffuantSettings>; std::mt19937 = std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>]’
../subprojects/seldon/include/simulation.hpp:71:63:   required from ‘void Seldon::Simulation<AgentType>::create_model(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::ActivityAgentData>]’
../subprojects/seldon/include/simulation.hpp:105:9:   required from ‘Seldon::Simulation<AgentType>::Simulation(const Seldon::Config::SimulationOptions&, const std::optional<std::__cxx11::basic_string<char> >&, const std::optional<std::__cxx11::basic_string<char> >&) [with AgentType = Seldon::Agent<Seldon::ActivityAgentData>]’
/usr/include/c++/12/bits/unique_ptr.h:1065:30:   required from ‘std::__detail::__unique_ptr_t<_Tp> std::make_unique(_Args&& ...) [with _Tp = Seldon::Simulation<Seldon::Agent<Seldon::ActivityAgentData> >; _Args = {Seldon::Config::SimulationOptions&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&, const optional<__cxx11::basic_string<char, char_traits<char>, allocator<char> > >&}; __detail::__unique_ptr_t<_Tp> = __detail::__unique_ptr_t<Seldon::Simulation<Seldon::Agent<Seldon::ActivityAgentData> > >]’
../python_bindings/bindings.cpp:63:95:   required from here
../subprojects/seldon/include/util/erfinv.hpp:19:16: warning: comparing floating-point with ‘==’ or ‘!=’ is unsafe [-Wfloat-equal]
   19 |     else if( x == 1.0 )
      |              ~~^~~~~~
../subprojects/seldon/include/util/erfinv.hpp:23:16: warning: comparing floating-point with ‘==’ or ‘!=’ is unsafe [-Wfloat-equal]
   23 |     else if( x == -1.0 )
      |              ~~^~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:28:19: warning: conversion from ‘long double’ to ‘double’ changes value from ‘6.93147180559945309429e-1l’ to ‘6.9314718055994529e-1’ [-Wfloat-conversion]
   28 |     const T LN2 = 6.931471805599453094172321214581e-1L;
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:30:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘1.19753231156709125647e+0l’ to ‘1.1975323115670913e+0’ [-Wfloat-conversion]
   30 |     const T A0 = 1.1975323115670912564578e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:31:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘4.70726881123839780117e+1l’ to ‘4.7072688112383979e+1’ [-Wfloat-conversion]
   31 |     const T A1 = 4.7072688112383978012285e1L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:32:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘6.97062665343895982384e+2l’ to ‘6.9706266534389601e+2’ [-Wfloat-conversion]
   32 |     const T A2 = 6.9706266534389598238465e2L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:33:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘4.85488688938438867959e+3l’ to ‘4.8548868893843883e+3’ [-Wfloat-conversion]
   33 |     const T A3 = 4.8548868893843886794648e3L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:34:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘1.62358625151675753839e+4l’ to ‘1.6235862515167575e+4’ [-Wfloat-conversion]
   34 |     const T A4 = 1.6235862515167575384252e4L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:35:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.37820413821143857316e+4l’ to ‘2.3782041382114385e+4’ [-Wfloat-conversion]
   35 |     const T A5 = 2.3782041382114385731252e4L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:36:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘1.18194933470622944043e+4l’ to ‘1.1819493347062295e+4’ [-Wfloat-conversion]
   36 |     const T A6 = 1.1819493347062294404278e4L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:37:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘8.87094069625455148298e+2l’ to ‘8.8709406962545518e+2’ [-Wfloat-conversion]
   37 |     const T A7 = 8.8709406962545514830200e2L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:40:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘4.2313330701600911251e+1l’ to ‘4.2313330701600911e+1’ [-Wfloat-conversion]
   40 |     const T B1 = 4.2313330701600911252e1L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:41:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘6.87187007492057908287e+2l’ to ‘6.8718700749205789e+2’ [-Wfloat-conversion]
   41 |     const T B2 = 6.8718700749205790830e2L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:42:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘5.39419602142475110762e+3l’ to ‘5.3941960214247511e+3’ [-Wfloat-conversion]
   42 |     const T B3 = 5.3941960214247511077e3L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:43:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.12137943015865958678e+4l’ to ‘2.1213794301586597e+4’ [-Wfloat-conversion]
   43 |     const T B4 = 2.1213794301586595867e4L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:44:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘3.93078958000927106085e+4l’ to ‘3.9307895800092709e+4’ [-Wfloat-conversion]
   44 |     const T B5 = 3.9307895800092710610e4L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:45:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.87290857357219426742e+4l’ to ‘2.8729085735721943e+4’ [-Wfloat-conversion]
   45 |     const T B6 = 2.8729085735721942674e4L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:46:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘5.22649527885285456108e+3l’ to ‘5.2264952788528544e+3’ [-Wfloat-conversion]
   46 |     const T B7 = 5.2264952788528545610e3L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:48:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘1.42343711074968357739e+0l’ to ‘1.4234371107496835e+0’ [-Wfloat-conversion]
   48 |     const T C0 = 1.42343711074968357734e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:49:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘4.63033784615654529608e+0l’ to ‘4.6303378461565456e+0’ [-Wfloat-conversion]
   49 |     const T C1 = 4.63033784615654529590e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:50:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘5.76949722146069140551e+0l’ to ‘5.769497221460691e+0’ [-Wfloat-conversion]
   50 |     const T C2 = 5.76949722146069140550e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:51:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘3.64784832476320460513e+0l’ to ‘3.6478483247632045e+0’ [-Wfloat-conversion]
   51 |     const T C3 = 3.64784832476320460504e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:52:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘1.27045825245236838257e+0l’ to ‘1.2704582524523684e+0’ [-Wfloat-conversion]
   52 |     const T C4 = 1.27045825245236838258e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:53:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.41780725177450611773e-1l’ to ‘2.4178072517745061e-1’ [-Wfloat-conversion]
   53 |     const T C5 = 2.41780725177450611770e-1L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:54:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.27238449892691845834e-2l’ to ‘2.2723844989269184e-2’ [-Wfloat-conversion]
   54 |     const T C6 = 2.27238449892691845833e-2L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:55:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘7.7454501427834140765e-4l’ to ‘7.7454501427834139e-4’ [-Wfloat-conversion]
   55 |     const T C7 = 7.74545014278341407640e-4L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:57:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘1.41421356237309504876e+0l’ to ‘1.4142135623730951e+0’ [-Wfloat-conversion]
   57 |     const T D0 = 1.4142135623730950488016887e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:58:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.90365144454199461724e+0l’ to ‘2.9036514445419948e+0’ [-Wfloat-conversion]
   58 |     const T D1 = 2.9036514445419946173133295e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:59:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.37076616260245323664e+0l’ to ‘2.3707661626024534e+0’ [-Wfloat-conversion]
   59 |     const T D2 = 2.3707661626024532365971225e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:60:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘9.75478320017874271869e-1l’ to ‘9.7547832001787427e-1’ [-Wfloat-conversion]
   60 |     const T D3 = 9.7547832001787427186894837e-1L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:61:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.09450652105127491288e-1l’ to ‘2.094506521051275e-1’ [-Wfloat-conversion]
   61 |     const T D4 = 2.0945065210512749128288442e-1L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:62:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.14941603842528767778e-2l’ to ‘2.1494160384252878e-2’ [-Wfloat-conversion]
   62 |     const T D5 = 2.1494160384252876777097297e-2L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:63:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘7.74414590651577091656e-4l’ to ‘7.7441459065157709e-4’ [-Wfloat-conversion]
   63 |     const T D6 = 7.7441459065157709165577218e-4L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:64:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘1.48598500198403559059e-9l’ to ‘1.4859850019840355e-9’ [-Wfloat-conversion]
   64 |     const T D7 = 1.4859850019840355905497876e-9L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:66:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘6.65790464350110377731e+0l’ to ‘6.6579046435011033e+0’ [-Wfloat-conversion]
   66 |     const T E0 = 6.65790464350110377720e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:67:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘5.46378491116411436988e+0l’ to ‘5.4637849111641144e+0’ [-Wfloat-conversion]
   67 |     const T E1 = 5.46378491116411436990e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:68:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘1.78482653991729133577e+0l’ to ‘1.7848265399172913e+0’ [-Wfloat-conversion]
   68 |     const T E2 = 1.78482653991729133580e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:69:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.96560571828504891217e-1l’ to ‘2.9656057182850487e-1’ [-Wfloat-conversion]
   69 |     const T E3 = 2.96560571828504891230e-1L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:70:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.65321895265761230925e-2l’ to ‘2.6532189526576124e-2’ [-Wfloat-conversion]
   70 |     const T E4 = 2.65321895265761230930e-2L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:71:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘1.24266094738807843861e-3l’ to ‘1.2426609473880784e-3’ [-Wfloat-conversion]
   71 |     const T E5 = 1.24266094738807843860e-3L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:72:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.71155556874348757822e-5l’ to ‘2.7115555687434876e-5’ [-Wfloat-conversion]
   72 |     const T E6 = 2.71155556874348757815e-5L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:73:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.01033439929228813268e-7l’ to ‘2.0103343992922881e-7’ [-Wfloat-conversion]
   73 |     const T E7 = 2.01033439929228813265e-7L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:75:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘1.41421356237309504876e+0l’ to ‘1.4142135623730951e+0’ [-Wfloat-conversion]
   75 |     const T F0 = 1.414213562373095048801689e0L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:76:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘8.48290841659516458803e-1l’ to ‘8.482908416595164e-1’ [-Wfloat-conversion]
   76 |     const T F1 = 8.482908416595164588112026e-1L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:77:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘1.93648094695065910615e-1l’ to ‘1.9364809469506591e-1’ [-Wfloat-conversion]
   77 |     const T F2 = 1.936480946950659106176712e-1L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:78:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.10369376827206896869e-2l’ to ‘2.1036937682720691e-2’ [-Wfloat-conversion]
   78 |     const T F3 = 2.103693768272068968719679e-2L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:79:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘1.11280099707885984474e-3l’ to ‘1.1128009970788597e-3’ [-Wfloat-conversion]
   79 |     const T F4 = 1.112800997078859844711555e-3L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:80:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.61108840508059362516e-5l’ to ‘2.6110884050805935e-5’ [-Wfloat-conversion]
   80 |     const T F5 = 2.611088405080593625138020e-5L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:81:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.01032120768394306231e-7l’ to ‘2.0103212076839431e-7’ [-Wfloat-conversion]
   81 |     const T F6 = 2.010321207683943062279931e-7L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:82:18: warning: conversion from ‘long double’ to ‘double’ changes value from ‘2.89102460587296546152e-15l’ to ‘2.8910246058729655e-15’ [-Wfloat-conversion]
   82 |     const T F7 = 2.891024605872965461538222e-15L;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘constexpr OutputIt fmt::v10::detail::write(OutputIt, fmt::v10::basic_string_view<Char>, const fmt::v10::format_specs<Char>&) [with Char = char; OutputIt = fmt::v10::appender]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2339:15:   required from ‘constexpr OutputIt fmt::v10::detail::write(OutputIt, fmt::v10::basic_string_view<typename fmt::v10::type_identity<T>::type>, const fmt::v10::format_specs<Char>&, locale_ref) [with Char = char; OutputIt = fmt::v10::appender; typename fmt::v10::type_identity<T>::type = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:4516:31:   required from ‘constexpr decltype (ctx.out()) fmt::v10::formatter<T, Char, typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type>::format(const T&, FormatContext&) const [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = fmt::v10::basic_string_view<char>; Char = char; typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type = void; decltype (ctx.out()) = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:151:60:   required from ‘OutputIt fmt::v10::basic_ostream_formatter<Char>::format(const T&, fmt::v10::basic_format_context<OutputIt, Char>&) const [with T = std::filesystem::__cxx11::path; OutputIt = fmt::v10::appender; Char = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:164:49:   required from ‘OutputIt fmt::v10::formatter<fmt::v10::detail::streamed_view<T>, Char>::format(fmt::v10::detail::streamed_view<T>, fmt::v10::basic_format_context<OutputIt, Char>&) const [with OutputIt = fmt::v10::appender; T = std::filesystem::__cxx11::path; Char = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1328:28:   required from ‘static void fmt::v10::detail::value<Context>::format_custom_arg(void*, typename Context::parse_context_type&, Context&) [with T = fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>; Formatter = fmt::v10::formatter<fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>, char, void>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::parse_context_type = fmt::v10::basic_format_parse_context<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1310:19:   required from ‘constexpr fmt::v10::detail::value<Context>::value(T&) [with T = fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = streamed_view<std::filesystem::__cxx11::path>; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2835:44:   required from ‘std::string fmt::v10::format(format_string<T ...>, T&& ...) [with T = {detail::streamed_view<std::filesystem::__cxx11::path>}; std::string = std::__cxx11::basic_string<char>; format_string<T ...> = basic_format_string<char, detail::streamed_view<std::filesystem::__cxx11::path> >]’
../subprojects/seldon/include/util/misc.hpp:17:46:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2330:71: warning: padding struct to align ‘fmt::v10::detail::write<char, fmt::v10::appender>(fmt::v10::appender, fmt::v10::basic_string_view<char>, const fmt::v10::format_specs<>&)::<lambda(fmt::v10::detail::reserve_iterator<fmt::v10::appender>)>::<s capture>’ [-Wpadded]
 2330 |                         if (is_debug) return write_escaped_string(it, s);
      |                                                                       ^
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘constexpr decltype (vis(0)) fmt::v10::visit_format_arg(Visitor&&, const basic_format_arg<Context>&) [with Visitor = detail::width_checker; Context = basic_format_context<appender, char>; decltype (vis(0)) = long long unsigned int]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3835:46:   required from ‘constexpr int fmt::v10::detail::get_dynamic_spec(FormatArg) [with Handler = width_checker; FormatArg = fmt::v10::basic_format_arg<fmt::v10::basic_format_context<fmt::v10::appender, char> >]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3856:46:   required from ‘constexpr void fmt::v10::detail::handle_dynamic_spec(int&, arg_ref<typename Context::char_type>, Context&) [with Handler = width_checker; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::char_type = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:4519:53:   required from ‘constexpr decltype (ctx.out()) fmt::v10::formatter<T, Char, typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type>::format(const T&, FormatContext&) const [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = fmt::v10::basic_string_view<char>; Char = char; typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type = void; decltype (ctx.out()) = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:151:60:   required from ‘OutputIt fmt::v10::basic_ostream_formatter<Char>::format(const T&, fmt::v10::basic_format_context<OutputIt, Char>&) const [with T = std::filesystem::__cxx11::path; OutputIt = fmt::v10::appender; Char = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:164:49:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1310:19:   required from ‘constexpr fmt::v10::detail::value<Context>::value(T&) [with T = fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = streamed_view<std::filesystem::__cxx11::path>; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2835:44:   required from ‘std::string fmt::v10::format(format_string<T ...>, T&& ...) [with T = {detail::streamed_view<std::filesystem::__cxx11::path>}; std::string = std::__cxx11::basic_string<char>; format_string<T ...> = basic_format_string<char, detail::streamed_view<std::filesystem::__cxx11::path> >]’
../subprojects/seldon/include/util/misc.hpp:17:46:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1700:3: warning: switch missing default case [-Wswitch-default]
 1700 |   switch (arg.type_) {
      |   ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘constexpr decltype (vis(0)) fmt::v10::visit_format_arg(Visitor&&, const basic_format_arg<Context>&) [with Visitor = detail::precision_checker; Context = basic_format_context<appender, char>; decltype (vis(0)) = long long unsigned int]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3835:46:   required from ‘constexpr int fmt::v10::detail::get_dynamic_spec(FormatArg) [with Handler = precision_checker; FormatArg = fmt::v10::basic_format_arg<fmt::v10::basic_format_context<fmt::v10::appender, char> >]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3856:46:   required from ‘constexpr void fmt::v10::detail::handle_dynamic_spec(int&, arg_ref<typename Context::char_type>, Context&) [with Handler = precision_checker; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::char_type = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:4521:57:   required from ‘constexpr decltype (ctx.out()) fmt::v10::formatter<T, Char, typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type>::format(const T&, FormatContext&) const [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = fmt::v10::basic_string_view<char>; Char = char; typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type = void; decltype (ctx.out()) = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:151:60:   required from ‘OutputIt fmt::v10::basic_ostream_formatter<Char>::format(const T&, fmt::v10::basic_format_context<OutputIt, Char>&) const [with T = std::filesystem::__cxx11::path; OutputIt = fmt::v10::appender; Char = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:164:49:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1310:19:   required from ‘constexpr fmt::v10::detail::value<Context>::value(T&) [with T = fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = streamed_view<std::filesystem::__cxx11::path>; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2835:44:   required from ‘std::string fmt::v10::format(format_string<T ...>, T&& ...) [with T = {detail::streamed_view<std::filesystem::__cxx11::path>}; std::string = std::__cxx11::basic_string<char>; format_string<T ...> = basic_format_string<char, detail::streamed_view<std::filesystem::__cxx11::path> >]’
../subprojects/seldon/include/util/misc.hpp:17:46:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1700:3: warning: switch missing default case [-Wswitch-default]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘constexpr void fmt::v10::detail::counting_iterator::value_type::operator=(const T&) [with T = char]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1908:10:   required from ‘OutputIt fmt::v10::detail::write_escaped_string(OutputIt, fmt::v10::basic_string_view<Char>) [with Char = char; OutputIt = counting_iterator]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2324:35:   required from ‘constexpr OutputIt fmt::v10::detail::write(OutputIt, fmt::v10::basic_string_view<Char>, const fmt::v10::format_specs<Char>&) [with Char = char; OutputIt = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2339:15:   required from ‘constexpr OutputIt fmt::v10::detail::write(OutputIt, fmt::v10::basic_string_view<typename fmt::v10::type_identity<T>::type>, const fmt::v10::format_specs<Char>&, locale_ref) [with Char = char; OutputIt = fmt::v10::appender; typename fmt::v10::type_identity<T>::type = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:4516:31:   required from ‘constexpr decltype (ctx.out()) fmt::v10::formatter<T, Char, typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type>::format(const T&, FormatContext&) const [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = fmt::v10::basic_string_view<char>; Char = char; typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type = void; decltype (ctx.out()) = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:151:60:   required from ‘OutputIt fmt::v10::basic_ostream_formatter<Char>::format(const T&, fmt::v10::basic_format_context<OutputIt, Char>&) const [with T = std::filesystem::__cxx11::path; OutputIt = fmt::v10::appender; Char = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:164:49:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1310:19:   required from ‘constexpr fmt::v10::detail::value<Context>::value(T&) [with T = fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = streamed_view<std::filesystem::__cxx11::path>; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2835:44:   required from ‘std::string fmt::v10::format(format_string<T ...>, T&& ...) [with T = {detail::streamed_view<std::filesystem::__cxx11::path>}; std::string = std::__cxx11::basic_string<char>; format_string<T ...> = basic_format_string<char, detail::streamed_view<std::filesystem::__cxx11::path> >]’
../subprojects/seldon/include/util/misc.hpp:17:46:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2287:46: warning: ‘operator=’ should return a reference to ‘*this’ [-Weffc++]
 2287 |     template <typename T> FMT_CONSTEXPR void operator=(const T&) {}
      |                                              ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘constexpr fmt::v10::basic_format_arg<Context>::basic_format_arg() [with Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1966:16:   required from ‘constexpr fmt::v10::basic_format_args<Context>::format_arg fmt::v10::basic_format_args<Context>::get(int) const [with Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; format_arg = fmt::v10::basic_format_arg<fmt::v10::basic_format_context<fmt::v10::appender, char> >]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1766:68:   required from ‘constexpr fmt::v10::basic_format_context<OutputIt, Char>::format_arg fmt::v10::basic_format_context<OutputIt, Char>::arg(int) const [with OutputIt = fmt::v10::appender; Char = char; format_arg = fmt::v10::basic_format_arg<fmt::v10::basic_format_context<fmt::v10::appender, char> >]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3843:21:   required from ‘constexpr decltype (ctx.arg(id)) fmt::v10::detail::get_arg(Context&, ID) [with Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; ID = int; decltype (ctx.arg(id)) = fmt::v10::basic_format_arg<fmt::v10::basic_format_context<fmt::v10::appender, char> >]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3856:54:   required from ‘constexpr void fmt::v10::detail::handle_dynamic_spec(int&, arg_ref<typename Context::char_type>, Context&) [with Handler = width_checker; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::char_type = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:4519:53:   required from ‘constexpr decltype (ctx.out()) fmt::v10::formatter<T, Char, typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type>::format(const T&, FormatContext&) const [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = fmt::v10::basic_string_view<char>; Char = char; typename std::enable_if<(fmt::v10::detail::type_constant<T, Char>::value != fmt::v10::detail::type::custom_type), void>::type = void; decltype (ctx.out()) = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/ostream.h:151:60:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1310:19:   required from ‘constexpr fmt::v10::detail::value<Context>::value(T&) [with T = fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = streamed_view<std::filesystem::__cxx11::path>; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2835:44:   required from ‘std::string fmt::v10::format(format_string<T ...>, T&& ...) [with T = {detail::streamed_view<std::filesystem::__cxx11::path>}; std::string = std::__cxx11::basic_string<char>; format_string<T ...> = basic_format_string<char, detail::streamed_view<std::filesystem::__cxx11::path> >]’
../subprojects/seldon/include/util/misc.hpp:17:46:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1666:13: warning: ‘fmt::v10::basic_format_arg<fmt::v10::basic_format_context<fmt::v10::appender, char> >::value_’ should be initialized in the member initialization list [-Weffc++]
 1666 |   constexpr basic_format_arg() : type_(detail::type::none_type) {}
      |             ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::named_arg_info<char>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1990:26:   required from ‘int fmt::v10::basic_format_args<Context>::get_id(fmt::v10::basic_string_view<Char>) const [with Char = char; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1980:20:   required from ‘fmt::v10::basic_format_args<Context>::format_arg fmt::v10::basic_format_args<Context>::get(fmt::v10::basic_string_view<Char>) const [with Char = char; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; format_arg = fmt::v10::basic_format_arg<fmt::v10::basic_format_context<fmt::v10::appender, char> >]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1768:21:   required from ‘constexpr fmt::v10::basic_format_context<OutputIt, Char>::format_arg fmt::v10::basic_format_context<OutputIt, Char>::arg(fmt::v10::basic_string_view<Char>) [with OutputIt = fmt::v10::appender; Char = char; format_arg = fmt::v10::basic_format_arg<fmt::v10::basic_format_context<fmt::v10::appender, char> >]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3843:21:   required from ‘constexpr decltype (ctx.arg(id)) fmt::v10::detail::get_arg(Context&, ID) [with Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; ID = fmt::v10::basic_string_view<char>; decltype (ctx.arg(id)) = fmt::v10::basic_format_arg<fmt::v10::basic_format_context<fmt::v10::appender, char> >]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:3859:54:   required from ‘constexpr void fmt::v10::detail::handle_dynamic_spec(int&, arg_ref<typename Context::char_type>, Context&) [with Handler = width_checker; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::char_type = char]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:4519:53:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1310:19:   required from ‘constexpr fmt::v10::detail::value<Context>::value(T&) [with T = fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = streamed_view<std::filesystem::__cxx11::path>; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {fmt::v10::detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {detail::streamed_view<std::filesystem::__cxx11::path>}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2835:44:   required from ‘std::string fmt::v10::format(format_string<T ...>, T&& ...) [with T = {detail::streamed_view<std::filesystem::__cxx11::path>}; std::string = std::__cxx11::basic_string<char>; format_string<T ...> = basic_format_string<char, detail::streamed_view<std::filesystem::__cxx11::path> >]’
../subprojects/seldon/include/util/misc.hpp:17:46:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1162:33: warning: padding struct size to alignment boundary [-Wpadded]
 1162 | template <typename Char> struct named_arg_info {
      |                                 ^~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘class fmt::v10::detail::format_string_checker<char>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:47:   required from ‘consteval fmt::v10::basic_format_string<Char, Args>::basic_format_string(const S&) [with S = char [67]; typename std::enable_if<std::is_convertible<const S&, fmt::v10::basic_string_view<Char> >::value, int>::type <anonymous> = 0; Char = char; Args = {}]’
../subprojects/seldon/include/simulation.hpp:116:19:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2649:22: warning: padding struct to align ‘fmt::v10::detail::format_string_checker<char>::context_’ [-Wpadded]
 2649 |   parse_context_type context_;
      |                      ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘class fmt::v10::detail::format_string_checker<char, long unsigned int>’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:47:   required from ‘consteval fmt::v10::basic_format_string<Char, Args>::basic_format_string(const S&) [with S = char [15]; typename std::enable_if<std::is_convertible<const S&, fmt::v10::basic_string_view<Char> >::value, int>::type <anonymous> = 0; Char = char; Args = {long unsigned int&}]’
../subprojects/seldon/include/simulation.hpp:124:58:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2649:22: warning: padding struct to align ‘fmt::v10::detail::format_string_checker<char, long unsigned int>::context_’ [-Wpadded]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, long unsigned int>&>(const char*, const char*, format_string_checker<char, long unsigned int>&)::id_adapter’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2497:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_replacement_field(const Char*, const Char*, Handler&&) [with Char = char; Handler = format_string_checker<char, long unsigned int>&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
../subprojects/seldon/include/simulation.hpp:124:58:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, long unsigned int&>("network_{}.txt")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, long unsigned int> >(((fmt::v10::basic_format_string<char, long unsigned int&>*)this)->fmt::v10::basic_format_string<char, long unsigned int&>::str_, fmt::v10::detail::format_string_checker<char, long unsigned int>(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2488:10: warning: padding struct size to alignment boundary [-Wpadded]
 2488 |   struct id_adapter {
      |          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘constexpr decltype (ctx.begin()) fmt::v10::detail::parse_format_specs(ParseContext&) [with T = long unsigned int; ParseContext = compile_parse_context<char>; decltype (ctx.begin()) = const char*]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2684:51:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
../subprojects/seldon/include/simulation.hpp:124:58:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, long unsigned int&>("network_{}.txt")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, long unsigned int> >(((fmt::v10::basic_format_string<char, long unsigned int&>*)this)->fmt::v10::basic_format_string<char, long unsigned int&>::str_, fmt::v10::detail::format_string_checker<char, long unsigned int>(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, long unsigned int>&>((p + -1), end, (* & handler))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2502:33:   in ‘constexpr’ expansion of ‘(& handler)->fmt::v10::detail::format_string_checker<char, long unsigned int>::on_replacement_field((& handler)->fmt::v10::detail::format_string_checker<char, long unsigned int>::on_arg_id(), begin)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2677:20:   in ‘constexpr’ expansion of ‘((fmt::v10::detail::format_string_checker<char, long unsigned int>*)this)->fmt::v10::detail::format_string_checker<char, long unsigned int>::on_format_specs(id, begin, begin)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2734:8: warning: ‘fmt::v10::formatter<long long unsigned int, char, void>::specs_’ should be initialized in the member initialization list [-Weffc++]
 2734 | struct formatter<T, Char,
      |        ^~~~~~~~~~~~~~~~~~
 2735 |                  enable_if_t<detail::type_constant<T, Char>::value !=
      |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2736 |                              detail::type::custom_type>> {
      |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2591:12: note: synthesized method ‘constexpr fmt::v10::formatter<long long unsigned int, char, void>::formatter()’ first required here
 2591 |     return formatter<mapped_type, char_type>().parse(ctx);
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h: In instantiation of ‘struct fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>’:
/usr/include/c++/12/type_traits:971:30:   required from ‘struct std::__is_constructible_impl<fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void> >’
/usr/include/c++/12/type_traits:977:12:   required from ‘struct std::is_constructible<fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void> >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1465:66:   required from ‘struct fmt::v10::detail::arg_mapper<fmt::v10::basic_format_context<fmt::v10::appender, char> >::formattable<const std::chrono::duration<long int, std::ratio<1, 1000> >, std::chrono::duration<long int, std::ratio<1, 1000> > >’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1472:25:   required by substitution of ‘template<class T, typename std::enable_if<(! fmt::v10::detail::arg_mapper<fmt::v10::basic_format_context<fmt::v10::appender, char> >::formattable<T, typename std::remove_const<_Tp>::type>::value), int>::type <anonymous> > constexpr fmt::v10::detail::unformattable fmt::v10::detail::arg_mapper<fmt::v10::basic_format_context<fmt::v10::appender, char> >::do_map(T&) [with T = const std::chrono::duration<long int, std::ratio<1, 1000> >; typename std::enable_if<(! fmt::v10::detail::arg_mapper<fmt::v10::basic_format_context<fmt::v10::appender, char> >::formattable<T, typename std::remove_const<_Tp>::type>::value), int>::type <anonymous> = <missing>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1484:43:   required by substitution of ‘template<class T, class U, typename std::enable_if<((((((std::is_class<U>::value || std::is_enum<U>::value) || std::is_union<U>::value) && (! fmt::v10::detail::is_string<U>::value)) && (! fmt::v10::is_char<U>::value)) && (! fmt::v10::detail::is_named_arg<T>::value)) && (! std::is_arithmetic<typename fmt::v10::detail::format_as_result<U>::type>::value)), int>::type <anonymous> > constexpr decltype (((fmt::v10::detail::arg_mapper<fmt::v10::basic_format_context<fmt::v10::appender, char> >*)this)->fmt::v10::detail::arg_mapper<fmt::v10::basic_format_context<fmt::v10::appender, char> >::do_map(val)) fmt::v10::detail::arg_mapper<fmt::v10::basic_format_context<fmt::v10::appender, char> >::map(T&) [with T = const std::chrono::duration<long int, std::ratio<1, 1000> >; U = std::chrono::duration<long int, std::ratio<1, 1000> >; typename std::enable_if<((((((std::is_class<U>::value || std::is_enum<U>::value) || std::is_union<U>::value) && (! fmt::v10::detail::is_string<U>::value)) && (! fmt::v10::is_char<U>::value)) && (! fmt::v10::detail::is_named_arg<T>::value)) && (! std::is_arithmetic<typename fmt::v10::detail::format_as_result<U>::type>::value)), int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1500:53:   required by substitution of ‘template<class T, class Context> using mapped_type_constant = fmt::v10::detail::type_constant<decltype (fmt::v10::detail::arg_mapper<Context>().map(declval<const T&>())), typename Context::char_type> [with T = std::chrono::duration<long int, std::ratio<1, 1000> >; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2654:66:   required from ‘constexpr fmt::v10::detail::format_string_checker<Char, Args>::format_string_checker(fmt::v10::basic_string_view<Char>) [with Char = char; Args = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
../subprojects/seldon/include/simulation.hpp:144:27:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
../subprojects/seldon/include/simulation.hpp:144:27:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >("Iteration {}   iter_time = {:%Hh %Mm %Ss} \012")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:2050:27: warning: padding struct to align ‘fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>::format_str_’ [-Wpadded]
 2050 |   basic_string_view<Char> format_str_;
      |                           ^~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >&>(const char*, const char*, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >&)::id_adapter’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2497:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_replacement_field(const Char*, const Char*, Handler&&) [with Char = char; Handler = format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2568:36:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
../subprojects/seldon/include/simulation.hpp:144:27:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >("Iteration {}   iter_time = {:%Hh %Mm %Ss} \012")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > > >(((fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >*)this)->fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >::str_, fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2488:10: warning: padding struct size to alignment boundary [-Wpadded]
 2488 |   struct id_adapter {
      |          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h: In instantiation of ‘constexpr decltype (ctx.begin()) fmt::v10::detail::parse_format_specs(ParseContext&) [with T = std::chrono::duration<long int, std::ratio<1, 1000> >; ParseContext = compile_parse_context<char>; decltype (ctx.begin()) = const char*]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2684:51:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
../subprojects/seldon/include/simulation.hpp:144:27:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >("Iteration {}   iter_time = {:%Hh %Mm %Ss} \012")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > > >(((fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >*)this)->fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >::str_, fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2568:36:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >&>(p, end, (* & handler))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2512:38:   in ‘constexpr’ expansion of ‘(& handler)->fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >::on_format_specs(adapter.fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >&>(const char*, const char*, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >&)::id_adapter::arg_id, (begin + 1), end)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:2044:8: warning: ‘fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>::specs_’ should be initialized in the member initialization list [-Weffc++]
 2044 | struct formatter<std::chrono::duration<Rep, Period>, Char> {
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:2044:8: warning: ‘fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>::width_ref_’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:2044:8: warning: ‘fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>::precision_ref_’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:2044:8: warning: ‘fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>::format_str_’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2591:12: note: synthesized method ‘constexpr fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>::formatter()’ first required here
 2591 |     return formatter<mapped_type, char_type>().parse(ctx);
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘constexpr const Char* fmt::v10::detail::parse_align(const Char*, const Char*, fmt::v10::format_specs<Char>&) [with Char = char]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:2058:29:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
../subprojects/seldon/include/simulation.hpp:144:27:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >("Iteration {}   iter_time = {:%Hh %Mm %Ss} \012")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > > >(((fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >*)this)->fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >::str_, fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2568:36:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >&>(p, end, (* & handler))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2512:38:   in ‘constexpr’ expansion of ‘(& handler)->fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >::on_format_specs(adapter.fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >&>(const char*, const char*, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >&)::id_adapter::arg_id, (begin + 1), end)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2684:51:   in ‘constexpr’ expansion of ‘((fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >*)this)->fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >::parse_funcs_[id](((fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >*)this)->fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >::context_)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2591:53:   in ‘constexpr’ expansion of ‘fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>().fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>::parse(ctx.fmt::v10::detail::compile_parse_context<char>::<anonymous>)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:2382:5: warning: switch missing default case [-Wswitch-default]
 2382 |     switch (to_ascii(*p)) {
      |     ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h: In instantiation of ‘constexpr const Char* fmt::v10::detail::parse_chrono_format(const Char*, const Char*, Handler&&) [with Char = char; Handler = chrono_format_checker&]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:2074:38:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
../subprojects/seldon/include/simulation.hpp:144:27:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >("Iteration {}   iter_time = {:%Hh %Mm %Ss} \012")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > > >(((fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >*)this)->fmt::v10::basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >::str_, fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2568:36:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >&>(p, end, (* & handler))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2512:38:   in ‘constexpr’ expansion of ‘(& handler)->fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >::on_format_specs(adapter.fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >&>(const char*, const char*, format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >&)::id_adapter::arg_id, (begin + 1), end)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2684:51:   in ‘constexpr’ expansion of ‘((fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >*)this)->fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >::parse_funcs_[id](((fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >*)this)->fmt::v10::detail::format_string_checker<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >::context_)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2591:53:   in ‘constexpr’ expansion of ‘fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>().fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>::parse(ctx.fmt::v10::detail::compile_parse_context<char>::<anonymous>)’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:690:5: warning: switch missing default case [-Wswitch-default]
  690 |     switch (c) {
      |     ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_replacement_field<char, format_string_checker<char>&>(const char*, const char*, format_string_checker<char>&)::id_adapter’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2497:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_replacement_field(const Char*, const Char*, Handler&&) [with Char = char; Handler = format_string_checker<char>&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   required from ‘constexpr void fmt::v10::detail::parse_format_string(fmt::v10::basic_string_view<Char>, Handler&&) [with bool IS_CONSTEXPR = true; Char = char; Handler = format_string_checker<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2488:10: warning: padding struct size to alignment boundary [-Wpadded]
 2488 |   struct id_adapter {
      |          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, long unsigned int, long unsigned int>&>(const char*, const char*, format_string_checker<char, long unsigned int, long unsigned int>&)::id_adapter’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2497:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_replacement_field(const Char*, const Char*, Handler&&) [with Char = char; Handler = format_string_checker<char, long unsigned int, long unsigned int>&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   required from ‘void Seldon::network_to_file(const Network<AgentT>&, const std::string&) [with AgentT = Agent<DiscreteVectorAgentData>; std::string = std::__cxx11::basic_string<char>]’
../subprojects/seldon/include/simulation.hpp:122:36:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
../subprojects/seldon/include/network_io.hpp:53:38:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, long unsigned int&, long unsigned int>("{:>5}, {:>5}")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, long unsigned int, long unsigned int> >(((fmt::v10::basic_format_string<char, long unsigned int&, long unsigned int>*)this)->fmt::v10::basic_format_string<char, long unsigned int&, long unsigned int>::str_, fmt::v10::detail::format_string_checker<char, long unsigned int, long unsigned int>(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2488:10: warning: padding struct size to alignment boundary [-Wpadded]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>(const char*, const char*, format_string_checker<char, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::id_adapter’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2497:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_replacement_field(const Char*, const Char*, Handler&&) [with Char = char; Handler = format_string_checker<char, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   required from ‘void Seldon::agents_to_file(const Network<AgentT>&, const std::string&) [with AgentT = Agent<DiscreteVectorAgentData>; std::string = std::__cxx11::basic_string<char>]’
../subprojects/seldon/include/simulation.hpp:126:35:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
../subprojects/seldon/include/agent_io.hpp:58:38:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, long unsigned int&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >("{:>5}, {:>25}\012")’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(((fmt::v10::basic_format_string<char, long unsigned int&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*)this)->fmt::v10::basic_format_string<char, long unsigned int&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::str_, fmt::v10::detail::format_string_checker<char, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(fmt::v10::basic_string_view<char>(((const char*)s))))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2488:10: warning: padding struct size to alignment boundary [-Wpadded]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h: In instantiation of ‘struct fmt::v10::detail::chrono_formatter<fmt::v10::basic_format_context<fmt::v10::appender, char>, std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >, long int, std::ratio<1, 1000> >’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:2100:16:   required from ‘decltype (ctx.out()) fmt::v10::formatter<std::chrono::duration<_Rep1, _Period1>, Char>::format(std::chrono::duration<_Rep1, _Period1>, FormatContext&) const [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; Rep = long int; Period = std::ratio<1, 1000>; Char = char; decltype (ctx.out()) = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1328:28:   required from ‘static void fmt::v10::detail::value<Context>::format_custom_arg(void*, typename Context::parse_context_type&, Context&) [with T = std::chrono::duration<long int, std::ratio<1, 1000> >; Formatter = fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::parse_context_type = fmt::v10::basic_format_parse_context<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1310:19:   required from ‘constexpr fmt::v10::detail::value<Context>::value(T&) [with T = std::chrono::duration<long int, std::ratio<1, 1000> >; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = std::chrono::duration<long int, std::ratio<1, 1000> >; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2922:44:   required from ‘void fmt::v10::print(format_string<T ...>, T&& ...) [with T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}; format_string<T ...> = basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >]’
../subprojects/seldon/include/simulation.hpp:144:27:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:1769:7: warning: padding struct to align ‘fmt::v10::detail::chrono_formatter<fmt::v10::basic_format_context<fmt::v10::appender, char>, std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >, long int, std::ratio<1, 1000> >::val’ [-Wpadded]
 1769 |   rep val;
      |       ^~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:1760:8: warning: padding struct size to alignment boundary [-Wpadded]
 1760 | struct chrono_formatter {
      |        ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h: In instantiation of ‘fmt::v10::detail::chrono_formatter<FormatContext, OutputIt, Rep, Period>::chrono_formatter(FormatContext&, OutputIt, std::chrono::duration<_Rep2, _Period2>) [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; OutputIt = std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >; Rep = long int; Period = std::ratio<1, 1000>]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:2100:16:   required from ‘decltype (ctx.out()) fmt::v10::formatter<std::chrono::duration<_Rep1, _Period1>, Char>::format(std::chrono::duration<_Rep1, _Period1>, FormatContext&) const [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; Rep = long int; Period = std::ratio<1, 1000>; Char = char; decltype (ctx.out()) = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1328:28:   required from ‘static void fmt::v10::detail::value<Context>::format_custom_arg(void*, typename Context::parse_context_type&, Context&) [with T = std::chrono::duration<long int, std::ratio<1, 1000> >; Formatter = fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::parse_context_type = fmt::v10::basic_format_parse_context<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1310:19:   required from ‘constexpr fmt::v10::detail::value<Context>::value(T&) [with T = std::chrono::duration<long int, std::ratio<1, 1000> >; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = std::chrono::duration<long int, std::ratio<1, 1000> >; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2922:44:   required from ‘void fmt::v10::print(format_string<T ...>, T&& ...) [with T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}; format_string<T ...> = basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >]’
../subprojects/seldon/include/simulation.hpp:144:27:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:1778:3: warning: ‘fmt::v10::detail::chrono_formatter<fmt::v10::basic_format_context<fmt::v10::appender, char>, std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >, long int, std::ratio<1, 1000> >::precision’ should be initialized in the member initialization list [-Weffc++]
 1778 |   chrono_formatter(FormatContext& ctx, OutputIt o,
      |   ^~~~~~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:1778:3: warning: ‘fmt::v10::detail::chrono_formatter<fmt::v10::basic_format_context<fmt::v10::appender, char>, std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >, long int, std::ratio<1, 1000> >::s’ should be initialized in the member initialization list [-Weffc++]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h: In instantiation of ‘constexpr const Char* fmt::v10::detail::parse_chrono_format(const Char*, const Char*, Handler&&) [with Char = char; Handler = chrono_formatter<fmt::v10::basic_format_context<fmt::v10::appender, char>, std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >, long int, std::ratio<1, 1000> >&]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:2103:34:   required from ‘decltype (ctx.out()) fmt::v10::formatter<std::chrono::duration<_Rep1, _Period1>, Char>::format(std::chrono::duration<_Rep1, _Period1>, FormatContext&) const [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; Rep = long int; Period = std::ratio<1, 1000>; Char = char; decltype (ctx.out()) = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1328:28:   required from ‘static void fmt::v10::detail::value<Context>::format_custom_arg(void*, typename Context::parse_context_type&, Context&) [with T = std::chrono::duration<long int, std::ratio<1, 1000> >; Formatter = fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::parse_context_type = fmt::v10::basic_format_parse_context<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1310:19:   required from ‘constexpr fmt::v10::detail::value<Context>::value(T&) [with T = std::chrono::duration<long int, std::ratio<1, 1000> >; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = std::chrono::duration<long int, std::ratio<1, 1000> >; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2922:44:   required from ‘void fmt::v10::print(format_string<T ...>, T&& ...) [with T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}; format_string<T ...> = basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >]’
../subprojects/seldon/include/simulation.hpp:144:27:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:690:5: warning: switch missing default case [-Wswitch-default]
  690 |     switch (c) {
      |     ^~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h: In instantiation of ‘class fmt::v10::detail::tm_writer<std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >, char, std::chrono::duration<long int> >’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:1910:21:   required from ‘void fmt::v10::detail::chrono_formatter<FormatContext, OutputIt, Rep, Period>::on_24_hour(fmt::v10::detail::numeric_system, fmt::v10::detail::pad_type) [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; OutputIt = std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >; Rep = long int; Period = std::ratio<1, 1000>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:781:25:   required from ‘constexpr const Char* fmt::v10::detail::parse_chrono_format(const Char*, const Char*, Handler&&) [with Char = char; Handler = chrono_formatter<fmt::v10::basic_format_context<fmt::v10::appender, char>, std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >, long int, std::ratio<1, 1000> >&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:2103:34:   required from ‘decltype (ctx.out()) fmt::v10::formatter<std::chrono::duration<_Rep1, _Period1>, Char>::format(std::chrono::duration<_Rep1, _Period1>, FormatContext&) const [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; Rep = long int; Period = std::ratio<1, 1000>; Char = char; decltype (ctx.out()) = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1328:28:   required from ‘static void fmt::v10::detail::value<Context>::format_custom_arg(void*, typename Context::parse_context_type&, Context&) [with T = std::chrono::duration<long int, std::ratio<1, 1000> >; Formatter = fmt::v10::formatter<std::chrono::duration<long int, std::ratio<1, 1000> >, char, void>; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; typename Context::parse_context_type = fmt::v10::basic_format_parse_context<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1310:19:   required from ‘constexpr fmt::v10::detail::value<Context>::value(T&) [with T = std::chrono::duration<long int, std::ratio<1, 1000> >; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = std::chrono::duration<long int, std::ratio<1, 1000> >; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2922:44:   required from ‘void fmt::v10::print(format_string<T ...>, T&& ...) [with T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}; format_string<T ...> = basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >]’
../subprojects/seldon/include/simulation.hpp:144:27:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:1174:12: warning: padding struct to align ‘fmt::v10::detail::tm_writer<std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >, char, std::chrono::duration<long int> >::out_’ [-Wpadded]
 1174 |   OutputIt out_;
      |            ^~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h: In instantiation of ‘struct fmt::v10::detail::parse_replacement_field<char, format_string_checker<char, double, int>&>(const char*, const char*, format_string_checker<char, double, int>&)::id_adapter’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2497:3:   required from ‘constexpr const Char* fmt::v10::detail::parse_replacement_field(const Char*, const Char*, Handler&&) [with Char = char; Handler = format_string_checker<char, double, int>&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2534:44:   required from ‘void fmt::v10::detail::write_floating_seconds(fmt::v10::memory_buffer&, Duration, int) [with Duration = std::chrono::duration<long unsigned int, std::ratio<1, 1000> >; fmt::v10::memory_buffer = fmt::v10::basic_memory_buffer<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:1937:31:   required from ‘void fmt::v10::detail::chrono_formatter<FormatContext, OutputIt, Rep, Period>::on_second(fmt::v10::detail::numeric_system, fmt::v10::detail::pad_type) [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; OutputIt = std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >; Rep = long int; Period = std::ratio<1, 1000>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:790:24:   required from ‘constexpr const Char* fmt::v10::detail::parse_chrono_format(const Char*, const Char*, Handler&&) [with Char = char; Handler = chrono_formatter<fmt::v10::basic_format_context<fmt::v10::appender, char>, std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >, long int, std::ratio<1, 1000> >&]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:2103:34:   required from ‘decltype (ctx.out()) fmt::v10::formatter<std::chrono::duration<_Rep1, _Period1>, Char>::format(std::chrono::duration<_Rep1, _Period1>, FormatContext&) const [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; Rep = long int; Period = std::ratio<1, 1000>; Char = char; decltype (ctx.out()) = fmt::v10::appender]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1328:28:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = std::chrono::duration<long int, std::ratio<1, 1000> >; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2922:44:   required from ‘void fmt::v10::print(format_string<T ...>, T&& ...) [with T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}; format_string<T ...> = basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >]’
../subprojects/seldon/include/simulation.hpp:144:27:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:1159:17:   in ‘constexpr’ expansion of ‘fmt::v10::basic_format_string<char, double, int&>(<lambda closure object>fmt::v10::detail::write_floating_seconds<std::chrono::duration<long unsigned int, std::ratio<1, 1000> > >(fmt::v10::memory_buffer&, std::chrono::duration<long unsigned int, std::ratio<1, 1000> >, int)::<lambda()>().fmt::v10::detail::write_floating_seconds<std::chrono::duration<long unsigned int, std::ratio<1, 1000> > >(fmt::v10::memory_buffer&, std::chrono::duration<long unsigned int, std::ratio<1, 1000> >, int)::<lambda()>())’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2787:40:   in ‘constexpr’ expansion of ‘fmt::v10::detail::parse_format_string<true, char, format_string_checker<char, double, int> >(((fmt::v10::basic_format_string<char, double, int&>*)this)->fmt::v10::basic_format_string<char, double, int&>::str_, fmt::v10::detail::format_string_checker<char, double, int>((& s)->fmt::v10::detail::write_floating_seconds<std::chrono::duration<long unsigned int, std::ratio<1, 1000> > >(fmt::v10::memory_buffer&, std::chrono::duration<long unsigned int, std::ratio<1, 1000> >, int)::<lambda()>::FMT_COMPILE_STRING::operator fmt::v10::basic_string_view<char>()))’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2488:10: warning: padding struct size to alignment boundary [-Wpadded]
 2488 |   struct id_adapter {
      |          ^~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h: In instantiation of ‘fmt::v10::detail::to_utf8<WChar, Buffer>::to_utf8() [with WChar = char32_t; Buffer = fmt::v10::basic_memory_buffer<char, 128>]’:
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:382:9:   required from ‘OutputIt fmt::v10::detail::write_encoded_tm_str(OutputIt, fmt::v10::string_view, const std::locale&) [with OutputIt = std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >; fmt::v10::string_view = fmt::v10::basic_string_view<char>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:432:30:   required from ‘OutputIt fmt::v10::detail::write(OutputIt, const tm&, const std::locale&, char, char) [with Char = char; OutputIt = std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >; typename std::enable_if<std::is_same<Char, char>::value, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:1352:23:   required from ‘void fmt::v10::detail::tm_writer<OutputIt, Char, Duration>::format_localized(char, char) [with OutputIt = std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >; Char = char; Duration = std::chrono::duration<long int>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:1550:5:   required from ‘void fmt::v10::detail::tm_writer<OutputIt, Char, Duration>::on_24_hour(fmt::v10::detail::numeric_system, fmt::v10::detail::pad_type) [with OutputIt = std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >; Char = char; Duration = std::chrono::duration<long int>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:1910:21:   required from ‘void fmt::v10::detail::chrono_formatter<FormatContext, OutputIt, Rep, Period>::on_24_hour(fmt::v10::detail::numeric_system, fmt::v10::detail::pad_type) [with FormatContext = fmt::v10::basic_format_context<fmt::v10::appender, char>; OutputIt = std::back_insert_iterator<fmt::v10::basic_memory_buffer<char> >; Rep = long int; Period = std::ratio<1, 1000>]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/chrono.h:781:25:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1607:41:   required from ‘constexpr fmt::v10::detail::value<Context> fmt::v10::detail::make_arg(T&) [with bool PACKED = true; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; T = std::chrono::duration<long int, std::ratio<1, 1000> >; typename std::enable_if<PACKED, int>::type <anonymous> = 0]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1842:51:   required from ‘constexpr fmt::v10::format_arg_store<Context, Args>::format_arg_store(T& ...) [with T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}; Context = fmt::v10::basic_format_context<fmt::v10::appender, char>; Args = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:1860:18:   required from ‘constexpr fmt::v10::format_arg_store<Context, typename std::remove_cv<typename std::remove_reference<T>::type>::type ...> fmt::v10::make_format_args(T& ...) [with Context = basic_format_context<appender, char>; T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}]’
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/core.h:2922:44:   required from ‘void fmt::v10::print(format_string<T ...>, T&& ...) [with T = {long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> >}; format_string<T ...> = basic_format_string<char, long unsigned int, std::chrono::duration<long int, std::ratio<1, 1000> > >]’
../subprojects/seldon/include/simulation.hpp:144:27:   required from ‘void Seldon::Simulation<AgentType>::run(const std::filesystem::__cxx11::path&) [with AgentType = Seldon::Agent<Seldon::DiscreteVectorAgentData>]’
../subprojects/seldon/include/simulation.hpp:108:10:   required from here
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1388:3: warning: ‘fmt::v10::detail::to_utf8<char32_t, fmt::v10::basic_memory_buffer<char, 128> >::buffer_’ should be initialized in the member initialization list [-Weffc++]
 1388 |   to_utf8() {}
      |   ^~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h: At global scope:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:27: warning: ‘pybind11::class_<Seldon::Config::SimulationOptions>::def_readwrite<Seldon::Config::SimulationOptions, std::__cxx11::basic_string<char> >(const char*, std::__cxx11::basic_string<char> Seldon::Config::SimulationOptions::*)::<lambda(const pybind11::class_<Seldon::Config::SimulationOptions>::type&)>’ inherits the "cxx11" ABI tag that ‘const std::__cxx11::basic_string<char>’ (used in its return type) has [-Wabi-tag]
 1732 |         cpp_function fget([pm](const type &c) -> const D & { return c.*pm; }, is_method(*this)),
      |                           ^
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘const std::__cxx11::basic_string<char>’ declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:1732:27: warning: ‘pybind11::class_<Seldon::Config::InitialNetworkSettings>::def_readwrite<Seldon::Config::InitialNetworkSettings, std::optional<std::__cxx11::basic_string<char> > >(const char*, std::optional<std::__cxx11::basic_string<char> > Seldon::Config::InitialNetworkSettings::*)::<lambda(const pybind11::class_<Seldon::Config::InitialNetworkSettings>::type&)>’ inherits the "cxx11" ABI tag that ‘const std::optional<std::__cxx11::basic_string<char> >’ (used in its return type) has [-Wabi-tag]
 1732 |         cpp_function fget([pm](const type &c) -> const D & { return c.*pm; }, is_method(*this)),
      |                           ^
/usr/include/c++/12/optional:705:11: note: ‘const std::optional<std::__cxx11::basic_string<char> >’ declared here
  705 |     class optional
      |           ^~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2045:21: warning: ‘static constexpr std::string pybind11::detail::enum_base::init(bool, bool)::<lambda(pybind11::handle)>::_FUN(pybind11::handle)’ inherits the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in its return type) has [-Wabi-tag]
 2045 |                     [](handle arg) -> std::string {
      |                     ^
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:2045:21: warning: ‘pybind11::detail::enum_base::init(bool, bool)::<lambda(pybind11::handle)>’ inherits the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in its return type) has [-Wabi-tag]
 2045 |                     [](handle arg) -> std::string {
      |                     ^
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/pybind11.h:57:20: warning: ‘std::string pybind11::detail::replace_newlines_and_squash(const char*)’ inherits the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in its return type) has [-Wabi-tag]
   57 | inline std::string replace_newlines_and_squash(const char *text) {
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/class.h:28:20: warning: ‘std::string pybind11::detail::get_fully_qualified_tp_name(PyTypeObject*)’ inherits the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in its return type) has [-Wabi-tag]
   28 | inline std::string get_fully_qualified_tp_name(PyTypeObject *type) {
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:1208:31: warning: ‘std::string pybind11::detail::type_info_description(const std::type_info&)’ inherits the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in its return type) has [-Wabi-tag]
 1208 | PYBIND11_NOINLINE std::string type_info_description(const std::type_info &ti) {
      |                               ^~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
In file included from /home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/type_caster_base.h:16:
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/typeid.h:51:20: warning: ‘std::string pybind11::detail::clean_type_id(const char*)’ inherits the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in its return type) has [-Wabi-tag]
   51 | inline std::string clean_type_id(const char *typeid_name) {
      |                    ^~~~~~~~~~~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:721:20: warning: ‘std::string pybind11::detail::error_string()’ inherits the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in its return type) has [-Wabi-tag]
  721 | inline std::string error_string() {
      |                    ^~~~~~~~~~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:689:24: warning: ‘const std::string& pybind11::detail::error_fetch_and_normalize::error_string() const’ inherits the "cxx11" ABI tag that ‘const std::string’ {aka ‘const std::__cxx11::basic_string<char>’} (used in its return type) has [-Wabi-tag]
  689 |     std::string const &error_string() const {
      |                        ^~~~~~~~~~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘const std::string’ {aka ‘const std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/pybind11/detail/../detail/../pytypes.h:566:17: warning: ‘std::string pybind11::detail::error_fetch_and_normalize::format_value_and_trace() const’ inherits the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in its return type) has [-Wabi-tag]
  566 |     std::string format_value_and_trace() const {
      |                 ^~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:4026:8: warning: ‘std::string fmt::v10::format_int::str() const’ inherits the "cxx11" ABI tag that ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} (used in its return type) has [-Wabi-tag]
 4026 |   auto str() const -> std::string { return std::string(str_, size()); }
      |        ^~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
/home/parrot_user/micromamba/envs/pyseldonenv/include/fmt/format.h:1377:8: warning: ‘std::wstring fmt::v10::detail::utf8_to_utf16::str() const’ inherits the "cxx11" ABI tag that ‘std::wstring’ {aka ‘std::__cxx11::basic_string<wchar_t>’} (used in its return type) has [-Wabi-tag]
 1377 |   auto str() const -> std::wstring { return {&buffer_[0], size()}; }
      |        ^~~
/usr/include/c++/12/bits/basic_string.h:85:11: note: ‘std::wstring’ {aka ‘std::__cxx11::basic_string<wchar_t>’} declared here
   85 |     class basic_string
      |           ^~~~~~~~~~~~
../subprojects/seldon/include/util/erfinv.hpp:9:23: warning: ‘Seldon::Math::sqrt_pi’ defined but not used [-Wunused-const-variable=]
    9 | constexpr long double sqrt_pi = 1.7724538509055160272981674833411451827975494561224L;
      |                       ^~~~~~~
ninja: build stopped: subcommand failed.
INFO: autodetecting backend as ninja
INFO: calculating backend command to run: /home/parrot_user/micromamba/envs/pyseldonenv/bin/ninja -C /home/parrot_user/Desktop/pyseldon/build
