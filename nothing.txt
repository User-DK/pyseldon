py::print("Using Output Settings");
py::print(py::str("n_output_agents      : {} (Int)")
              .format(n_output_agents)); //($) // assuming some default values if not specified this is the default value symbol($)
py::print(py::str("n_output_network     : {} (Int)").format(n_output_network)); //($)
py::print(py::str("print_progress       : {}").format(print_progress));
py::print(py::str("output_initial       : {}").format(output_initial));
py::print(py::str("start_output         : {}").format(start_output));
py::print(py::str("start_numbering_from : {}").format(start_numbering_from));
py::print("Which can be changed using the OutputSettings Instance");

py::print("Using DeGroot Settings");
py::print(py::str("max_iterations    : {} (Int) (None means infinite)").format(max_iterations)); //($)
py::print(py::str("convergence_tol  : {}").format(convergence_tol));
py::print("Which can be changed using the DeGrootSettings instance");

py::print("Using Deffuant Settings");
py::print(py::str("max_iterations     : {} (Int) (None means infinite)").format(max_iterations)); //($)
py::print(py::str("homophily_threshold: {}").format(homophily_threshold));
py::print(py::str("mu                 : {}").format(mu));
py::print(py::str("use_network        : {}").format(use_network));
py::print(py::str("use_binary_vector  : {}").format(use_binary_vector));
py::print(py::str("dim                : {}").format(dim));
py::print("Which can be changed using the DeffuantSettings instance");

py::print("Using Activity Driven Settings");
py::print(py::str("max_iterations    : {} (None means infinite)").format(max_iterations));
py::print(py::str("dt                : {}").format(dt));
py::print(py::str("m                 : {}").format(m));
py::print(py::str("eps               : {}").format(eps));
py::print(py::str("gamma             : {}").format(gamma));
py::print(py::str("alpha             : {}").format(alpha));
py::print(py::str("homophily         : {}").format(homophily));
py::print(py::str("reciprocity       : {}").format(reciprocity));
py::print(py::str("K                 : {}").format(K));
py::print(py::str("mean_activities   : {} (boolean)").format(mean_activities));
py::print(py::str("mean_weights      : {} (boolean)").format(mean_weights));
py::print(py::str("n_bots            : {}").format(n_bots)); //@TODO why is this here? from seldon codebase
py::print(py::str("bot_m             : {}").format(bot_m));
py::print(py::str("bot_activity      : {}").format(bot_activity));
py::print(py::str("bot_opinion       : {}").format(bot_opinion));
py::print(py::str("bot_homophily     : {}").format(bot_homophily));
py::print(py::str("use_reluctances   : {}").format(use_reluctances));
py::print(py::str("reluctance_mean   : {}").format(reluctance_mean));
py::print(py::str("reluctance_sigma  : {}").format(reluctance_sigma));
py::print(py::str("reluctance_eps    : {}").format(reluctance_eps));
py::print(py::str("covariance_factor : {}").format(covariance_factor));
py::print("Which can be changed using the ActivityDrivenSettings instance");

py::print(py::str("max_iterations       : {} (None means infinite)").format(max_iterations));
py::print(py::str("dt                   : {}").format(dt));
py::print(py::str("m                    : {}").format(m));
py::print(py::str("eps                  : {}").format(eps));
py::print(py::str("gamma                : {}").format(gamma));
py::print(py::str("alpha                : {}").format(alpha));
py::print(py::str("homophily            : {}").format(homophily));
py::print(py::str("reciprocity          : {}").format(reciprocity));
py::print(py::str("K                    : {}").format(K));
py::print(py::str("mean_activities      : {} (boolean)").format(mean_activities));
py::print(py::str("mean_weights         : {} (boolean)").format(mean_weights));
py::print(py::str("n_bots               : {}").format(n_bots)); //@TODO why is this here? from seldon codebase
py::print(py::str("bot_m                : {}").format(bot_m));
py::print(py::str("bot_activity         : {}").format(bot_activity));
py::print(py::str("bot_opinion          : {}").format(bot_opinion));
py::print(py::str("bot_homophily        : {}").format(bot_homophily));
py::print(py::str("use_reluctances      : {}").format(use_reluctances));
py::print(py::str("reluctance_mean      : {}").format(reluctance_mean));
py::print(py::str("reluctance_sigma     : {}").format(reluctance_sigma));
py::print(py::str("reluctance_eps       : {}").format(reluctance_eps));
py::print(py::str("covariance_factor    : {}").format(covariance_factor));
py::print(py::str("friction_coefficient :").format(friction_coefficient));
py::print("Which can be changed using the ActivityDrivenInertialSettings instance");

py::print("Using Initial Network Settings");
py::print(py::str("file            : {} (String)").format(file));
py::print(py::str("number_of_agents        : {} (Int)").format(number_of_agents));
py::print(py::str("connections_per_agent   : {} (Int)").format(connections_per_agent));
py::print("Which can be changed using the InitialNetworkSettings instance");

py::print("Using Simulation Options");
py::print(py::str("model             : {}").format(simulation_options.model_string)); //($)
py::print(py::str("rng_seed          : {}").format(rng_seed));                        //($)
py::print(py::str("output_settings   : {}").format(output_settings));                 //($)
py::print(py::str("model_settings    : {}").format(model_settings));                  //($)
py::print(py::str("network_settings  : {}").format(network_settings));                //($)
py::print("Which can be changed using the SimulationOptions instance");