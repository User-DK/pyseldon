"""This is the implementation of the Deffuant Model in Opinion Dynamics."""

from bindings import seldoncore
import pathlib
from typing import Optional

# from ._othersettings import Other_Settings

class Other_Settings:
  """
  All other settings for the simulation.
  
  Parameters:
  -----------

  output_settings:
  ----------------
  n_output_agents :  int, default=None
    Write out the agents every n iterations.

  n_output_network : int, default=None
    Write out the network every n iterations.

  print_progress : bool, default=False
    Print the progress of the simulation.

  output_initial : bool, default=True
    Output initial opinions and network.

  start_output : int, default=1
    Start printing opinion and/or network files from this iteration number.

  start_numbering_from : int, default=0
    The initial step number, before the simulation runs, is this value. The first step would be (1+start_numbering_from).
  
  network_settings:
  -----------------
  number_of_agents : int, default=200
    The number of agents in the network.
  
  connections_per_agent : int, default=10
    The number of connections per agent.
  """
  def __init__(self,n_output_agents: Optional[int] = None,
        n_output_network: Optional[int] = None,
        print_progress: bool = False,
        output_initial: bool = True,
        start_output: int = 1,
        start_numbering_from: int = 0, number_of_agents: int = 200,
        connections_per_agent: int = 10):
    self.output_settings = seldoncore.OutputSettings()
    self.output_settings.n_output_agents=n_output_agents
    self.output_settings.n_output_network=n_output_network
    self.output_settings.print_progress=print_progress
    self.output_settings.output_initial=output_initial
    self.output_settings.start_output=start_output
    self.output_settings.start_numbering_from=start_numbering_from
    self.network_settings = seldoncore.InitialNetworkSettings()
    self.network_settings.number_of_agents=number_of_agents
    self.network_settings.connections_per_agent=connections_per_agent



class Deffuant_Vector_Model:
  """
  DeGroot Model base class for Simulation.
  
  Parameters:
  -----------
  max_iterations : int, default=None
    The maximum number of iterations to run the simulation. If None, the simulation runs infinitely.
  
  homophily_threshold : float, default=0.2
    The threshold for homophily. If the difference in opinions between two agents is less than this value, they interact.
  
  mu : float, default=0.5
    The convergence rate of the agents.

  use_network : bool, default=False
    For using a square lattice network.
  
  dim : int, default=1
    The size of the opinions vector. This is used for the multi-dimensional DeffuantVector model.
  
  rng_seed : int, default=None
    The seed for the random number generator. If not provided, a random seed is picked. 
  
  agent_file : str, default=None
    The file to read the agents from. If None, the agents are generated randomly.
  
  network_file : str, default=None
    The file to read the network from. If None, the network is generated randomly

  other_settings : Other_Settings, default=None
    The other settings for the simulation. If None, the default settings are used.

  Attributes:
  -----------
  Network : Network (Object)
    The network generated by the simulation.

  Opinion : Float
    The opinions of the agents or nodes of the network.

  see also: seldoncore.Network
  """
  def __init__(self,max_iterations: int=None, homophily_threshold: float = 0.2,
        mu: float = 0.5,
        use_network: bool = False,
        dim: int = 1, rng_seed: Optional[int]=None, agent_file: Optional[str]=None, network_file: Optional[str]=None, other_settings: Other_Settings=None):
    self.model_settings = seldoncore.DeffuantSettings()
    self.model_settings.max_iterations=max_iterations
    self.model_settings.homophily_threshold=homophily_threshold
    self.model_settings.mu=mu
    self.model_settings.use_network=use_network
    self.model_settings.use_binary_vector = False
    self.model_settings.dim=dim

    if other_settings is not None:
      self._output_settings = other_settings.output_settings
      self._network_settings = other_settings.network_settings
    else:
      self._output_settings = seldoncore.OutputSettings()
      self._network_settings = seldoncore.InitialNetworkSettings()

    self._options = seldoncore.SimulationOptions()
    self._options.model_string = "Deffuant"
    self._options.model_settings = self.model_settings
    self._options.output_settings = self._output_settings
    self._options.network_settings = self._network_settings
    self._options.model = seldoncore.Model.DeffuantModel

    if rng_seed is not None:
      self._options.rng_seed = rng_seed
    self._simulation = seldoncore.SimulationSimpleAgent(options = self._options, agent_file = agent_file, network_file = network_file)

    self.Network = self._simulation.network

  def run(self, output_dir: str = None):
    """
    Run the simulation.

    Parameters:
    -----------
    output_dir : str, default=None
      The directory to output the files to. If None, the files are not written out. Instead the Network is stored in the Network attribute.
    """
    seldoncore.validate_settings(self._options)
    seldoncore.print_settings(self._options)
    cwd = pathlib.Path.cwd()
    if output_dir is not None:
      output_path = cwd / pathlib.Path(output_dir)
      if output_path.exists():
         user_input = input("The directory already exists. Do you want to overwrite it? (y/n): ")
         if user_input.lower() != "y":
            raise Exception("Ouput Directory Exists. Simulation Terminated!!")
      print(f"Output directory path set to: {output_path}\n");
      output_path.mkdir(parents=True, exist_ok=True)
      self._simulation.run(output_dir)
      
    else:
      self._simulation.run("")

    self.Network = self._simulation.network

  def print_settings(self):
    """
    Print the settings of the simulation.
    """
    seldoncore.print_settings(self._options)
  
  def get_Network(self):
    """
    Access the network generated by the simulation.

    Returns:
    --------
    seldoncore.Network
      The network generated by the simulation.
    """
    return self.Network
  
  def agents_opinions(self, index: int = None):
      """
      Access the agents data from the simulation.

      Parameters:
      -----------
      index : int
        The index of the agent to access. The index is 0-based. If not provided, all agents are returned.
      """
      if index is None:
          result = []
          for agent in self.Network.agent:
              result.append(agent.data.opinion)
          return result
      else:
          return self.Network.agent[index].data.opinion

model = Deffuant_Vector_Model(max_iterations=100,rng_seed=120)
model.run("./output1")

network = model.get_Network()
print(network.n_agents())
# # opinions = model.agents_opinions()
# for x in network.get_neighbours(1):
#    print(x)
# # for x in network.get_weights(1):
# #    print(x)
# network.set_neighbours_and_weights(1, [16,45], 0.5)
# for x in network.get_weights(1):
#    print(x)
# for x in network.get_neighbours(1):
#    print(x)
# model.run()
# for x in network.get_weights(1):
#    print(x)
# for x in network.get_neighbours(1):
#    print(x)
# print(opinions)

# seldoncore.run_simulation(config_file_path="/home/parrot_user/Desktop/pyseldon/examples/test.toml", output_dir_path= "./output")